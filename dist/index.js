var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i3 = 0; i3 < 10; i3++) {
          test2["_" + String.fromCharCode(i3)] = i3;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s3 = 1; s3 < arguments.length; s3++) {
        from = Object(arguments[s3]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i3 = 0; i3 < symbols.length; i3++) {
            if (propIsEnumerable.call(from, symbols[i3])) {
              to[symbols[i3]] = from[symbols[i3]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/vary/index.js
var require_vary = __commonJS({
  "node_modules/vary/index.js"(exports, module) {
    "use strict";
    module.exports = vary;
    module.exports.append = append;
    var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
    function append(header, field) {
      if (typeof header !== "string") {
        throw new TypeError("header argument is required");
      }
      if (!field) {
        throw new TypeError("field argument is required");
      }
      var fields = !Array.isArray(field) ? parse(String(field)) : field;
      for (var j4 = 0; j4 < fields.length; j4++) {
        if (!FIELD_NAME_REGEXP.test(fields[j4])) {
          throw new TypeError("field argument contains an invalid header name");
        }
      }
      if (header === "*") {
        return header;
      }
      var val = header;
      var vals = parse(header.toLowerCase());
      if (fields.indexOf("*") !== -1 || vals.indexOf("*") !== -1) {
        return "*";
      }
      for (var i3 = 0; i3 < fields.length; i3++) {
        var fld = fields[i3].toLowerCase();
        if (vals.indexOf(fld) === -1) {
          vals.push(fld);
          val = val ? val + ", " + fields[i3] : fields[i3];
        }
      }
      return val;
    }
    function parse(header) {
      var end = 0;
      var list = [];
      var start = 0;
      for (var i3 = 0, len = header.length; i3 < len; i3++) {
        switch (header.charCodeAt(i3)) {
          case 32:
            if (start === end) {
              start = end = i3 + 1;
            }
            break;
          case 44:
            list.push(header.substring(start, end));
            start = end = i3 + 1;
            break;
          default:
            end = i3 + 1;
            break;
        }
      }
      list.push(header.substring(start, end));
      return list;
    }
    function vary(res, field) {
      if (!res || !res.getHeader || !res.setHeader) {
        throw new TypeError("res argument is required");
      }
      var val = res.getHeader("Vary") || "";
      var header = Array.isArray(val) ? val.join(", ") : String(val);
      if (val = append(header, field)) {
        res.setHeader("Vary", val);
      }
    }
  }
});

// node_modules/cors/lib/index.js
var require_lib = __commonJS({
  "node_modules/cors/lib/index.js"(exports, module) {
    (function() {
      "use strict";
      var assign = require_object_assign();
      var vary = require_vary();
      var defaults = {
        origin: "*",
        methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
        preflightContinue: false,
        optionsSuccessStatus: 204
      };
      function isString(s3) {
        return typeof s3 === "string" || s3 instanceof String;
      }
      function isOriginAllowed(origin, allowedOrigin) {
        if (Array.isArray(allowedOrigin)) {
          for (var i3 = 0; i3 < allowedOrigin.length; ++i3) {
            if (isOriginAllowed(origin, allowedOrigin[i3])) {
              return true;
            }
          }
          return false;
        } else if (isString(allowedOrigin)) {
          return origin === allowedOrigin;
        } else if (allowedOrigin instanceof RegExp) {
          return allowedOrigin.test(origin);
        } else {
          return !!allowedOrigin;
        }
      }
      function configureOrigin(options, req) {
        var requestOrigin = req.headers.origin, headers = [], isAllowed;
        if (!options.origin || options.origin === "*") {
          headers.push([{
            key: "Access-Control-Allow-Origin",
            value: "*"
          }]);
        } else if (isString(options.origin)) {
          headers.push([{
            key: "Access-Control-Allow-Origin",
            value: options.origin
          }]);
          headers.push([{
            key: "Vary",
            value: "Origin"
          }]);
        } else {
          isAllowed = isOriginAllowed(requestOrigin, options.origin);
          headers.push([{
            key: "Access-Control-Allow-Origin",
            value: isAllowed ? requestOrigin : false
          }]);
          headers.push([{
            key: "Vary",
            value: "Origin"
          }]);
        }
        return headers;
      }
      function configureMethods(options) {
        var methods = options.methods;
        if (methods.join) {
          methods = options.methods.join(",");
        }
        return {
          key: "Access-Control-Allow-Methods",
          value: methods
        };
      }
      function configureCredentials(options) {
        if (options.credentials === true) {
          return {
            key: "Access-Control-Allow-Credentials",
            value: "true"
          };
        }
        return null;
      }
      function configureAllowedHeaders(options, req) {
        var allowedHeaders = options.allowedHeaders || options.headers;
        var headers = [];
        if (!allowedHeaders) {
          allowedHeaders = req.headers["access-control-request-headers"];
          headers.push([{
            key: "Vary",
            value: "Access-Control-Request-Headers"
          }]);
        } else if (allowedHeaders.join) {
          allowedHeaders = allowedHeaders.join(",");
        }
        if (allowedHeaders && allowedHeaders.length) {
          headers.push([{
            key: "Access-Control-Allow-Headers",
            value: allowedHeaders
          }]);
        }
        return headers;
      }
      function configureExposedHeaders(options) {
        var headers = options.exposedHeaders;
        if (!headers) {
          return null;
        } else if (headers.join) {
          headers = headers.join(",");
        }
        if (headers && headers.length) {
          return {
            key: "Access-Control-Expose-Headers",
            value: headers
          };
        }
        return null;
      }
      function configureMaxAge(options) {
        var maxAge = (typeof options.maxAge === "number" || options.maxAge) && options.maxAge.toString();
        if (maxAge && maxAge.length) {
          return {
            key: "Access-Control-Max-Age",
            value: maxAge
          };
        }
        return null;
      }
      function applyHeaders(headers, res) {
        for (var i3 = 0, n2 = headers.length; i3 < n2; i3++) {
          var header = headers[i3];
          if (header) {
            if (Array.isArray(header)) {
              applyHeaders(header, res);
            } else if (header.key === "Vary" && header.value) {
              vary(res, header.value);
            } else if (header.value) {
              res.setHeader(header.key, header.value);
            }
          }
        }
      }
      function cors2(options, req, res, next) {
        var headers = [], method = req.method && req.method.toUpperCase && req.method.toUpperCase();
        if (method === "OPTIONS") {
          headers.push(configureOrigin(options, req));
          headers.push(configureCredentials(options, req));
          headers.push(configureMethods(options, req));
          headers.push(configureAllowedHeaders(options, req));
          headers.push(configureMaxAge(options, req));
          headers.push(configureExposedHeaders(options, req));
          applyHeaders(headers, res);
          if (options.preflightContinue) {
            next();
          } else {
            res.statusCode = options.optionsSuccessStatus;
            res.setHeader("Content-Length", "0");
            res.end();
          }
        } else {
          headers.push(configureOrigin(options, req));
          headers.push(configureCredentials(options, req));
          headers.push(configureExposedHeaders(options, req));
          applyHeaders(headers, res);
          next();
        }
      }
      function middlewareWrapper(o2) {
        var optionsCallback = null;
        if (typeof o2 === "function") {
          optionsCallback = o2;
        } else {
          optionsCallback = function(req, cb) {
            cb(null, o2);
          };
        }
        return function corsMiddleware(req, res, next) {
          optionsCallback(req, function(err, options) {
            if (err) {
              next(err);
            } else {
              var corsOptions = assign({}, defaults, options);
              var originCallback = null;
              if (corsOptions.origin && typeof corsOptions.origin === "function") {
                originCallback = corsOptions.origin;
              } else if (corsOptions.origin) {
                originCallback = function(origin, cb) {
                  cb(null, corsOptions.origin);
                };
              }
              if (originCallback) {
                originCallback(req.headers.origin, function(err2, origin) {
                  if (err2 || !origin) {
                    next(err2);
                  } else {
                    corsOptions.origin = origin;
                    cors2(corsOptions, req, res, next);
                  }
                });
              } else {
                next();
              }
            }
          });
        };
      }
      module.exports = middlewareWrapper;
    })();
  }
});

// node_modules/async-exit-hook/index.js
var require_async_exit_hook = __commonJS({
  "node_modules/async-exit-hook/index.js"(exports, module) {
    "use strict";
    var hooks = [];
    var errHooks = [];
    var called = false;
    var waitingFor = 0;
    var asyncTimeoutMs = 1e4;
    var events = {};
    var filters = {};
    function exit(exit2, code, err) {
      let doExitDone = false;
      function doExit() {
        if (doExitDone) {
          return;
        }
        doExitDone = true;
        if (exit2 === true) {
          process.nextTick(process.exit.bind(null, code));
        }
      }
      function stepTowardExit() {
        process.nextTick(() => {
          if (--waitingFor === 0) {
            doExit();
          }
        });
      }
      function runHook(syncArgCount, err2, hook) {
        if (exit2 && hook.length > syncArgCount) {
          waitingFor++;
          if (err2) {
            return hook(err2, stepTowardExit);
          }
          return hook(stepTowardExit);
        }
        if (err2) {
          return hook(err2);
        }
        return hook();
      }
      if (called) {
        return;
      }
      called = true;
      if (err) {
        errHooks.map(runHook.bind(null, 1, err));
      }
      hooks.map(runHook.bind(null, 0, null));
      if (waitingFor) {
        setTimeout(() => {
          doExit();
        }, asyncTimeoutMs);
      } else {
        doExit();
      }
    }
    function add(hook) {
      hooks.push(hook);
      if (hooks.length === 1) {
        add.hookEvent("exit");
        add.hookEvent("beforeExit", 0);
        add.hookEvent("SIGHUP", 128 + 1);
        add.hookEvent("SIGINT", 128 + 2);
        add.hookEvent("SIGTERM", 128 + 15);
        add.hookEvent("SIGBREAK", 128 + 21);
        add.hookEvent("message", 0, function(msg) {
          if (msg !== "shutdown") {
            return true;
          }
        });
      }
    }
    add.hookEvent = function(event, code, filter) {
      events[event] = function() {
        const eventFilters = filters[event];
        for (let i3 = 0; i3 < eventFilters.length; i3++) {
          if (eventFilters[i3].apply(this, arguments)) {
            return;
          }
        }
        exit(code !== void 0 && code !== null, code);
      };
      if (!filters[event]) {
        filters[event] = [];
      }
      if (filter) {
        filters[event].push(filter);
      }
      process.on(event, events[event]);
    };
    add.unhookEvent = function(event) {
      process.removeListener(event, events[event]);
      delete events[event];
      delete filters[event];
    };
    add.hookedEvents = function() {
      const ret = [];
      for (const name in events) {
        if ({}.hasOwnProperty.call(events, name)) {
          ret.push(name);
        }
      }
      return ret;
    };
    add.uncaughtExceptionHandler = function(hook) {
      errHooks.push(hook);
      if (errHooks.length === 1) {
        process.once("uncaughtException", exit.bind(null, true, 1));
      }
    };
    add.unhandledRejectionHandler = function(hook) {
      errHooks.push(hook);
      if (errHooks.length === 1) {
        process.once("unhandledRejection", exit.bind(null, true, 1));
      }
    };
    add.forceExitTimeout = function(ms) {
      asyncTimeoutMs = ms;
    };
    module.exports = add;
  }
});

// node_modules/@srclaunch/exceptions/dist/index.js
var aa = class {
  analytics(e3) {
  }
  critical(e3) {
  }
  debug(e3) {
  }
  async exception(e3) {
    console.log(e3);
  }
  http(e3) {
  }
  async info(e3) {
    console.log(e3);
  }
  warning(e3) {
  }
  constructor(e3) {
  }
};
var Re = aa;
var ia = ((e3) => (e3.Comment = "comment", e3.Create = "create", e3.Delete = "delete", e3.Edit = "edit", e3.Invoice = "invoice", e3.Message = "message", e3.PageView = "pageView", e3.Paid = "paid", e3.Payment = "payment", e3.Purchase = "purchase", e3.Referral = "referral", e3.Renewal = "renewal", e3.Signup = "signup", e3.Subscription = "subscription", e3.Upgrade = "upgrade", e3))(ia || {});
var na = ((e3) => (e3.Business = "business", e3.Engineering = "engineering", e3.Exception = "exception", e3.LogMessage = "log-message", e3.Marketing = "marketing", e3.PageLeave = "page-leave", e3.PageView = "page-view", e3.Product = "product", e3.QualityManagement = "quality-management", e3.UserAccess = "user-access", e3.UserLogin = "user-login", e3.UserLogout = "user-logout", e3.UserSignup = "user-signup", e3.UserPreferencesChanged = "user-preferences-changed", e3.WebsiteVisit = "website-visit", e3))(na || {});
var sa = ((e3) => (e3.CloseTab = "close-tab", e3.ExternalLink = "external-link", e3.NavigateAway = "navigate-away", e3.Unknown = "unknown", e3))(sa || {});
var ta = ((e3) => (e3.Ecs = "Ecs", e3))(ta || {});
var oa = ((e3) => (e3.Finished = "Finished", e3.Queued = "Queued", e3.Running = "Running", e3.Started = "Started", e3))(oa || {});
var ua = ((e3) => (e3.Mobile = "mobile", e3.TV = "tv", e3.Watch = "watch", e3.Web = "web", e3))(ua || {});
var ra = ((e3) => (e3.Development = "Development", e3.NonProduction = "NonProduction", e3.Production = "Production", e3))(ra || {});
var ma = ((e3) => (e3.Completed = "completed", e3.Started = "started", e3.Uncompleted = "uncompleted", e3))(ma || {});
var la = ((e3) => (e3.Build = "Build", e3.Deployment = "Deployment", e3.Test = "Test", e3))(la || {});
var da = ((e3) => (e3.Canceled = "Canceled", e3.Completed = "Completed", e3.Failed = "Failed", e3.Running = "Running", e3.Queued = "Queued", e3.Waiting = "Waiting", e3))(da || {});
var ca = ((e3) => (e3.Canceled = "Canceled", e3.Completed = "Completed", e3.Failed = "Failed", e3.Running = "Running", e3.Queued = "Queued", e3.Waiting = "Waiting", e3))(ca || {});
var Aa = ((e3) => (e3.ForgotPassword = "forgot_password", e3.Index = "index", e3.Login = "login", e3.PageNotFound = "404", e3.Signup = "signup", e3.VerifyCode = "verify_code", e3))(Aa || {});
var ga = ((e3) => (e3.Info = "info", e3.Warning = "warning", e3.Error = "error", e3.Success = "success", e3))(ga || {});
var Ta = ((e3) => (e3.Details = "details", e3.Dialog = "dialog", e3))(Ta || {});
var pa = ((e3) => (e3.Info = "info", e3.Warning = "warning", e3.Error = "error", e3.Success = "success", e3))(pa || {});
var Ea = ((e3) => (e3.AccountBalance = "AccountBalance", e3.UserAssets = "UserAssets", e3.UserCreditCardDebt = "UserCreditCardDebt", e3.UserCreditLimit = "UserCreditLimit", e3.UserCreditUtilization = "UserCreditUtilization", e3.UserDebt = "UserDebt", e3.UserInvestments = "UserInvestments", e3.UserRetirement = "UserRetirement", e3.UserSavings = "UserSavings", e3))(Ea || {});
var fa = ((e3) => (e3.DateTime = "date_time", e3.True = "true", e3.False = "false", e3.UniqueId = "unique_id", e3))(fa || {});
var ha = ((e3) => (e3.DomainModel = "domain_entity", e3.GenericModel = "generic_entity", e3))(ha || {});
var Ca = ((e3) => (e3.AirportCode = "airport-code", e3.BankIDCode = "bank-id-code", e3.BitcoinAddress = "bitcoin-address", e3.Boolean = "boolean", e3.City = "city", e3.Color = "color", e3.CountryCode = "country-code", e3.CreditCard = "credit-card", e3.CurrencyAmount = "currency-amount", e3.CurrencyCode = "currency-code", e3.DataURI = "data-uri", e3.Date = "date", e3.DateRange = "date-range", e3.DateTime = "date-time", e3.DayOfMonth = "day-of-month", e3.DomainName = "domain-name", e3.EmailAddress = "email-address", e3.EthereumAddress = "ethereum-address", e3.EAN = "european-article-number", e3.EIN = "employer-identification-number", e3.Float = "float", e3.GeographicCoordinate = "geographic-coordinate", e3.GeographicCoordinates = "geographic-coordinates", e3.GitRepositoryURL = "git-repository-url", e3.HSLColor = "hsl-color", e3.HexColor = "hex-color", e3.Hexadecimal = "hexadecimal", e3.IBAN = "international-bank-account-number", e3.IMEI = "international-mobile-equipment-identifier", e3.IPAddress = "ip-address", e3.IPAddressRange = "ip-address-range", e3.ISBN = "international-standard-book-number", e3.ISIN = "international-stock-number", e3.ISMN = "international-standard-music-number", e3.ISSN = "international-standard-serial-number", e3.ISO8601 = "iso-8601", e3.ISO31661Alpha2 = "iso-31661-alpha-2", e3.ISO31661Alpha3 = "iso-31661-alpha-3", e3.ISO4217 = "iso-4217", e3.Image = "image", e3.Integer = "integer", e3.JSON = "json", e3.LanguageCode = "language-code", e3.LicensePlateNumber = "license-plate-number", e3.LongText = "long-text", e3.MD5 = "md5", e3.Markdown = "markdown", e3.Menu = "menu", e3.Number = "number", e3.MACAddress = "mac-address", e3.MagnetURI = "magnet-uri", e3.MimeType = "mime-type", e3.Month = "month", e3.Password = "password", e3.PassportNumber = "passport-number", e3.Percent = "percent", e3.PhoneNumber = "phone-number", e3.Port = "port", e3.PostalCode = "postal-code", e3.Province = "province", e3.RFC3339 = "rfc-3339", e3.RGBColor = "rgb-color", e3.SemanticVersion = "semantic-version", e3.SSN = "social-security-number", e3.State = "state", e3.StreetAddress = "street-address", e3.String = "string", e3.Tags = "tags", e3.TaxIDNumber = "tax-id-number", e3.Time = "time", e3.TimeOfDay = "time-of-day", e3.TimeRange = "time-range", e3.TimezoneRegion = "timezone-region", e3.URL = "url", e3.URLPath = "url-path", e3.UUID = "uuid", e3.VATIDNumber = "value-added-tax-id-number", e3.VerificationCode = "verification-code", e3.Video = "video", e3.Weekday = "weekday", e3.Year = "year", e3))(Ca || {});
var Ia = ((e3) => (e3.Critical = "Critical", e3.Error = "Error", e3.Fatal = "Fatal", e3.Warning = "Warning", e3))(Ia || {});
var va = ((e3) => (e3.Contains = "contains", e3.HasCharacterCount = "has-character-count", e3.HasNumberCount = "has-number-count", e3.HasLetterCount = "has-letter-count", e3.HasLowercaseCount = "has-lowercase-count", e3.HasSpacesCount = "has-spaces-count", e3.HasSymbolCount = "has-symbol-count", e3.HasUppercaseCount = "has-uppercase-count", e3.IsAfter = "is-after", e3.IsAfterOrEqual = "is-after-or-equal", e3.IsAirport = "is-airport", e3.IsAlpha = "is-alpha", e3.IsAlphanumeric = "is-alphanumeric", e3.IsAlgorithmHash = "is-algorithm-hash", e3.IsAscii = "is-ascii", e3.IsBase64 = "is-base-64", e3.IsBefore = "is-before", e3.IsBeforeOrAfter = "is-before-or-after", e3.IsBeforeOrEqual = "is-before-or-equal", e3.IsBetween = "is-between", e3.IsBIC = "is-bic", e3.IsBitcoinAddress = "is-bitcoin-address", e3.IsBoolean = "is-boolean", e3.IsColor = "is-color", e3.IsComplexEnough = "is-complex-enough", e3.IsCountry = "is-country", e3.IsCreditCard = "is-credit-card", e3.IsCurrency = "is-currency", e3.IsDataURI = "is-data-uri", e3.IsDate = "is-date", e3.IsDateRange = "is-date-range", e3.IsDateTime = "is-date-time", e3.IsDayOfMonth = "is-day-of-month", e3.IsDecimal = "is-decimal", e3.IsDivisibleBy = "is-divisible-by", e3.IsDomainName = "is-domain-name", e3.IsEmailAddress = "is-email-address", e3.IsEthereumAddress = "is-ethereum-address", e3.IsEAN = "is-ean", e3.IsEIN = "is-ein", e3.IsEqual = "is-equal", e3.IsEvenNumber = "is-even-number", e3.IsFloat = "is-float", e3.IsIBAN = "is-iban", e3.IsGreaterThan = "greater-than", e3.IsGreaterThanOrEqual = "greater-than-or-equal", e3.IsHSLColor = "is-hsl-color", e3.IsHexColor = "is-hex-color", e3.IsHexadecimal = "is-hexadecimal", e3.IsIdentityCardCode = "is-identity-card-code", e3.IsIMEI = "is-imei", e3.IsInIPAddressRange = "is-in-ip-address-range", e3.IsInList = "is-in-list", e3.IsInTheLast = "is-in-the-last", e3.IsInteger = "is-integer", e3.IsIPAddress = "is-ip-address", e3.IsIPAddressRange = "is-ip-address-range", e3.IsISBN = "is-isbn", e3.IsISIN = "is-isin", e3.IsISMN = "is-ismn", e3.IsISRC = "is-isrc", e3.IsISSN = "is-issn", e3.IsISO4217 = "is-iso-4217", e3.IsISO8601 = "is-iso-8601", e3.IsISO31661Alpha2 = "is-iso-31661-alpha-2", e3.IsISO31661Alpha3 = "is-iso-31661-alpha-3", e3.IsJSON = "is-json", e3.IsLanguage = "is-language", e3.IsLatitude = "is-latitude", e3.IsLongitude = "is-longitude", e3.IsLengthEqual = "is-length-equal", e3.IsLengthGreaterThan = "is-length-greater-than", e3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", e3.IsLengthLessThan = "is-length-less-than", e3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", e3.IsLessThan = "less-than", e3.IsLessThanOrEqual = "less-than-or-equal", e3.IsLicensePlateNumber = "is-license-plate-number", e3.IsLowercase = "is-lowercase", e3.IsOctal = "is-octal", e3.IsMACAddress = "is-mac-address", e3.IsMD5 = "is-md5", e3.IsMagnetURI = "is-magnet-uri", e3.IsMarkdown = "is-markdown", e3.IsMimeType = "is-mime-type", e3.IsMonth = "is-month", e3.IsNegativeNumber = "is-negative-number", e3.IsNotDate = "is-not-date", e3.IsNotEqual = "is-not-equal", e3.IsNotInIPAddressRange = "is-not-in-ip-address-range", e3.IsNotInList = "is-not-in-list", e3.IsNotNull = "is-not-null", e3.IsNotRegexMatch = "is-not-regex-match", e3.IsNotToday = "is-not-today", e3.IsNumber = "is-number", e3.IsNumeric = "is-numeric", e3.IsOddNumber = "is-odd-number", e3.IsPassportNumber = "is-passport-number", e3.IsPhoneNumber = "is-phone-number", e3.IsPort = "is-port", e3.IsPositiveNumber = "is-positive-number", e3.IsPostalCode = "is-postal-code", e3.IsProvince = "is-province", e3.IsRGBColor = "is-rgb-color", e3.IsRegexMatch = "is-regex-match", e3.IsRequired = "is-required", e3.IsSemanticVersion = "is-semantic-version", e3.IsSlug = "is-slug", e3.IsSSN = "is-ssn", e3.IsState = "is-state", e3.IsStreetAddress = "is-street-address", e3.IsString = "is-string", e3.IsStrongPassword = "is-strong-password", e3.IsTags = "is-tags", e3.IsTaxIDNumber = "is-tax-id-number", e3.IsThisMonth = "is-this-month", e3.IsThisQuarter = "is-this-quarter", e3.IsThisWeek = "is-this-week", e3.IsThisWeekend = "is-this-weekend", e3.IsThisYear = "is-this-year", e3.IsTime = "is-time", e3.IsTimeOfDay = "is-time-of-day", e3.IsTimeRange = "is-time-range", e3.IsToday = "is-today", e3.IsURL = "is-url", e3.IsUUID = "is-uuid", e3.IsUppercase = "is-uppercase", e3.IsUsernameAvailable = "is-username-available", e3.IsValidStreetAddress = "is-valid-street-address", e3.IsVATIDNumber = "is-vat-id-number", e3.IsWeekday = "is-weekday", e3.IsWeekend = "is-weekend", e3.IsYear = "is-year", e3))(va || {});
var Sa = ((e3) => (e3.IsAuthenticated = "is-authenticated", e3.IsNotAuthenticated = "is-not-authenticated", e3.IsUsernameAvailable = "is-username-available", e3.PasswordMismatch = "password-mismatch", e3))(Sa || {});
var ba = ((e3) => (e3[e3.IsHSLColor = "is-hsl-color"] = "IsHSLColor", e3[e3.IsHexColor = "is-hex-color"] = "IsHexColor", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsRGBColor = "is-rgb-color"] = "IsRGBColor", e3[e3.IsString = "is-string"] = "IsString", e3))(ba || {});
var ya = ((e3) => (e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsCurrency = "is-currency"] = "IsCurrency", e3[e3.IsDecimal = "is-decimal"] = "IsDecimal", e3[e3.IsDivisibleBy = "is-divisible-by"] = "IsDivisibleBy", e3[e3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", e3[e3.IsFloat = "is-float"] = "IsFloat", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsInteger = "is-integer"] = "IsInteger", e3[e3.IsISO8601 = "is-iso-8601"] = "IsISO8601", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsNegativeNumber = "is-negative-number"] = "IsNegativeNumber", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsOddNumber = "is-odd-number"] = "IsOddNumber", e3[e3.IsPositiveNumber = "is-positive-number"] = "IsPositiveNumber", e3))(ya || {});
var _a = ((e3) => (e3[e3.IsBitcoinAddress = "is-bitcoin-address"] = "IsBitcoinAddress", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(_a || {});
var Ba = ((e3) => (e3[e3.IsEthereumAddress = "is-ethereum-address"] = "IsEthereumAddress", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(Ba || {});
var Da = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsJSON = "is-json"] = "IsJSON", e3[e3.IsLanguage = "is-language"] = "IsLanguage", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(Da || {});
var Na = ((e3) => (e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Na || {});
var Ua = ((e3) => (e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsCountry = "is-country"] = "IsCountry", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Ua || {});
var ka = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsFloat = "is-float"] = "IsFloat", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumeric = "is-numeric"] = "IsNumeric", e3))(ka || {});
var xa = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsFloat = "is-float"] = "IsFloat", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumeric = "is-numeric"] = "IsNumeric", e3))(xa || {});
var Fa = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsPostalCode = "is-postal-code"] = "IsPostalCode", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(Fa || {});
var Ma = ((e3) => (e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsProvince = "is-province"] = "IsProvince", e3[e3.IsString = "is-string"] = "IsString", e3))(Ma || {});
var La = ((e3) => (e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsState = "is-state"] = "IsState", e3[e3.IsString = "is-string"] = "IsString", e3))(La || {});
var Pa = ((e3) => (e3[e3.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsStreetAddress = "is-street-address"] = "IsStreetAddress", e3))(Pa || {});
var Ra = ((e3) => (e3[e3.IsAirport = "is-airport"] = "IsAirport", e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Ra || {});
var za = ((e3) => (e3[e3.IsAlgorithmHash = "is-algorithm-hash"] = "IsAlgorithmHash", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(za || {});
var qa = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", e3[e3.IsString = "is-string"] = "IsString", e3))(qa || {});
var Ga = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsUUID = "is-uuid"] = "IsUUID", e3))(Ga || {});
var Ka = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsMD5 = "is-md5"] = "IsMD5", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Ka || {});
var wa = ((e3) => (e3[e3.IsBoolean = "is-boolean"] = "IsBoolean", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(wa || {});
var Oa = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsDate = "is-date"] = "IsDate", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotDate = "is-not-date"] = "IsNotDate", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNotToday = "is-not-today"] = "IsNotToday", e3[e3.IsThisWeek = "is-this-week"] = "IsThisWeek", e3[e3.IsThisMonth = "is-this-month"] = "IsThisMonth", e3[e3.IsThisQuarter = "is-this-quarter"] = "IsThisQuarter", e3[e3.IsThisYear = "is-this-year"] = "IsThisYear", e3[e3.IsToday = "is-today"] = "IsToday", e3[e3.IsWeekend = "is-weekend"] = "IsWeekend", e3))(Oa || {});
var Ha = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsDate = "is-date"] = "IsDate", e3[e3.IsDateRange = "is-date-range"] = "IsDateRange", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(Ha || {});
var Wa = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsDate = "is-date"] = "IsDate", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotDate = "is-not-date"] = "IsNotDate", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNotToday = "is-not-today"] = "IsNotToday", e3[e3.IsThisWeek = "is-this-week"] = "IsThisWeek", e3[e3.IsThisMonth = "is-this-month"] = "IsThisMonth", e3[e3.IsThisQuarter = "is-this-quarter"] = "IsThisQuarter", e3[e3.IsThisYear = "is-this-year"] = "IsThisYear", e3[e3.IsToday = "is-today"] = "IsToday", e3[e3.IsWeekend = "is-weekend"] = "IsWeekend", e3))(Wa || {});
var Va = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsDayOfMonth = "is-day-of-month"] = "IsDayOfMonth", e3[e3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsInteger = "is-integer"] = "IsInteger", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsOddNumber = "is-odd-number"] = "IsOddNumber", e3[e3.IsToday = "is-today"] = "IsToday", e3[e3.IsWeekday = "is-weekday"] = "IsWeekday", e3[e3.IsWeekend = "is-weekend"] = "IsWeekend", e3))(Va || {});
var ja = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsInteger = "is-integer"] = "IsInteger", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsMonth = "is-month"] = "IsMonth", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsOddNumber = "is-odd-number"] = "IsOddNumber", e3[e3.IsThisMonth = "is-this-month"] = "IsThisMonth", e3))(ja || {});
var Ya = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsTime = "is-time"] = "IsTime", e3))(Ya || {});
var Za = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsTime = "is-time"] = "IsTime", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsTimeRange = "is-time-range"] = "IsTimeRange", e3))(Za || {});
var Ja = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsTimeOfDay = "is-time-of-day"] = "IsTimeOfDay", e3[e3.IsTimeRange = "is-time-range"] = "IsTimeRange", e3))(Ja || {});
var Qa = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsOddNumber = "is-odd-number"] = "IsOddNumber", e3[e3.IsWeekday = "is-weekday"] = "IsWeekday", e3[e3.IsWeekend = "is-weekend"] = "IsWeekend", e3))(Qa || {});
var $a = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsInteger = "is-integer"] = "IsInteger", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsOddNumber = "is-odd-number"] = "IsOddNumber", e3[e3.IsThisYear = "is-this-year"] = "IsThisYear", e3[e3.IsYear = "is-year"] = "IsYear", e3))($a || {});
var Xa = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsHexadecimal = "is-hexadecimal"] = "IsHexadecimal", e3[e3.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", e3[e3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", e3[e3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", e3[e3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", e3[e3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Xa || {});
var ei = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsJSON = "is-json"] = "IsJSON", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(ei || {});
var ai = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsMarkdown = "is-markdown"] = "IsMarkdown", e3[e3.IsString = "is-string"] = "IsString", e3))(ai || {});
var ii = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(ii || {});
var ni = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(ni || {});
var si = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsDataURI = "is-data-uri"] = "IsDataURI", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(si || {});
var ti = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsDomainName = "is-domain-name"] = "IsDomainName", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ti || {});
var oi = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEmailAddress = "is-email-address"] = "IsEmailAddress", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(oi || {});
var ui = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsIPAddress = "is-ip-address"] = "IsIPAddress", e3[e3.IsInIPAddressRange = "is-in-ip-address-range"] = "IsInIPAddressRange", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ui || {});
var ri = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsIPAddressRange = "is-ip-address-range"] = "IsIPAddressRange", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ri || {});
var mi = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsInteger = "is-integer"] = "IsInteger", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(mi || {});
var li = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsMACAddress = "is-mac-address"] = "IsMACAddress", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(li || {});
var di = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsMagnetURI = "is-magnet-uri"] = "IsMagnetURI", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(di || {});
var ci = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsMimeType = "is-mime-type"] = "IsMimeType", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ci || {});
var Ai = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsSlug = "is-slug"] = "IsSlug", e3))(Ai || {});
var gi = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsURL = "is-url"] = "IsURL", e3))(gi || {});
var Ti = ((e3) => (e3[e3.IsAfter = "is-after"] = "IsAfter", e3[e3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", e3[e3.IsBefore = "is-before"] = "IsBefore", e3[e3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", e3[e3.IsBetween = "is-between"] = "IsBetween", e3[e3.IsDecimal = "is-decimal"] = "IsDecimal", e3[e3.IsDivisibleBy = "is-divisible-by"] = "IsDivisibleBy", e3[e3.IsEAN = "is-ean"] = "IsEAN", e3[e3.IsEIN = "is-ein"] = "IsEIN", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", e3[e3.IsFloat = "is-float"] = "IsFloat", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsInt = "is-integer"] = "IsInt", e3[e3.IsISBN = "is-isbn"] = "IsISBN", e3[e3.IsISMN = "is-ismn"] = "IsISMN", e3[e3.IsISSN = "is-issn"] = "IsISSN", e3[e3.IsLatitude = "is-latitude"] = "IsLatitude", e3[e3.IsLongitude = "is-longitude"] = "IsLongitude", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsMACAddress = "is-mac-address"] = "IsMACAddress", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsNegativeNumber = "is-negative-number"] = "IsNegativeNumber", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsOddNumber = "is-odd-number"] = "IsOddNumber", e3[e3.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", e3[e3.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", e3[e3.IsPort = "is-port"] = "IsPort", e3[e3.IsPositiveNumber = "is-positive-number"] = "IsPositiveNumber", e3[e3.IsPostalCode = "is-postal-code"] = "IsPostalCode", e3[e3.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", e3[e3.IsSSN = "is-ssn"] = "IsSSN", e3[e3.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", e3[e3.IsUUID = "is-uuid"] = "IsUUID", e3[e3.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", e3))(Ti || {});
var pi = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsFloat = "is-float"] = "IsFloat", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsNumeric = "is-numeric"] = "IsNumeric", e3))(pi || {});
var Ei = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInteger = "is-integer"] = "IsInteger", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsNumeric = "is-numeric"] = "IsNumeric", e3))(Ei || {});
var fi = ((e3) => (e3[e3.IsCreditCard = "is-credit-card"] = "IsCreditCard", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", e3[e3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", e3[e3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", e3[e3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", e3[e3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", e3[e3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", e3))(fi || {});
var hi = ((e3) => (e3[e3.isEmailAddress = "is-email-address"] = "isEmailAddress", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", e3[e3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", e3[e3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", e3[e3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", e3[e3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", e3[e3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", e3))(hi || {});
var Ci = ((e3) => (e3[e3.IsLicensePlateNumber = "is-license-plate-number"] = "IsLicensePlateNumber", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", e3))(Ci || {});
var Ii = ((e3) => (e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", e3))(Ii || {});
var vi = ((e3) => (e3[e3.IsComplexEnough = "is-complex-enough"] = "IsComplexEnough", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", e3[e3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", e3[e3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", e3[e3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", e3[e3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", e3[e3.IsStrongPassword = "is-strong-password"] = "IsStrongPassword", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", e3))(vi || {});
var Si = ((e3) => (e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", e3[e3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", e3))(Si || {});
var bi = ((e3) => (e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsSSN = "is-ssn"] = "IsSSN", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", e3))(bi || {});
var yi = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsBIC = "is-bic"] = "IsBIC", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(yi || {});
var _i = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEAN = "is-ean"] = "IsEAN", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(_i || {});
var Bi = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEIN = "is-ein"] = "IsEIN", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Bi || {});
var Di = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsIBAN = "is-iban"] = "IsIBAN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Di || {});
var Ni = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsISBN = "is-isbn"] = "IsISBN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Ni || {});
var Ui = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsISIN = "is-isin"] = "IsISIN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Ui || {});
var ki = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsISMN = "is-ismn"] = "IsISMN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ki || {});
var xi = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsISSN = "is-issn"] = "IsISSN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(xi || {});
var Fi = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", e3))(Fi || {});
var Mi = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", e3))(Mi || {});
var Li = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.HasNumberCount = "has-number-count"] = "HasNumberCount", e3[e3.HasLowercaseCount = "has-lowercase-count"] = "HasLowercaseCount", e3[e3.HasLetterCount = "has-letter-count"] = "HasLetterCount", e3[e3.HasSpacesCount = "has-spaces-count"] = "HasSpacesCount", e3[e3.HasSymbolCount = "has-symbol-count"] = "HasSymbolCount", e3[e3.HasUppercaseCount = "has-uppercase-count"] = "HasUppercaseCount", e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", e3[e3.IsAscii = "is-ascii"] = "IsAscii", e3[e3.IsBase64 = "is-base-64"] = "IsBase64", e3[e3.IsColor = "is-color"] = "IsColor", e3[e3.IsComplexEnough = "is-complex-enough"] = "IsComplexEnough", e3[e3.IsCreditCard = "is-credit-card"] = "IsCreditCard", e3[e3.IsDataURI = "is-data-uri"] = "IsDataURI", e3[e3.IsDomainName = "is-domain-name"] = "IsDomainName", e3[e3.IsEmailAddress = "is-email-address"] = "IsEmailAddress", e3[e3.IsEthereumAddress = "is-ethereum-address"] = "IsEthereumAddress", e3[e3.IsEAN = "is-ean"] = "IsEAN", e3[e3.IsEIN = "is-ein"] = "IsEIN", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsIBAN = "is-iban"] = "IsIBAN", e3[e3.IsHSLColor = "is-hsl-color"] = "IsHSLColor", e3[e3.IsHexColor = "is-hex-color"] = "IsHexColor", e3[e3.IsHexadecimal = "is-hexadecimal"] = "IsHexadecimal", e3[e3.IsIdentityCardCode = "is-identity-card-code"] = "IsIdentityCardCode", e3[e3.IsIMEI = "is-imei"] = "IsIMEI", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsIPAddress = "is-ip-address"] = "IsIPAddress", e3[e3.IsInIPAddressRange = "is-in-ip-address-range"] = "IsInIPAddressRange", e3[e3.IsISBN = "is-isbn"] = "IsISBN", e3[e3.IsISIN = "is-isin"] = "IsISIN", e3[e3.IsISMN = "is-ismn"] = "IsISMN", e3[e3.IsISRC = "is-isrc"] = "IsISRC", e3[e3.IsISSN = "is-issn"] = "IsISSN", e3[e3.IsLanguage = "is-language"] = "IsLanguage", e3[e3.IsLatitude = "is-latitude"] = "IsLatitude", e3[e3.IsLongitude = "is-longitude"] = "IsLongitude", e3[e3.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", e3[e3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", e3[e3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", e3[e3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", e3[e3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", e3[e3.IsLicensePlateNumber = "is-license-plate-number"] = "IsLicensePlateNumber", e3[e3.IsLowercase = "is-lowercase"] = "IsLowercase", e3[e3.IsOctal = "is-octal"] = "IsOctal", e3[e3.IsMACAddress = "is-mac-address"] = "IsMACAddress", e3[e3.IsMD5 = "is-md5"] = "IsMD5", e3[e3.IsMagnetURI = "is-magnet-uri"] = "IsMagnetURI", e3[e3.IsMarkdown = "is-markdown"] = "IsMarkdown", e3[e3.IsMimeType = "is-mime-type"] = "IsMimeType", e3[e3.IsMonth = "is-month"] = "IsMonth", e3[e3.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", e3[e3.IsNumber = "is-number"] = "IsNumber", e3[e3.IsNumeric = "is-numeric"] = "IsNumeric", e3[e3.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", e3[e3.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", e3[e3.IsPort = "is-port"] = "IsPort", e3[e3.IsPostalCode = "is-postal-code"] = "IsPostalCode", e3[e3.IsProvince = "is-province"] = "IsProvince", e3[e3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", e3[e3.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", e3[e3.IsSlug = "is-slug"] = "IsSlug", e3[e3.IsSSN = "is-ssn"] = "IsSSN", e3[e3.IsState = "is-state"] = "IsState", e3[e3.IsStreetAddress = "is-street-address"] = "IsStreetAddress", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", e3[e3.IsURL = "is-url"] = "IsURL", e3[e3.IsUUID = "is-uuid"] = "IsUUID", e3[e3.IsUppercase = "is-uppercase"] = "IsUppercase", e3[e3.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", e3[e3.IsWeekday = "is-weekday"] = "IsWeekday", e3[e3.IsWeekend = "is-weekend"] = "IsWeekend", e3[e3.IsYear = "is-year"] = "IsYear", e3))(Li || {});
var Pi = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsMarkdown = "is-markdown"] = "IsMarkdown", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNumeric = "is-numeric"] = "IsNumeric", e3[e3.IsLowercase = "is-lowercase"] = "IsLowercase", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsUppercase = "is-uppercase"] = "IsUppercase", e3))(Pi || {});
var Ri = ((e3) => (e3.InvalidCharacters = "invalid-characters", e3.InvalidPattern = "invalid-pattern", e3.NotComplexEnough = "not-complex-enough", e3.NotUnique = "not-unique", e3.NotValidEmail = "not-valid-email", e3.TooLong = "too-long", e3.TooShort = "too-short", e3.Required = "required", e3))(Ri || {});
var zi = ((e3) => (e3[e3.Allowed = 0] = "Allowed", e3[e3.Blocked = 1] = "Blocked", e3))(zi || {});
var qi = ((e3) => (e3.Canceled = "Canceled", e3.Completed = "Completed", e3.Created = "Created", e3.Faulted = "Faulted", e3.Queued = "Queued", e3.Running = "Running", e3.Waiting = "Waiting", e3))(qi || {});
var Gi = ((e3) => (e3.Archived = "ARCHIVED", e3.Compromised = "COMPROMISED", e3.Confirmed = "CONFIRMED", e3.ForcePasswordChange = "FORCE_CHANGE_PASSWORD", e3.ResetRequired = "RESET_REQUIRED", e3.Unconfirmed = "UNCONFIRMED", e3.Unknown = "UNKNOWN", e3))(Gi || {});
var Ki = ((e3) => (e3.Owner = "Owner", e3.Admin = "Admin", e3.User = "User", e3.Visitor = "Visitor", e3))(Ki || {});
var wi = ((e3) => (e3.RequiresPaymentMethod = "requires_payment_method", e3.RequiresConfirmation = "requires_confirmation", e3.RequiresAction = "requires_action", e3.Processing = "processing", e3.RequiresCapture = "requires_capture", e3.Canceled = "canceled", e3.Succeeded = "succeeded", e3))(wi || {});
var Oi = ((e3) => (e3.Incomplete = "incomplete", e3.IncompleteExpired = "incomplete_expired", e3.Trialing = "trialing", e3.Active = "active", e3.PastDue = "past_due", e3.Canceled = "canceled", e3.Unpaid = "unpaid", e3))(Oi || {});
var Hi = ((e3) => (e3.Monthly = "monthly", e3.Quarterly = "quarterly", e3.Yearly = "yearly", e3.Lifetime = "lifetime", e3))(Hi || {});
var Wi = ((e3) => (e3.Delivered = "delivered", e3.Read = "read", e3.Sending = "sending", e3.Sent = "sent", e3))(Wi || {});
var Vi = ((e3) => (e3.Audio = "audio", e3.File = "file", e3.Image = "image", e3.Text = "text", e3.Video = "video", e3))(Vi || {});
var ji = ((e3) => (e3.Audio = "audio", e3.File = "file", e3.Image = "image", e3.Video = "video", e3))(ji || {});
var Yi = ((e3) => (e3.Angry = "angry", e3.Laugh = "laugh", e3.Like = "like", e3.Love = "love", e3.Sad = "sad", e3.Wow = "wow", e3.Wink = "wink", e3.Yay = "yay", e3))(Yi || {});
var Zi = ((e3) => (e3.Email = "email", e3.PhoneNumber = "phone_number", e3))(Zi || {});
var i = ((e3) => (e3.Analytics = "analytics", e3.Critical = "critical", e3.Debug = "debug", e3.Exception = "exception", e3.Http = "http", e3.Info = "info", e3.Warning = "warning", e3))(i || {});
var Ji = ((e3) => (e3.Delete = "delete", e3.Get = "get", e3.Head = "head", e3.Patch = "patch", e3.Post = "post", e3.Put = "put", e3))(Ji || {});
var Qi = ((e3) => (e3[e3.CONTINUE = 100] = "CONTINUE", e3[e3.SWITCHING_PROTOCOLS = 101] = "SWITCHING_PROTOCOLS", e3[e3.PROCESSING = 102] = "PROCESSING", e3[e3.OK = 200] = "OK", e3[e3.CREATED = 201] = "CREATED", e3[e3.ACCEPTED = 202] = "ACCEPTED", e3[e3.NON_AUTHORITATIVE_INFORMATION = 203] = "NON_AUTHORITATIVE_INFORMATION", e3[e3.NO_CONTENT = 204] = "NO_CONTENT", e3[e3.RESET_CONTENT = 205] = "RESET_CONTENT", e3[e3.PARTIAL_CONTENT = 206] = "PARTIAL_CONTENT", e3[e3.MULTI_STATUS = 207] = "MULTI_STATUS", e3[e3.ALREADY_REPORTED = 208] = "ALREADY_REPORTED", e3[e3.IM_USED = 226] = "IM_USED", e3[e3.MULTIPLE_CHOICES = 300] = "MULTIPLE_CHOICES", e3[e3.MOVED_PERMANENTLY = 301] = "MOVED_PERMANENTLY", e3[e3.FOUND = 302] = "FOUND", e3[e3.SEE_OTHER = 303] = "SEE_OTHER", e3[e3.NOT_MODIFIED = 304] = "NOT_MODIFIED", e3[e3.USE_PROXY = 305] = "USE_PROXY", e3[e3.SWITCH_PROXY = 306] = "SWITCH_PROXY", e3[e3.TEMPORARY_REDIRECT = 307] = "TEMPORARY_REDIRECT", e3[e3.PERMANENT_REDIRECT = 308] = "PERMANENT_REDIRECT", e3[e3.BAD_REQUEST = 400] = "BAD_REQUEST", e3[e3.UNAUTHORIZED = 401] = "UNAUTHORIZED", e3[e3.PAYMENT_REQUIRED = 402] = "PAYMENT_REQUIRED", e3[e3.FORBIDDEN = 403] = "FORBIDDEN", e3[e3.NOT_FOUND = 404] = "NOT_FOUND", e3[e3.METHOD_NOT_ALLOWED = 405] = "METHOD_NOT_ALLOWED", e3[e3.NOT_ACCEPTABLE = 406] = "NOT_ACCEPTABLE", e3[e3.PROXY_AUTHENTICATION_REQUIRED = 407] = "PROXY_AUTHENTICATION_REQUIRED", e3[e3.REQUEST_TIMEOUT = 408] = "REQUEST_TIMEOUT", e3[e3.CONFLICT = 409] = "CONFLICT", e3[e3.GONE = 410] = "GONE", e3[e3.LENGTH_REQUIRED = 411] = "LENGTH_REQUIRED", e3[e3.PRECONDITION_FAILED = 412] = "PRECONDITION_FAILED", e3[e3.PAYLOAD_TOO_LARGE = 413] = "PAYLOAD_TOO_LARGE", e3[e3.URI_TOO_LONG = 414] = "URI_TOO_LONG", e3[e3.UNSUPPORTED_MEDIA_TYPE = 415] = "UNSUPPORTED_MEDIA_TYPE", e3[e3.RANGE_NOT_SATISFIABLE = 416] = "RANGE_NOT_SATISFIABLE", e3[e3.EXPECTATION_FAILED = 417] = "EXPECTATION_FAILED", e3[e3.I_AM_A_TEAPOT = 418] = "I_AM_A_TEAPOT", e3[e3.MISDIRECTED_REQUEST = 421] = "MISDIRECTED_REQUEST", e3[e3.UNPROCESSABLE_ENTITY = 422] = "UNPROCESSABLE_ENTITY", e3[e3.LOCKED = 423] = "LOCKED", e3[e3.FAILED_DEPENDENCY = 424] = "FAILED_DEPENDENCY", e3[e3.TOO_EARLY = 425] = "TOO_EARLY", e3[e3.UPGRADE_REQUIRED = 426] = "UPGRADE_REQUIRED", e3[e3.PRECONDITION_REQUIRED = 428] = "PRECONDITION_REQUIRED", e3[e3.TOO_MANY_REQUESTS = 429] = "TOO_MANY_REQUESTS", e3[e3.REQUEST_HEADER_FIELDS_TOO_LARGE = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE", e3[e3.UNAVAILABLE_FOR_LEGAL_REASONS = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS", e3[e3.INTERNAL_SERVER_ERROR = 500] = "INTERNAL_SERVER_ERROR", e3[e3.NOT_IMPLEMENTED = 501] = "NOT_IMPLEMENTED", e3[e3.BAD_GATEWAY = 502] = "BAD_GATEWAY", e3[e3.SERVICE_UNAVAILABLE = 503] = "SERVICE_UNAVAILABLE", e3[e3.GATEWAY_TIMEOUT = 504] = "GATEWAY_TIMEOUT", e3[e3.HTTP_VERSION_NOT_SUPPORTED = 505] = "HTTP_VERSION_NOT_SUPPORTED", e3[e3.VARIANT_ALSO_NEGOTIATES = 506] = "VARIANT_ALSO_NEGOTIATES", e3[e3.INSUFFICIENT_STORAGE = 507] = "INSUFFICIENT_STORAGE", e3[e3.LOOP_DETECTED = 508] = "LOOP_DETECTED", e3[e3.BANDWIDTH_LIMIT_EXCEEDED = 509] = "BANDWIDTH_LIMIT_EXCEEDED", e3[e3.NOT_EXTENDED = 510] = "NOT_EXTENDED", e3[e3.NETWORK_AUTHENTICATION_REQUIRED = 511] = "NETWORK_AUTHENTICATION_REQUIRED", e3))(Qi || {});
var $i = ((e3) => (e3.Afghanistan = "AF", e3.Albania = "AL", e3.Algeria = "DZ", e3.AmericanSamoa = "AS", e3.Andorra = "AD", e3.Angola = "AO", e3.Anguilla = "AI", e3.Antarctica = "AQ", e3.AntiguaAndBarbuda = "AG", e3.Argentina = "AR", e3.Armenia = "AM", e3.Aruba = "AW", e3.Australia = "AU", e3.Austria = "AT", e3.Azerbaijan = "AZ", e3.Bahamas = "BS", e3.Bahrain = "BH", e3.Bangladesh = "BD", e3.Barbados = "BB", e3.Belarus = "BY", e3.Belgium = "BE", e3.Belize = "BZ", e3.Benin = "BJ", e3.Bermuda = "BM", e3.Bhutan = "BT", e3.Bolivia = "BO", e3.BosniaAndHerzegovina = "BA", e3.Botswana = "BW", e3.BouvetIsland = "BV", e3.Brazil = "BR", e3.BritishIndianOceanTerritory = "IO", e3.Brunei = "BN", e3.Bulgaria = "BG", e3.BurkinaFaso = "BF", e3.Burundi = "BI", e3.Cambodia = "KH", e3.Cameroon = "CM", e3.Canada = "CA", e3.CapeVerde = "CV", e3.CaymanIslands = "KY", e3.CentralAfricanRepublic = "CF", e3.Chad = "TD", e3.Chile = "CL", e3.China = "CN", e3.ChristmasIsland = "CX", e3.CocosKeelingIslands = "CC", e3.Colombia = "CO", e3.Comoros = "KM", e3.Congo = "CG", e3.CongoTheDemocraticRepublicOfThe = "CD", e3.CookIslands = "CK", e3.CostaRica = "CR", e3.CoteDIvoire = "CI", e3.Croatia = "HR", e3.Cuba = "CU", e3.Cyprus = "CY", e3.CzechRepublic = "CZ", e3.Denmark = "DK", e3.Djibouti = "DJ", e3.Dominica = "DM", e3.DominicanRepublic = "DO", e3.Ecuador = "EC", e3.Egypt = "EG", e3.ElSalvador = "SV", e3.EquatorialGuinea = "GQ", e3.Eritrea = "ER", e3.Estonia = "EE", e3.Ethiopia = "ET", e3.FalklandIslands = "FK", e3.FaroeIslands = "FO", e3.Fiji = "FJ", e3.Finland = "FI", e3.France = "FR", e3.FrenchGuiana = "GF", e3.FrenchPolynesia = "PF", e3.FrenchSouthernTerritories = "TF", e3.Gabon = "GA", e3.Gambia = "GM", e3.Georgia = "GE", e3.Germany = "DE", e3.Ghana = "GH", e3.Gibraltar = "GI", e3.Greece = "GR", e3.Greenland = "GL", e3.Grenada = "GD", e3.Guadeloupe = "GP", e3.Guam = "GU", e3.Guatemala = "GT", e3.Guernsey = "GG", e3.Guinea = "GN", e3.GuineaBissau = "GW", e3.Guyana = "GY", e3.Haiti = "HT", e3.HeardIslandMcdonaldIslands = "HM", e3.HolySeeVaticanCityState = "VA", e3.Honduras = "HN", e3.HongKong = "HK", e3.Hungary = "HU", e3.Iceland = "IS", e3.India = "IN", e3.Indonesia = "ID", e3.Iran = "IR", e3.Iraq = "IQ", e3.Ireland = "IE", e3.IsleOfMan = "IM", e3.Israel = "IL", e3.Italy = "IT", e3.Jamaica = "JM", e3.Japan = "JP", e3.Jersey = "JE", e3.Jordan = "JO", e3.Kazakhstan = "KZ", e3.Kenya = "KE", e3.Kiribati = "KI", e3.Kuwait = "KW", e3.Kyrgyzstan = "KG", e3.Laos = "LA", e3.Latvia = "LV", e3.Lebanon = "LB", e3.Lesotho = "LS", e3.Liberia = "LR", e3.Libya = "LY", e3.Liechtenstein = "LI", e3.Lithuania = "LT", e3.Luxembourg = "LU", e3.Macau = "MO", e3.Madagascar = "MG", e3.Malawi = "MW", e3.Malaysia = "MY", e3.Maldives = "MV", e3.Mali = "ML", e3.Malta = "MT", e3.MarshallIslands = "MH", e3.Martinique = "MQ", e3.Mauritania = "MR", e3.Mauritius = "MU", e3.Mayotte = "YT", e3.Mexico = "MX", e3.MicronesiaFederatedStatesOf = "FM", e3.Moldova = "MD", e3.Monaco = "MC", e3.Mongolia = "MN", e3.Montenegro = "ME", e3.Montserrat = "MS", e3.Morocco = "MA", e3.Mozambique = "MZ", e3.Myanmar = "MM", e3.Namibia = "NA", e3.Nauru = "NR", e3.Nepal = "NP", e3.Netherlands = "NL", e3.NetherlandsAntilles = "AN", e3.NewCaledonia = "NC", e3.NewZealand = "NZ", e3.NorthKorea = "KP", e3.Nicaragua = "NI", e3.Niger = "NE", e3.Nigeria = "NG", e3.Niue = "NU", e3.NorfolkIsland = "NF", e3.NorthMacedonia = "MK", e3.NorthernMarianaIslands = "MP", e3.Norway = "NO", e3.Oman = "OM", e3.Pakistan = "PK", e3.Palau = "PW", e3.PalestinianTerritoryOccupied = "PS", e3.Panama = "PA", e3.PapuaNewGuinea = "PG", e3.Paraguay = "PY", e3.Peru = "PE", e3.Philippines = "PH", e3.Pitcairn = "PN", e3.Poland = "PL", e3.Portugal = "PT", e3.PuertoRico = "PR", e3.Qatar = "QA", e3.Reunion = "RE", e3.Romania = "RO", e3.RussianFederation = "RU", e3.Rwanda = "RW", e3.SaintBarthelemy = "BL", e3.SaintHelena = "SH", e3.SaintKittsAndNevis = "KN", e3.SaintLucia = "LC", e3.SaintMartin = "MF", e3.SaintPierreAndMiquelon = "PM", e3.SaintVincentAndTheGrenadines = "VC", e3.Samoa = "WS", e3.SanMarino = "SM", e3.SaoTomeAndPrincipe = "ST", e3.SaudiArabia = "SA", e3.Senegal = "SN", e3.Serbia = "RS", e3.SerbiaAndMontenegro = "CS", e3.Seychelles = "SC", e3.SierraLeone = "SL", e3.Singapore = "SG", e3.Slovakia = "SK", e3.Slovenia = "SI", e3.SolomonIslands = "SB", e3.Somalia = "SO", e3.SouthAfrica = "ZA", e3.SouthGeorgiaAndTheSouthSandwichIslands = "GS", e3.SouthKorea = "KR", e3.Spain = "ES", e3.SriLanka = "LK", e3.Sudan = "SD", e3.Suriname = "SR", e3.SvalbardAndJanMayen = "SJ", e3.Swaziland = "SZ", e3.Sweden = "SE", e3.Switzerland = "CH", e3.Syria = "SY", e3.Taiwan = "TW", e3.Tajikistan = "TJ", e3.Tanzania = "TZ", e3.Thailand = "TH", e3.TimorLeste = "TL", e3.Togo = "TG", e3.Tokelau = "TK", e3.Tonga = "TO", e3.TrinidadAndTobago = "TT", e3.Tunisia = "TN", e3.Turkey = "TR", e3.Turkmenistan = "TM", e3.TurksAndCaicosIslands = "TC", e3.Tuvalu = "TV", e3.Uganda = "UG", e3.Ukraine = "UA", e3.UnitedArabEmirates = "AE", e3.UnitedKingdom = "GB", e3.UnitedStates = "US", e3.UnitedStatesMinorOutlyingIslands = "UM", e3.Uruguay = "UY", e3.Uzbekistan = "UZ", e3.Vanuatu = "VU", e3.Venezuela = "VE", e3.Vietnam = "VN", e3.VirginIslandsBritish = "VG", e3.VirginIslandsUS = "VI", e3.WallisAndFutuna = "WF", e3.WesternSahara = "EH", e3.Yemen = "YE", e3.Zambia = "ZM", e3.Zimbabwe = "ZW", e3))($i || {});
var Xi = ((e3) => (e3.AfghanistanAfghani = "AFN", e3.AlbaniaLek = "ALL", e3.ArmeniaDram = "AMD", e3.AlgeriaDinar = "DZD", e3.AmericanSamoaTala = "WST", e3.AngolaKwanza = "AOA", e3.ArgentinaPeso = "ARS", e3.AustraliaDollar = "AUD", e3.ArubaFlorin = "AWG", e3.AzerbaijanNewManat = "AZN", e3.BosniaAndHerzegovinaConvertibleMark = "BAM", e3.BahrainDinar = "BHD", e3.BarbadosDollar = "BBD", e3.BangladeshTaka = "BDT", e3.BelgiumFranc = "BGN", e3.BermudaDollar = "BMD", e3.BruneiDollar = "BND", e3.BoliviaBoliviano = "BOB", e3.BrazilReal = "BRL", e3.BahamasDollar = "BSD", e3.BhutanNgultrum = "BTN", e3.BotswanaPula = "BWP", e3.BelarusRuble = "BYN", e3.BelizeDollar = "BZD", e3.BulgariaLev = "BGN", e3.BurundiFranc = "BIF", e3.BritishPound = "GBP", e3.CanadaDollar = "CAD", e3.CambodiaRiel = "KHR", e3.ComorosFranc = "KMF", e3.CaymanIslandsDollar = "KYD", e3.ChilePeso = "CLP", e3.ChinaYuan = "CNY", e3.ColombiaPeso = "COP", e3.CostaRicaColon = "CRC", e3.CroatiaKuna = "HRK", e3.CubaConvertiblePeso = "CUC", e3.CubaPeso = "CUP", e3.CapeVerdeEscudo = "CVE", e3.CyprusPound = "CYP", e3.CzechRepublicKoruna = "CZK", e3.DjiboutiFranc = "DJF", e3.DenmarkKrone = "DKK", e3.DominicaDollar = "XCD", e3.DominicanRepublicPeso = "DOP", e3.EastCaribbeanDollar = "XCD", e3.EgyptPound = "EGP", e3.ElSalvadorColon = "SVC", e3.EquatorialGuineaEkwele = "GQE", e3.EritreaNakfa = "ERN", e3.EstoniaKroon = "EEK", e3.EthiopiaBirr = "ETB", e3.Euro = "EUR", e3.FijiDollar = "FJD", e3.FalklandIslandsPound = "FKP", e3.GambiaDalasi = "GMD", e3.GabonFranc = "GMD", e3.GeorgiaLari = "GEL", e3.GhanaCedi = "GHS", e3.GibraltarPound = "GIP", e3.GuatemalaQuetzal = "GTQ", e3.GuernseyPound = "GGP", e3.GuineaBissauPeso = "GWP", e3.GuyanaDollar = "GYD", e3.HongKongDollar = "HKD", e3.HondurasLempira = "HNL", e3.HaitiGourde = "HTG", e3.HungaryForint = "HUF", e3.IndonesiaRupiah = "IDR", e3.IsleOfManPound = "IMP", e3.IsraelNewShekel = "ILS", e3.IndiaRupee = "INR", e3.IraqDinar = "IQD", e3.IranRial = "IRR", e3.IcelandKrona = "ISK", e3.JamaicaDollar = "JMD", e3.JapanYen = "JPY", e3.JerseyPound = "JEP", e3.JordanDinar = "JOD", e3.KazakhstanTenge = "KZT", e3.KenyaShilling = "KES", e3.KyrgyzstanSom = "KGS", e3.NorthKoreaWon = "KPW", e3.SouthKoreaWon = "KRW", e3.KuwaitDinar = "KWD", e3.LaosKip = "LAK", e3.LebanonPound = "LBP", e3.LiberiaDollar = "LRD", e3.LesothoLoti = "LSL", e3.LibyanDinar = "LYD", e3.LithuaniaLitas = "LTL", e3.LatviaLats = "LVL", e3.LibyaDinar = "LYD", e3.MacauPataca = "MOP", e3.MaldivesRufiyaa = "MVR", e3.MalawiKwacha = "MWK", e3.MaltaLira = "MTL", e3.MauritiusRupee = "MUR", e3.MongoliaTughrik = "MNT", e3.MoroccoDirham = "MAD", e3.MoldovaLeu = "MDL", e3.MozambiqueMetical = "MZN", e3.MadagascarAriary = "MGA", e3.MacedoniaDenar = "MKD", e3.MexicoPeso = "MXN", e3.MalaysiaRinggit = "MYR", e3.MyanmarKyat = "MMK", e3.MicronesiaFederatedStatesDollar = "USD", e3.NicaraguaCordoba = "NIO", e3.NamibiaDollar = "NAD", e3.NetherlandsAntillesGuilder = "ANG", e3.NewCaledoniaFranc = "XPF", e3.NigeriaNaira = "NGN", e3.NicaraguaCordobaOro = "NIO", e3.NigerCFAFranc = "XOF", e3.NorwayKrone = "NOK", e3.NepalRupee = "NPR", e3.NewZealandDollar = "NZD", e3.OmanRial = "OMR", e3.PanamaBalboa = "PAB", e3.PeruNuevoSol = "PEN", e3.PapuaNewGuineaKina = "PGK", e3.PhilippinesPeso = "PHP", e3.PakistanRupee = "PKR", e3.PeruNuevo = "PEN", e3.PolandZloty = "PLN", e3.ParaguayGuarani = "PYG", e3.QatarRial = "QAR", e3.RomaniaNewLeu = "RON", e3.SerbiaDinar = "RSD", e3.SriLankaRupee = "LKR", e3.RussiaRuble = "RUB", e3.RwandaFranc = "RWF", e3.SaudiArabiaRiyal = "SAR", e3.SlovakiaKoruna = "SKK", e3.SloveniaTolar = "SIT", e3.SolomonIslandsDollar = "SBD", e3.SeychellesRupee = "SCR", e3.SudanPound = "SDG", e3.SwedenKrona = "SEK", e3.SingaporeDollar = "SGD", e3.SaintHelenaPound = "SHP", e3.SierraLeoneLeone = "SLL", e3.SomaliaShilling = "SOS", e3.SurinameDollar = "SRD", e3.SintMaartenPound = "SXD", e3.SyriaPound = "SYP", e3.SwazilandLilangeni = "SZL", e3.SwitzerlandFranc = "CHF", e3.ThailandBaht = "THB", e3.TajikistanSomoni = "TJS", e3.TurkmenistanManat = "TMT", e3.TunisiaDinar = "TND", e3.TongaPaanga = "TOP", e3.TurkeyLira = "TRY", e3.TrinidadAndTobagoDollar = "TTD", e3.TaiwanNewDollar = "TWD", e3.TanzaniaShilling = "TZS", e3.UnitedArabEmiratesDirham = "AED", e3.UkraineHryvnia = "UAH", e3.UgandaShilling = "UGX", e3.UnitedKingdomPound = "GBP", e3.UnitedStatesDollar = "USD", e3.UruguayPeso = "UYU", e3.UzbekistanSom = "UZS", e3.VenezuelaBolivar = "VEF", e3.VietnamDong = "VND", e3.VanuatuVatu = "VUV", e3.SamoaTala = "WST", e3.YemenRial = "YER", e3.SouthAfricaRand = "ZAR", e3.ZambiaKwacha = "ZMW", e3.ZimbabweDollar = "ZWL", e3))(Xi || {});
var en = ((e3) => (e3.Bitcoin = "BTC", e3.Ethereum = "ETH", e3.Litecoin = "LTC", e3.Ripple = "XRP", e3.Dash = "DASH", e3.Zcash = "ZEC", e3.Dogecoin = "DOGE", e3.Monero = "XMR", e3.BitcoinCash = "BCH", e3.EOS = "EOS", e3.Binance = "BNB", e3.Stellar = "XLM", e3.Cardano = "ADA", e3.IOTA = "IOTA", e3.Tezos = "XTZ", e3.NEO = "NEO", e3.TRON = "TRX", e3.EOSClassic = "EOSC", e3.Ontology = "ONT", e3.VeChain = "VEN", e3.QTUM = "QTUM", e3.Lisk = "LSK", e3.Waves = "WAVES", e3.OmiseGO = "OMG", e3.Zilliqa = "ZIL", e3.BitcoinGold = "BTG", e3.Decred = "DCR", e3.Stratis = "STRAT", e3.Populous = "PPT", e3.Augur = "REP", e3.Golem = "GNT", e3.Siacoin = "SC", e3.BasicAttentionToken = "BAT", e3.ZCoin = "XZC", e3.StratisHedged = "SNT", e3.VeChainHedged = "VEN", e3.PowerLedger = "POWR", e3.WavesHedged = "WAVE", e3.ZilliqaHedged = "ZRX", e3.BitcoinDiamond = "BCD", e3.DigiByte = "DGB", e3.DigiByteHedged = "DGB", e3.Bytecoin = "BCN", e3.BytecoinHedged = "BCN", e3))(en || {});
var an = ((e3) => (e3.Afrikaans = "af", e3.Albanian = "sq", e3.Amharic = "am", e3.Arabic = "ar", e3.Armenian = "hy", e3.Azerbaijani = "az", e3.Bashkir = "ba", e3.Basque = "eu", e3.Belarusian = "be", e3.Bengali = "bn", e3.Berber = "ber", e3.Bhutani = "dz", e3.Bihari = "bh", e3.Bislama = "bi", e3.Bosnian = "bs", e3.Breten = "br", e3.Bulgarian = "bg", e3.Burmese = "my", e3.Cantonese = "yue", e3.Catalan = "ca", e3.Chinese = "zh", e3.Chuvash = "cv", e3.Corsican = "co", e3.Croatian = "hr", e3.Czech = "cs", e3.Danish = "da", e3.Dari = "prs", e3.Divehi = "dv", e3.Dutch = "nl", e3.English = "en", e3.Esperanto = "eo", e3.Estonian = "et", e3.Faroese = "fo", e3.Farsi = "fa", e3.Filipino = "fil", e3.Finnish = "fi", e3.French = "fr", e3.Frisian = "fy", e3.Galician = "gl", e3.Georgian = "ka", e3.German = "de", e3.Greek = "el", e3.Greenlandic = "kl", e3.Gujarati = "gu", e3.Haitian = "ht", e3.Hausa = "ha", e3.Hebrew = "he", e3.Hindi = "hi", e3.Hungarian = "hu", e3.Icelandic = "is", e3.Igbo = "ig", e3.Indonesian = "id", e3.Irish = "ga", e3.Italian = "it", e3.Japanese = "ja", e3.Javanese = "jv", e3.Kannada = "kn", e3.Karelian = "krl", e3.Kazakh = "kk", e3.Khmer = "km", e3.Komi = "kv", e3.Konkani = "kok", e3.Korean = "ko", e3.Kurdish = "ku", e3.Kyrgyz = "ky", e3.Lao = "lo", e3.Latin = "la", e3.Latvian = "lv", e3.Lithuanian = "lt", e3.Luxembourgish = "lb", e3.Ossetian = "os", e3.Macedonian = "mk", e3.Malagasy = "mg", e3.Malay = "ms", e3.Malayalam = "ml", e3.Maltese = "mt", e3.Maori = "mi", e3.Marathi = "mr", e3.Mari = "mhr", e3.Mongolian = "mn", e3.Montenegrin = "me", e3.Nepali = "ne", e3.NorthernSotho = "nso", e3.Norwegian = "no", e3.NorwegianBokmal = "nb", e3.NorwegianNynorsk = "nn", e3.Oriya = "or", e3.Pashto = "ps", e3.Persian = "fa", e3.Polish = "pl", e3.Portuguese = "pt", e3.Punjabi = "pa", e3.Quechua = "qu", e3.Romanian = "ro", e3.Russian = "ru", e3.Sakha = "sah", e3.Sami = "se", e3.Samoan = "sm", e3.Sanskrit = "sa", e3.Scots = "gd", e3.Serbian = "sr", e3.SerbianCyrillic = "sr-Cyrl", e3.Sesotho = "st", e3.Shona = "sn", e3.Sindhi = "sd", e3.Sinhala = "si", e3.Slovak = "sk", e3.Slovenian = "sl", e3.Somali = "so", e3.Spanish = "es", e3.Sudanese = "su", e3.Sutu = "sx", e3.Swahili = "sw", e3.Swedish = "sv", e3.Syriac = "syr", e3.Tagalog = "tl", e3.Tajik = "tg", e3.Tamazight = "tmh", e3.Tamil = "ta", e3.Tatar = "tt", e3.Telugu = "te", e3.Thai = "th", e3.Tibetan = "bo", e3.Tsonga = "ts", e3.Tswana = "tn", e3.Turkish = "tr", e3.Turkmen = "tk", e3.Ukrainian = "uk", e3.Urdu = "ur", e3.Uzbek = "uz", e3.Vietnamese = "vi", e3.Welsh = "cy", e3.Xhosa = "xh", e3.Yiddish = "yi", e3.Yoruba = "yo", e3.Zulu = "zu", e3))(an || {});
var nn = ((e3) => (e3.Afrikaans = "af", e3.AfrikaansSouthAfrica = "af-ZA", e3.Albanian = "sq", e3.AlbanianAlbania = "sq-AL", e3.Amharic = "am", e3.AmharicEthiopia = "am-ET", e3.Arabic = "ar", e3.ArabicAlgeria = "ar-DZ", e3.ArabicBahrain = "ar-BH", e3.ArabicEgypt = "ar-EG", e3.ArabicIraq = "ar-IQ", e3.ArabicJordan = "ar-JO", e3.ArabicKuwait = "ar-KW", e3.ArabicLebanon = "ar-LB", e3.ArabicLibya = "ar-LY", e3.ArabicMorocco = "ar-MA", e3.ArabicOman = "ar-OM", e3.ArabicQatar = "ar-QA", e3.ArabicSaudiArabia = "ar-SA", e3.ArabicSyria = "ar-SY", e3.ArabicTunisia = "ar-TN", e3.ArabicUnitedArabEmirates = "ar-AE", e3.ArabicYemen = "ar-YE", e3.Armenian = "hy", e3.ArmenianArmenia = "hy-AM", e3.Azerbaijani = "az", e3.AzerbaijaniAzerbaijan = "az-AZ", e3.AzerbaijaniCyrillicAzerbaijan = "az-Cyrl-AZ", e3.Bashkir = "ba", e3.Basque = "eu", e3.BasqueSpain = "eu-ES", e3.Belarusian = "be", e3.BelarusianBelarus = "be-BY", e3.Bengali = "bn", e3.BengaliBangladesh = "bn-BD", e3.BengaliIndia = "bn-IN", e3.Berber = "ber", e3.Bhutani = "dz", e3.BhutaniBhutan = "dz-BT", e3.Bosnian = "bs", e3.BosnianBosniaAndHerzegovina = "bs-BA", e3.Breton = "br", e3.Bulgarian = "bg", e3.BulgarianBosniaAndHerzegovina = "bg-BG", e3.BulgarianBulgaria = "bg-BG", e3.Burmese = "my", e3.BurmeseMyanmar = "my-MM", e3.Cantonese = "yue", e3.CantoneseHongKong = "yue-HK", e3.Catalan = "ca", e3.CatalanSpain = "ca-ES", e3.Chechen = "ce", e3.Cherokee = "chr", e3.Chinese = "zh", e3.ChineseSimplified = "zh-Hans", e3.ChineseSimplifiedChina = "zh-Hans-CN", e3.ChineseSimplifiedHongKong = "zh-Hans-HK", e3.ChineseSimplifiedMacau = "zh-Hans-MO", e3.ChineseSimplifiedSingapore = "zh-Hans-SG", e3.ChineseTraditional = "zh-Hant", e3.ChineseTraditionalHongKong = "zh-Hant-HK", e3.ChineseTraditionalMacau = "zh-Hant-MO", e3.ChineseTraditionalSingapore = "zh-Hant-SG", e3.ChineseTraditionalTaiwan = "zh-Hant-TW", e3.Chuvash = "cv", e3.CorsicanFrance = "co-FR", e3.Croatian = "hr", e3.CroatianBosniaAndHerzegovina = "hr-BA", e3.CroatianCroatia = "hr-HR", e3.Czech = "cs", e3.CzechCzechRepublic = "cs-CZ", e3.Danish = "da", e3.DanishDenmark = "da-DK", e3.Dari = "prs", e3.DariAfghanistan = "prs-AF", e3.Divehi = "dv", e3.DivehiMaldives = "dv-MV", e3.Dutch = "nl", e3.DutchBelgium = "nl-BE", e3.DutchNetherlands = "nl-NL", e3.English = "en", e3.EnglishAustralia = "en-AU", e3.EnglishBelgium = "en-BE", e3.EnglishBelize = "en-BZ", e3.EnglishCanada = "en-CA", e3.EnglishCaribbean = "en-029", e3.EnglishIreland = "en-IE", e3.EnglishJamaica = "en-JM", e3.EnglishNewZealand = "en-NZ", e3.EnglishPhilippines = "en-PH", e3.EnglishSingapore = "en-SG", e3.EnglishSouthAfrica = "en-ZA", e3.EnglishTrinidadAndTobago = "en-TT", e3.EnglishUnitedKingdom = "en-GB", e3.EnglishUnitedStates = "en-US", e3.EnglishZimbabwe = "en-ZW", e3.Esperanto = "eo", e3.Estonian = "et", e3.EstonianEstonia = "et-EE", e3.Faroese = "fo", e3.FaroeseFaroeIslands = "fo-FO", e3.Farsi = "fa", e3.FarsiIran = "fa-IR", e3.Filipino = "fil", e3.FilipinoPhilippines = "fil-PH", e3.Finnish = "fi", e3.FinnishFinland = "fi-FI", e3.French = "fr", e3.FrenchBelgium = "fr-BE", e3.FrenchCanada = "fr-CA", e3.FrenchFrance = "fr-FR", e3.FrenchLuxembourg = "fr-LU", e3.FrenchMonaco = "fr-MC", e3.FrenchReunion = "fr-RE", e3.FrenchSwitzerland = "fr-CH", e3.Frisian = "fy", e3.FrisianNetherlands = "fy-NL", e3.Galician = "gl", e3.GalicianSpain = "gl-ES", e3.Georgian = "ka", e3.GeorgianGeorgia = "ka-GE", e3.German = "de", e3.GermanAustria = "de-AT", e3.GermanBelgium = "de-BE", e3.GermanGermany = "de-DE", e3.GermanLiechtenstein = "de-LI", e3.GermanLuxembourg = "de-LU", e3.GermanSwitzerland = "de-CH", e3.Greenlandic = "kl", e3.GreenlandicGreenland = "kl-GL", e3.Greek = "el", e3.GreekGreece = "el-GR", e3.Gujarati = "gu", e3.GujaratiIndia = "gu-IN", e3.Haitian = "ht", e3.Hausa = "ha", e3.HausaGhana = "ha-GH", e3.HausaNiger = "ha-NE", e3.HausaNigeria = "ha-NG", e3.Hebrew = "he", e3.HebrewIsrael = "he-IL", e3.Hindi = "hi", e3.HindiIndia = "hi-IN", e3.Hungarian = "hu", e3.HungarianHungary = "hu-HU", e3.Icelandic = "is", e3.IcelandicIceland = "is-IS", e3.Igbo = "ig", e3.IgboNigeria = "ig-NG", e3.Indonesian = "id", e3.IndonesianIndonesia = "id-ID", e3.Irish = "ga", e3.IrishIreland = "ga-IE", e3.Italian = "it", e3.ItalianItaly = "it-IT", e3.ItalianSwitzerland = "it-CH", e3.Japanese = "ja", e3.JapaneseJapan = "ja-JP", e3.Javanese = "jv", e3.Kannada = "kn", e3.KannadaIndia = "kn-IN", e3.Karelian = "krl", e3.Kazakh = "kk", e3.KazakhKazakhstan = "kk-KZ", e3.Khmer = "km", e3.KhmerCambodia = "km-KH", e3.KinyarwandaRwanda = "rw-RW", e3.Komi = "kv", e3.Konkani = "kok", e3.KonkaniIndia = "kok-IN", e3.Korean = "ko", e3.KoreanSouthKorea = "ko-KR", e3.Kurdish = "ku", e3.KurdishIraq = "ku-IQ", e3.KurdishTurkey = "ku-TR", e3.Kyrgyz = "ky", e3.KyrgyzKyrgyzstan = "ky-KG", e3.Lao = "lo", e3.LaoLaos = "lo-LA", e3.Latin = "la", e3.Latvian = "lv", e3.LatvianLatvia = "lv-LV", e3.Lithuanian = "lt", e3.LithuanianLithuania = "lt-LT", e3.Luxembourgish = "lb", e3.LuxembourgishBelgium = "lb-LU", e3.LuxembourgishLuxembourg = "lb-LU", e3.Macedonian = "mk", e3.MacedonianNorthMacedonia = "mk-MK", e3.Malagasy = "mg", e3.Malay = "ms", e3.MalayBrunei = "ms-BN", e3.MalayIndia = "ms-IN", e3.MalayMalaysia = "ms-MY", e3.MalaySingapore = "ms-SG", e3.Malayalam = "ml", e3.MalayalamIndia = "ml-IN", e3.Maltese = "mt", e3.MalteseMalta = "mt-MT", e3.Maori = "mi", e3.MaoriNewZealand = "mi-NZ", e3.Marathi = "mr", e3.MarathiIndia = "mr-IN", e3.Mari = "chm", e3.Mongolian = "mn", e3.MongolianMongolia = "mn-MN", e3.Montenegrin = "me", e3.MontenegrinMontenegro = "me-ME", e3.Nepali = "ne", e3.NepaliNepal = "ne-NP", e3.NorthernSotho = "ns", e3.NorthernSothoSouthAfrica = "ns-ZA", e3.Norwegian = "nb", e3.NorwegianBokmalNorway = "nb-NO", e3.NorwegianNynorskNorway = "nn-NO", e3.Oriya = "or", e3.OriyaIndia = "or-IN", e3.Ossetian = "os", e3.Pashto = "ps", e3.PashtoAfghanistan = "ps-AF", e3.Persian = "fa", e3.PersianIran = "fa-IR", e3.Polish = "pl", e3.PolishPoland = "pl-PL", e3.Portuguese = "pt", e3.PortugueseBrazil = "pt-BR", e3.PortuguesePortugal = "pt-PT", e3.Punjabi = "pa", e3.PunjabiIndia = "pa-IN", e3.PunjabiPakistan = "pa-PK", e3.Quechua = "qu", e3.QuechuaBolivia = "qu-BO", e3.QuechuaEcuador = "qu-EC", e3.QuechuaPeru = "qu-PE", e3.Romanian = "ro", e3.RomanianRomania = "ro-RO", e3.Russian = "ru", e3.RussianKazakhstan = "ru-KZ", e3.RussianKyrgyzstan = "ru-KG", e3.RussianRussia = "ru-RU", e3.RussianUkraine = "ru-UA", e3.Sakha = "sah", e3.Sanskrit = "sa", e3.SanskritIndia = "sa-IN", e3.Sami = "se", e3.SamiNorway = "se-NO", e3.SamiSweden = "se-SE", e3.SamiFinland = "se-FI", e3.Samoan = "sm", e3.SamoanSamoa = "sm-WS", e3.Scots = "gd", e3.Serbian = "sr", e3.SerbianBosniaAndHerzegovina = "sr-BA", e3.SerbianSerbiaAndMontenegro = "sr-SP", e3.SerbianCyrillic = "sr-SP-Cyrl", e3.SerbianCyrillicBosniaAndHerzegovina = "sr-Cyrl-BA", e3.SerbianCyrillicSerbiaAndMontenegro = "sr-Cyrl-SP", e3.Sesotho = "st", e3.SesothoSouthAfrica = "st-ZA", e3.Shona = "sn", e3.ShonaZimbabwe = "sn-ZW", e3.Sindhi = "sd", e3.SindhiPakistan = "sd-PK", e3.Sinhala = "si", e3.SinhalaSriLanka = "si-LK", e3.Slovak = "sk", e3.SlovakSlovakia = "sk-SK", e3.Slovenian = "sl", e3.SlovenianSlovenia = "sl-SI", e3.Somali = "so", e3.SomaliSomalia = "so-SO", e3.Spanish = "es", e3.SpanishArgentina = "es-AR", e3.SpanishBolivia = "es-BO", e3.SpanishChile = "es-CL", e3.SpanishColombia = "es-CO", e3.SpanishCostaRica = "es-CR", e3.SpanishCuba = "es-CU", e3.SpanishDominicanRepublic = "es-DO", e3.SpanishEcuador = "es-EC", e3.SpanishEquatorialGuinea = "es-GQ", e3.SpanishElSalvador = "es-SV", e3.SpanishGuatemala = "es-GT", e3.SpanishHonduras = "es-HN", e3.SpanishMexico = "es-MX", e3.SpanishNicaragua = "es-NI", e3.SpanishPanama = "es-PA", e3.SpanishParaguay = "es-PY", e3.SpanishPeru = "es-PE", e3.SpanishPuertoRico = "es-PR", e3.SpanishSpain = "es-ES", e3.SpanishUnitedStates = "es-US", e3.SpanishUruguay = "es-UY", e3.SpanishVenezuela = "es-VE", e3.Sudanese = "su", e3.Sutu = "st", e3.SutuSouthAfrica = "st-ZA", e3.Swahili = "sw", e3.SwahiliKenya = "sw-KE", e3.Swedish = "sv", e3.SwedishFinland = "sv-FI", e3.SwedishSweden = "sv-SE", e3.Syriac = "syr", e3.SyriacSyria = "syr-SY", e3.Tajik = "tg", e3.TajikTajikistan = "tg-TJ", e3.Tagalog = "tl", e3.TagalogPhilippines = "tl-PH", e3.Tamazight = "tmh", e3.Tamil = "ta", e3.TamilIndia = "ta-IN", e3.Tatar = "tt", e3.Telugu = "te", e3.TeluguIndia = "te-IN", e3.Thai = "th", e3.ThaiThailand = "th-TH", e3.Tibetan = "bo", e3.TibetanBhutan = "bo-BT", e3.TibetanChina = "bo-CN", e3.TibetanIndia = "bo-IN", e3.Tsonga = "ts", e3.Tswana = "tn", e3.TswanaSouthAfrica = "tn-ZA", e3.Turkish = "tr", e3.TurkishTurkey = "tr-TR", e3.Turkmen = "tk", e3.Ukrainian = "uk", e3.UkrainianUkraine = "uk-UA", e3.Urdu = "ur", e3.UrduAfghanistan = "ur-AF", e3.UrduIndia = "ur-IN", e3.UrduPakistan = "ur-PK", e3.Uzbek = "uz", e3.UzbekCyrillic = "uz-Cyrl-UZ", e3.UzbekLatin = "uz-Latn-UZ", e3.UzbekUzbekistan = "uz-UZ", e3.Vietnamese = "vi", e3.VietnameseVietnam = "vi-VN", e3.Welsh = "cy", e3.WelshUnitedKingdom = "cy-GB", e3.Xhosa = "xh", e3.XhosaSouthAfrica = "xh-ZA", e3.Yiddish = "yi", e3.Yoruba = "yo", e3.YorubaNigeria = "yo-NG", e3.ZhuyinMandarinChina = "yue-Hant-CN", e3.Zulu = "zu", e3.ZuluSouthAfrica = "zu-ZA", e3))(nn || {});
var sn = ((e3) => (e3.AfricaAbidjan = "Africa/Abidjan", e3.AfricaAccra = "Africa/Accra", e3.AfricaAddisAbaba = "Africa/Addis_Ababa", e3.AfricaAlgiers = "Africa/Algiers", e3.AfricaAsmara = "Africa/Asmara", e3.AfricaBamako = "Africa/Bamako", e3.AfricaBangui = "Africa/Bangui", e3.AfricaBanjul = "Africa/Banjul", e3.AfricaBissau = "Africa/Bissau", e3.AfricaBlantyre = "Africa/Blantyre", e3.AfricaBrazzaville = "Africa/Brazzaville", e3.AfricaBujumbura = "Africa/Bujumbura", e3.AfricaCairo = "Africa/Cairo", e3.AfricaCasablanca = "Africa/Casablanca", e3.AfricaCeuta = "Africa/Ceuta", e3.AfricaConakry = "Africa/Conakry", e3.AfricaDakar = "Africa/Dakar", e3.AfricaDarEsSalaam = "Africa/Dar_es_Salaam", e3.AfricaDjibouti = "Africa/Djibouti", e3.AfricaDouala = "Africa/Douala", e3.AfricaElAaiun = "Africa/El_Aaiun", e3.AfricaFreetown = "Africa/Freetown", e3.AfricaGaborone = "Africa/Gaborone", e3.AfricaHarare = "Africa/Harare", e3.AfricaJohannesburg = "Africa/Johannesburg", e3.AfricaJuba = "Africa/Juba", e3.AfricaKampala = "Africa/Kampala", e3.AfricaKhartoum = "Africa/Khartoum", e3.AfricaKigali = "Africa/Kigali", e3.AfricaKinshasa = "Africa/Kinshasa", e3.AfricaLagos = "Africa/Lagos", e3.AfricaLibreville = "Africa/Libreville", e3.AfricaLome = "Africa/Lome", e3.AfricaLuanda = "Africa/Luanda", e3.AfricaLubumbashi = "Africa/Lubumbashi", e3.AfricaLusaka = "Africa/Lusaka", e3.AfricaMalabo = "Africa/Malabo", e3.AfricaMaputo = "Africa/Maputo", e3.AfricaMaseru = "Africa/Maseru", e3.AfricaMbabane = "Africa/Mbabane", e3.AfricaMogadishu = "Africa/Mogadishu", e3.AfricaMonrovia = "Africa/Monrovia", e3.AfricaNairobi = "Africa/Nairobi", e3.AfricaNdjamena = "Africa/Ndjamena", e3.AfricaNiamey = "Africa/Niamey", e3.AfricaNouakchott = "Africa/Nouakchott", e3.AfricaOuagadougou = "Africa/Ouagadougou", e3.AfricaPortoNovo = "Africa/Porto-Novo", e3.AfricaSaoTome = "Africa/Sao_Tome", e3.AfricaTripoli = "Africa/Tripoli", e3.AfricaTunis = "Africa/Tunis", e3.AfricaWindhoek = "Africa/Windhoek", e3.AmericaAdak = "America/Adak", e3.AmericaAnchorage = "America/Anchorage", e3.AmericaAnguilla = "America/Anguilla", e3.AmericaAntigua = "America/Antigua", e3.AmericaAraguaina = "America/Araguaina", e3.AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires", e3.AmericaArgentinaCatamarca = "America/Argentina/Catamarca", e3.AmericaArgentinaCordoba = "America/Argentina/Cordoba", e3.AmericaArgentinaJujuy = "America/Argentina/Jujuy", e3.AmericaArgentinaLaRioja = "America/Argentina/La_Rioja", e3.AmericaArgentinaMendoza = "America/Argentina/Mendoza", e3.AmericaArgentinaRioGallegos = "America/Argentina/Rio_Gallegos", e3.AmericaArgentinaSalta = "America/Argentina/Salta", e3.AmericaArgentinaSanJuan = "America/Argentina/San_Juan", e3.AmericaArgentinaSanLuis = "America/Argentina/San_Luis", e3.AmericaArgentinaTucuman = "America/Argentina/Tucuman", e3.AmericaArgentinaUshuaia = "America/Argentina/Ushuaia", e3.AmericaAruba = "America/Aruba", e3.AmericaAsuncion = "America/Asuncion", e3.AmericaAtikokan = "America/Atikokan", e3.AmericaAtka = "America/Atka", e3.AmericaBahia = "America/Bahia", e3.AmericaBahiaBanderas = "America/Bahia_Banderas", e3.AmericaBarbados = "America/Barbados", e3.AmericaBelem = "America/Belem", e3.AmericaBelize = "America/Belize", e3.AmericaBlancSablon = "America/Blanc-Sablon", e3.AmericaBoaVista = "America/Boa_Vista", e3.AmericaBogota = "America/Bogota", e3.AmericaBoise = "America/Boise", e3.AmericaCambridgeBay = "America/Cambridge_Bay", e3.AmericaCampoGrande = "America/Campo_Grande", e3.AmericaCancun = "America/Cancun", e3.AmericaCaracas = "America/Caracas", e3.AmericaCayenne = "America/Cayenne", e3.AmericaCayman = "America/Cayman", e3.AmericaChicago = "America/Chicago", e3.AmericaChihuahua = "America/Chihuahua", e3.AmericaCoralHarbour = "America/Coral_Harbour", e3.AmericaCordoba = "America/Cordoba", e3.AmericaCostaRica = "America/Costa_Rica", e3.AmericaCreston = "America/Creston", e3.AmericaCuiaba = "America/Cuiaba", e3.AmericaCuracao = "America/Curacao", e3.AmericaDanmarkshavn = "America/Danmarkshavn", e3.AmericaDawson = "America/Dawson", e3.AmericaDawsonCreek = "America/Dawson_Creek", e3.AmericaDenver = "America/Denver", e3.AmericaDetroit = "America/Detroit", e3.AmericaDominica = "America/Dominica", e3.AmericaEdmonton = "America/Edmonton", e3.AmericaEirunepe = "America/Eirunepe", e3.AmericaElSalvador = "America/El_Salvador", e3.AmericaFortaleza = "America/Fortaleza", e3.AmericaGlaceBay = "America/Glace_Bay", e3.AmericaGodthab = "America/Godthab", e3.AmericaGooseBay = "America/Goose_Bay", e3.AmericaGrandTurk = "America/Grand_Turk", e3.AmericaGrenada = "America/Grenada", e3.AmericaGuadeloupe = "America/Guadeloupe", e3.AmericaGuatemala = "America/Guatemala", e3.AmericaGuayaquil = "America/Guayaquil", e3.AmericaGuyana = "America/Guyana", e3.AmericaHalifax = "America/Halifax", e3.AmericaHavana = "America/Havana", e3.AmericaHermosillo = "America/Hermosillo", e3.AmericaIndianaIndianapolis = "America/Indiana/Indianapolis", e3.AmericaIndianaKnox = "America/Indiana/Knox", e3.AmericaIndianaMarengo = "America/Indiana/Marengo", e3.AmericaIndianaPetersburg = "America/Indiana/Petersburg", e3.AmericaIndianaTellCity = "America/Indiana/Tell_City", e3.AmericaIndianaVevay = "America/Indiana/Vevay", e3.AmericaIndianaVincennes = "America/Indiana/Vincennes", e3.AmericaIndianaWinamac = "America/Indiana/Winamac", e3.AmericaInuvik = "America/Inuvik", e3.AmericaIqaluit = "America/Iqaluit", e3.AmericaJamaica = "America/Jamaica", e3.AmericaJuneau = "America/Juneau", e3.AmericaKentuckyLouisville = "America/Kentucky/Louisville", e3.AmericaKentuckyMonticello = "America/Kentucky/Monticello", e3.AmericaKralendijk = "America/Kralendijk", e3.AmericaLaPaz = "America/La_Paz", e3.AmericaLima = "America/Lima", e3.AmericaLosAngeles = "America/Los_Angeles", e3.AmericaLouisville = "America/Louisville", e3.AmericaLowerPrinces = "America/Lower_Princes", e3.AmericaMaceio = "America/Maceio", e3.AmericaManagua = "America/Managua", e3.AmericaManaus = "America/Manaus", e3.AmericaMarigot = "America/Marigot", e3.AmericaMartinique = "America/Martinique", e3.AmericaMatamoros = "America/Matamoros", e3.AmericaMazatlan = "America/Mazatlan", e3.AmericaMenominee = "America/Menominee", e3.AmericaMerida = "America/Merida", e3.AmericaMetlakatla = "America/Metlakatla", e3.AmericaMexicoCity = "America/Mexico_City", e3.AmericaMiquelon = "America/Miquelon", e3.AmericaMoncton = "America/Moncton", e3.AmericaMonterrey = "America/Monterrey", e3.AmericaMontevideo = "America/Montevideo", e3.AmericaMontserrat = "America/Montserrat", e3.AmericaMontreal = "America/Montreal", e3.AmericaNassau = "America/Nassau", e3.AmericaNewYork = "America/New_York", e3.AmericaNipigon = "America/Nipigon", e3.AmericaNome = "America/Nome", e3.AmericaNoronha = "America/Noronha", e3.AmericaNorthDakotaBeulah = "America/North_Dakota/Beulah", e3.AmericaNorthDakotaCenter = "America/North_Dakota/Center", e3.AmericaNorthDakotaNewSalem = "America/North_Dakota/New_Salem", e3.AmericaOjinaga = "America/Ojinaga", e3.AmericaPanama = "America/Panama", e3.AmericaPangnirtung = "America/Pangnirtung", e3.AmericaParamaribo = "America/Paramaribo", e3.AmericaPhoenix = "America/Phoenix", e3.AmericaPortAuPrince = "America/Port-au-Prince", e3.AmericaPortOfSpain = "America/Port_of_Spain", e3.AmericaPortoVelho = "America/Porto_Velho", e3.AmericaPuertoRico = "America/Puerto_Rico", e3.AmericaRainyRiver = "America/Rainy_River", e3.AmericaRankinInlet = "America/Rankin_Inlet", e3.AmericaRecife = "America/Recife", e3.AmericaRegina = "America/Regina", e3.AmericaResolute = "America/Resolute", e3.AmericaRioBranco = "America/Rio_Branco", e3.AmericaSantaIsabel = "America/Santa_Isabel", e3.AmericaSantarem = "America/Santarem", e3.AmericaSantiago = "America/Santiago", e3.AmericaSantoDomingo = "America/Santo_Domingo", e3.AmericaSaoPaulo = "America/Sao_Paulo", e3.AmericaScoresbysund = "America/Scoresbysund", e3.AmericaShiprock = "America/Shiprock", e3.AmericaSitka = "America/Sitka", e3.AmericaStBarthelemy = "America/St_Barthelemy", e3.AmericaStJohns = "America/St_Johns", e3.AmericaStKitts = "America/St_Kitts", e3.AmericaStLucia = "America/St_Lucia", e3.AmericaStThomas = "America/St_Thomas", e3.AmericaStVincent = "America/St_Vincent", e3.AmericaSwiftCurrent = "America/Swift_Current", e3.AmericaTegucigalpa = "America/Tegucigalpa", e3.AmericaThule = "America/Thule", e3.AmericaThunderBay = "America/Thunder_Bay", e3.AmericaTijuana = "America/Tijuana", e3.AmericaToronto = "America/Toronto", e3.AmericaTortola = "America/Tortola", e3.AmericaVancouver = "America/Vancouver", e3.AmericaWhitehorse = "America/Whitehorse", e3.AmericaWinnipeg = "America/Winnipeg", e3.AmericaYakutat = "America/Yakutat", e3.AmericaYellowknife = "America/Yellowknife", e3.AntarcticaCasey = "Antarctica/Casey", e3.AntarcticaDavis = "Antarctica/Davis", e3.AntarcticaDumontDUrville = "Antarctica/DumontDUrville", e3.AntarcticaMacquarie = "Antarctica/Macquarie", e3.AntarcticaMawson = "Antarctica/Mawson", e3.AntarcticaMcMurdo = "Antarctica/McMurdo", e3.AntarcticaPalmer = "Antarctica/Palmer", e3.AntarcticaRothera = "Antarctica/Rothera", e3.AntarcticaSyowa = "Antarctica/Syowa", e3.AntarcticaTroll = "Antarctica/Troll", e3.AntarcticaVostok = "Antarctica/Vostok", e3.ArcticLongyearbyen = "Arctic/Longyearbyen", e3.AsiaAden = "Asia/Aden", e3.AsiaAlmaty = "Asia/Almaty", e3.AsiaAmman = "Asia/Amman", e3.AsiaAnadyr = "Asia/Anadyr", e3.AsiaAqtau = "Asia/Aqtau", e3.AsiaAqtobe = "Asia/Aqtobe", e3.AsiaAshgabat = "Asia/Ashgabat", e3.AsiaBaghdad = "Asia/Baghdad", e3.AsiaBahrain = "Asia/Bahrain", e3.AsiaBaku = "Asia/Baku", e3.AsiaBangkok = "Asia/Bangkok", e3.AsiaBarnaul = "Asia/Barnaul", e3.AsiaBeirut = "Asia/Beirut", e3.AsiaBishkek = "Asia/Bishkek", e3.AsiaBrunei = "Asia/Brunei", e3.AsiaChita = "Asia/Chita", e3.AsiaChoibalsan = "Asia/Choibalsan", e3.AsiaColombo = "Asia/Colombo", e3.AsiaDamascus = "Asia/Damascus", e3.AsiaDhaka = "Asia/Dhaka", e3.AsiaDili = "Asia/Dili", e3.AsiaDubai = "Asia/Dubai", e3.AsiaDushanbe = "Asia/Dushanbe", e3.AsiaFamagusta = "Asia/Famagusta", e3.AsiaGaza = "Asia/Gaza", e3.AsiaHebron = "Asia/Hebron", e3.AsiaHoChiMinh = "Asia/Ho_Chi_Minh", e3.AsiaHongKong = "Asia/Hong_Kong", e3.AsiaHovd = "Asia/Hovd", e3.AsiaIrkutsk = "Asia/Irkutsk", e3.AsiaJakarta = "Asia/Jakarta", e3.AsiaJayapura = "Asia/Jayapura", e3.AsiaJerusalem = "Asia/Jerusalem", e3.AsiaKabul = "Asia/Kabul", e3.AsiaKamchatka = "Asia/Kamchatka", e3.AsiaKarachi = "Asia/Karachi", e3.AsiaKathmandu = "Asia/Kathmandu", e3.AsiaKhandyga = "Asia/Khandyga", e3.AsiaKolkata = "Asia/Kolkata", e3.AsiaKrasnoyarsk = "Asia/Krasnoyarsk", e3.AsiaKualaLumpur = "Asia/Kuala_Lumpur", e3.AsiaKuching = "Asia/Kuching", e3.AsiaKuwait = "Asia/Kuwait", e3.AsiaMacau = "Asia/Macau", e3.AsiaMagadan = "Asia/Magadan", e3.AsiaMakassar = "Asia/Makassar", e3.AsiaManila = "Asia/Manila", e3.AsiaMuscat = "Asia/Muscat", e3.AsiaNicosia = "Asia/Nicosia", e3.AsiaNovokuznetsk = "Asia/Novokuznetsk", e3.AsiaNovosibirsk = "Asia/Novosibirsk", e3.AsiaOmsk = "Asia/Omsk", e3.AsiaOral = "Asia/Oral", e3.AsiaPhnomPenh = "Asia/Phnom_Penh", e3.AsiaPontianak = "Asia/Pontianak", e3.AsiaPyongyang = "Asia/Pyongyang", e3.AsiaQatar = "Asia/Qatar", e3.AsiaQyzylorda = "Asia/Qyzylorda", e3.AsiaRangoon = "Asia/Rangoon", e3.AsiaRiyadh = "Asia/Riyadh", e3.AsiaSakhalin = "Asia/Sakhalin", e3.AsiaSamarkand = "Asia/Samarkand", e3.AsiaSeoul = "Asia/Seoul", e3.AsiaShanghai = "Asia/Shanghai", e3.AsiaSingapore = "Asia/Singapore", e3.AsiaSrednekolymsk = "Asia/Srednekolymsk", e3.AsiaTaipei = "Asia/Taipei", e3.AsiaTashkent = "Asia/Tashkent", e3.AsiaTbilisi = "Asia/Tbilisi", e3.AsiaTehran = "Asia/Tehran", e3.AsiaThimphu = "Asia/Thimphu", e3.AsiaTokyo = "Asia/Tokyo", e3.AsiaTomsk = "Asia/Tomsk", e3.AsiaUlaanbaatar = "Asia/Ulaanbaatar", e3.AsiaUrumqi = "Asia/Urumqi", e3.AsiaUstNera = "Asia/Ust-Nera", e3.AsiaVientiane = "Asia/Vientiane", e3.AsiaVladivostok = "Asia/Vladivostok", e3.AsiaYakutsk = "Asia/Yakutsk", e3.AsiaYekaterinburg = "Asia/Yekaterinburg", e3.AsiaYerevan = "Asia/Yerevan", e3.AtlanticAzores = "Atlantic/Azores", e3.AtlanticBermuda = "Atlantic/Bermuda", e3.AtlanticCanary = "Atlantic/Canary", e3.AtlanticCapeVerde = "Atlantic/Cape_Verde", e3.AtlanticFaroe = "Atlantic/Faroe", e3.AtlanticMadeira = "Atlantic/Madeira", e3.AtlanticReykjavik = "Atlantic/Reykjavik", e3.AtlanticSouthGeorgia = "Atlantic/South_Georgia", e3.AtlanticStHelena = "Atlantic/St_Helena", e3.AtlanticStanley = "Atlantic/Stanley", e3.AustraliaAdelaide = "Australia/Adelaide", e3.AustraliaBrisbane = "Australia/Brisbane", e3.AustraliaBrokenHill = "Australia/Broken_Hill", e3.AustraliaCanberra = "Australia/Canberra", e3.AustraliaCurrie = "Australia/Currie", e3.AustraliaDarwin = "Australia/Darwin", e3.AustraliaEucla = "Australia/Eucla", e3.AustraliaHobart = "Australia/Hobart", e3.AustraliaLindeman = "Australia/Lindeman", e3.AustraliaLordHowe = "Australia/Lord_Howe", e3.AustraliaMelbourne = "Australia/Melbourne", e3.AustraliaPerth = "Australia/Perth", e3.AustraliaSydney = "Australia/Sydney", e3.EuropeAmsterdam = "Europe/Amsterdam", e3.EuropeAndorra = "Europe/Andorra", e3.EuropeAthens = "Europe/Athens", e3.EuropeBelgrade = "Europe/Belgrade", e3.EuropeBerlin = "Europe/Berlin", e3.EuropeBratislava = "Europe/Bratislava", e3.EuropeBrussels = "Europe/Brussels", e3.EuropeBucharest = "Europe/Bucharest", e3.EuropeBudapest = "Europe/Budapest", e3.EuropeBusingen = "Europe/Busingen", e3.EuropeChisinau = "Europe/Chisinau", e3.EuropeCopenhagen = "Europe/Copenhagen", e3.EuropeDublin = "Europe/Dublin", e3.EuropeGibraltar = "Europe/Gibraltar", e3.EuropeGuernsey = "Europe/Guernsey", e3.EuropeHelsinki = "Europe/Helsinki", e3.EuropeIsleOfMan = "Europe/Isle_of_Man", e3.EuropeIstanbul = "Europe/Istanbul", e3.EuropeJersey = "Europe/Jersey", e3.EuropeKaliningrad = "Europe/Kaliningrad", e3.EuropeKiev = "Europe/Kiev", e3.EuropeKirov = "Europe/Kirov", e3.EuropeLisbon = "Europe/Lisbon", e3.EuropeLjubljana = "Europe/Ljubljana", e3.EuropeLondon = "Europe/London", e3.EuropeLuxembourg = "Europe/Luxembourg", e3.EuropeMadrid = "Europe/Madrid", e3.EuropeMalta = "Europe/Malta", e3.EuropeMariehamn = "Europe/Mariehamn", e3.EuropeMinsk = "Europe/Minsk", e3.EuropeMonaco = "Europe/Monaco", e3.EuropeMoscow = "Europe/Moscow", e3.EuropeOslo = "Europe/Oslo", e3.EuropeParis = "Europe/Paris", e3.EuropePodgorica = "Europe/Podgorica", e3.EuropePrague = "Europe/Prague", e3.EuropeRiga = "Europe/Riga", e3.EuropeRome = "Europe/Rome", e3.EuropeSamara = "Europe/Samara", e3.EuropeSanMarino = "Europe/San_Marino", e3.EuropeSarajevo = "Europe/Sarajevo", e3.EuropeSimferopol = "Europe/Simferopol", e3.EuropeSkopje = "Europe/Skopje", e3.EuropeSofia = "Europe/Sofia", e3.EuropeStockholm = "Europe/Stockholm", e3.EuropeTallinn = "Europe/Tallinn", e3.EuropeTirane = "Europe/Tirane", e3.EuropeUzhgorod = "Europe/Uzhgorod", e3.EuropeVaduz = "Europe/Vaduz", e3.EuropeVatican = "Europe/Vatican", e3.EuropeVienna = "Europe/Vienna", e3.EuropeVilnius = "Europe/Vilnius", e3.EuropeVolgograd = "Europe/Volgograd", e3.EuropeWarsaw = "Europe/Warsaw", e3.EuropeZagreb = "Europe/Zagreb", e3.EuropeZaporozhye = "Europe/Zaporozhye", e3.EuropeZurich = "Europe/Zurich", e3.GMT = "GMT", e3.IndianAntananarivo = "Indian/Antananarivo", e3.IndianChagos = "Indian/Chagos", e3.IndianChristmas = "Indian/Christmas", e3.IndianCocos = "Indian/Cocos", e3.IndianComoro = "Indian/Comoro", e3.IndianKerguelen = "Indian/Kerguelen", e3.IndianMahe = "Indian/Mahe", e3.IndianMaldives = "Indian/Maldives", e3.IndianMauritius = "Indian/Mauritius", e3.IndianMayotte = "Indian/Mayotte", e3.IndianReunion = "Indian/Reunion", e3.PacificApia = "Pacific/Apia", e3.PacificAuckland = "Pacific/Auckland", e3.PacificBougainville = "Pacific/Bougainville", e3.PacificChatham = "Pacific/Chatham", e3.PacificChuuk = "Pacific/Chuuk", e3.PacificEaster = "Pacific/Easter", e3.PacificEfate = "Pacific/Efate", e3.PacificEnderbury = "Pacific/Enderbury", e3.PacificFakaofo = "Pacific/Fakaofo", e3.PacificFiji = "Pacific/Fiji", e3.PacificFunafuti = "Pacific/Funafuti", e3.PacificGalapagos = "Pacific/Galapagos", e3.PacificGambier = "Pacific/Gambier", e3.PacificGuadalcanal = "Pacific/Guadalcanal", e3.PacificGuam = "Pacific/Guam", e3.PacificHonolulu = "Pacific/Honolulu", e3.PacificJohnston = "Pacific/Johnston", e3.PacificKiritimati = "Pacific/Kiritimati", e3.PacificKosrae = "Pacific/Kosrae", e3.PacificKwajalein = "Pacific/Kwajalein", e3.PacificMajuro = "Pacific/Majuro", e3.PacificMarquesas = "Pacific/Marquesas", e3.PacificMidway = "Pacific/Midway", e3.PacificNauru = "Pacific/Nauru", e3.PacificNiue = "Pacific/Niue", e3.PacificNorfolk = "Pacific/Norfolk", e3.PacificNoumea = "Pacific/Noumea", e3.PacificPagoPago = "Pacific/Pago_Pago", e3.PacificPalau = "Pacific/Palau", e3.PacificPitcairn = "Pacific/Pitcairn", e3.PacificPohnpei = "Pacific/Pohnpei", e3.PacificPonape = "Pacific/Ponape", e3.PacificPortMoresby = "Pacific/Port_Moresby", e3.PacificRarotonga = "Pacific/Rarotonga", e3.PacificSaipan = "Pacific/Saipan", e3.PacificSamoa = "Pacific/Samoa", e3.PacificTahiti = "Pacific/Tahiti", e3.PacificTarawa = "Pacific/Tarawa", e3.PacificTongatapu = "Pacific/Tongatapu", e3.PacificTruk = "Pacific/Truk", e3.PacificWake = "Pacific/Wake", e3.PacificWallis = "Pacific/Wallis", e3.PacificYap = "Pacific/Yap", e3))(sn || {});
var tn = ((e3) => (e3.UTC_MINUS_12 = "UTC-12", e3.UTC_MINUS_11_30 = "UTC-11:30", e3.UTC_MINUS_11 = "UTC-11", e3.UTC_MINUS_10_30 = "UTC-10:30", e3.UTC_MINUS_10 = "UTC-10", e3.UTC_MINUS_9_30 = "UTC-9:30", e3.UTC_MINUS_9 = "UTC-09", e3.UTC_MINUS_8_45 = "UTC-8:45", e3.UTC_MINUS_8 = "UTC-08", e3.UTC_MINUS_7 = "UTC-07", e3.UTC_MINUS_6_30 = "UTC-6:30", e3.UTC_MINUS_6 = "UTC-06", e3.UTC_MINUS_5_45 = "UTC-5:45", e3.UTC_MINUS_5_30 = "UTC-5:30", e3.UTC_MINUS_5 = "UTC-05", e3.UTC_MINUS_4_30 = "UTC-4:30", e3.UTC_MINUS_4 = "UTC-04", e3.UTC_MINUS_3_30 = "UTC-3:30", e3.UTC_MINUS_3 = "UTC-03", e3.UTC_MINUS_2_30 = "UTC-2:30", e3.UTC_MINUS_2 = "UTC-02", e3.UTC_MINUS_1 = "UTC-01", e3.UTC_0 = "UTC+00", e3.UTC_PLUS_1 = "UTC+01", e3.UTC_PLUS_2 = "UTC+02", e3.UTC_PLUS_3 = "UTC+03", e3.UTC_PLUS_3_30 = "UTC+3:30", e3.UTC_PLUS_4 = "UTC+04", e3.UTC_PLUS_4_30 = "UTC+4:30", e3.UTC_PLUS_5 = "UTC+05", e3.UTC_PLUS_5_30 = "UTC+5:30", e3.UTC_PLUS_5_45 = "UTC+5:45", e3.UTC_PLUS_6 = "UTC+06", e3.UTC_PLUS_6_30 = "UTC+6:30", e3.UTC_PLUS_7 = "UTC+07", e3.UTC_PLUS_8 = "UTC+08", e3.UTC_PLUS_8_45 = "UTC+8:45", e3.UTC_PLUS_9 = "UTC+09", e3.UTC_PLUS_9_30 = "UTC+9:30", e3.UTC_PLUS_10 = "UTC+10", e3.UTC_PLUS_10_30 = "UTC+10:30", e3.UTC_PLUS_11 = "UTC+11", e3.UTC_PLUS_11_30 = "UTC+11:30", e3.UTC_PLUS_12 = "UTC+12", e3.UTC_PLUS_12_45 = "UTC+12:45", e3.UTC_PLUS_13 = "UTC+13", e3.UTC_PLUS_13_45 = "UTC+13:45", e3.UTC_PLUS_14 = "UTC+14", e3))(tn || {});
var on = ((e3) => (e3.AcreTime = "ACT", e3.AfghanistanTime = "AFT", e3.AIXCentralEuropeanTime = "DFT", e3.AlaskaDaylightTime = "AKDT", e3.AlaskaStandardTime = "AKST", e3.AlmaAtaTime = "ALMT", e3.AmazonSummerTime = "AMST", e3.AmazonTime = "AMT", e3.AnadyrTime = "ANAT", e3.AqtobeTime = "AQTT", e3.ArabiaStandardTime = "AST", e3.ArgentinaTime = "ART", e3.ArmeniaTime = "AMT", e3.ASEANCommonTime = "ASEAN", e3.AtlanticDaylightTime = "ADT", e3.AtlanticStandardTime = "AST", e3.AustralianCentralDaylightSavingTime = "ACDT", e3.AustralianCentralStandardTime = "ACST", e3.AustralianCentralWesternStandardTime = "ACWST", e3.AustralianEasternDaylightSavingTime = "AEDT", e3.AustralianEasternStandardTime = "AEST", e3.AustralianEasternTime = "AET", e3.AustralianWesternStandardTime = "AWST", e3.AzerbaijanTime = "AZT", e3.AzoresStandardTime = "AZOT", e3.AzoresSummerTime = "AZOST", e3.BakerIslandTime = "BIT", e3.BangladeshStandardTime = "BST", e3.BhutanTime = "BTT", e3.BoliviaTime = "BOT", e3.BougainvilleStandardTime = "BST", e3.BrasiliaSummerTime = "BRST", e3.BrasiliaTime = "BRT", e3.BritishIndianOceanTime = "BIOT", e3.BritishSummerTime = "BST", e3.BruneiTime = "BNT", e3.CapeVerdeTime = "CVT", e3.CentralAfricaTime = "CAT", e3.CentralDaylightTime = "CDT", e3.CentralEuropeanSummerTime = "CEST", e3.CentralEuropeanTime = "CET", e3.CentralIndonesiaTime = "WITA", e3.CentralStandardTime = "CST", e3.CentralTime = "CT", e3.CentralWesternStandardTime = "CWST", e3.ChamorroStandardTime = "CHST", e3.ChathamDaylightTime = "CHADT", e3.ChathamStandardTime = "CHAST", e3.ChileStandardTime = "CLT", e3.ChileSummerTime = "CLST", e3.ChinaStandardTime = "CST", e3.ChoibalsanStandardTime = "CHOT", e3.ChoibalsanSummerTime = "CHOST", e3.ChristmasIslandTime = "CXT", e3.ChuukTime = "CHUT", e3.ClipptertonIslandStandardTime = "CIST", e3.CocosIslandsTime = "CCT", e3.ColombiaSummerTime = "COST", e3.ColombiaTime = "COT", e3.CookIslandTime = "CKT", e3.CoordinatedUniversalTime = "UTC", e3.CubaDaylightTime = "CDT", e3.CubaStandardTime = "CST", e3.DavisTime = "DAVT", e3.DumontDUrvilleTime = "DDUT", e3.EastAfricaTime = "EAT", e3.EasterIslandStandardTime = "EAST", e3.EasterIslandSummerTime = "EASST", e3.EasternCaribbeanTime = "ECT", e3.EasternDaylightTime = "EDT", e3.EasternEuropeanSummerTime = "EEST", e3.EasternEuropeanTime = "EET", e3.EasternGreenlandSummerTime = "EGST", e3.EasternGreenlandTime = "EGT", e3.EasternIndonesianTime = "WIT", e3.EasternStandardTime = "EST", e3.EasternTime = "ET", e3.EcuadorTime = "ECT", e3.FalklandIslandsSummerTime = "FKST", e3.FalklandIslandsTime = "FKT", e3.FernandoDeNoronhaTime = "FNT", e3.FijiTime = "FJT", e3.FrenchGuianaTime = "GFT", e3.FrenchSouthernAndAntarcticTime = "TFT", e3.FurtherEasternEuropeanTime = "FET", e3.GalapagosTime = "GALT", e3.GambierIslandTime = "GIT", e3.GambierIslandsTime = "GAMT", e3.GeorgiaStandardTime = "GET", e3.GilbertIslandTime = "GILT", e3.GreenwichMeanTime = "GMT", e3.GulfStandardTime = "GST", e3.GuyanaTime = "GYT", e3.HawaiiAleutianDaylightTime = "HDT", e3.HawaiiAleutianStandardTime = "HST", e3.HeardAndMcDonaldIslandsTime = "HMT", e3.HeureAvanceeDEuropeCentraleTime = "HAEC", e3.HongKongTime = "HKT", e3.HovdSummerTime = "HOVST", e3.HovdTime = "HOVT", e3.IndianOceanTime = "IOT", e3.IndianStandardTime = "IST", e3.IndochinaTime = "ICT", e3.InternationalDayLineWestTime = "IDLW", e3.IranDaylightTime = "IRDT", e3.IranStandardTime = "IRST", e3.IrishStandardTime = "IST", e3.IrkutskSummerTime = "IRKST", e3.IrkutskTime = "IRKT", e3.IsraelDaylightTime = "IDT", e3.IsraelStandardTime = "IST", e3.JapanStandardTime = "JST", e3.KaliningradTime = "KALT", e3.KamchatkaTime = "KAMT", e3.KoreaStandardTime = "KST", e3.KosraeTime = "KOST", e3.KrasnoyarskSummerTime = "KRAST", e3.KrasnoyarskTime = "KRAT", e3.KyrgyzstanTime = "KGT", e3.LineIslandsTime = "LINT", e3.KazakhstanStandardTime = "KAST", e3.LordHoweStandardTime = "LHST", e3.LordHoweSummerTime = "LHST", e3.MacquarieIslandStationTime = "MIST", e3.MagadanTime = "MAGT", e3.MalaysiaStandardTime = "MST", e3.MalaysiaTime = "MYT", e3.MaldivesTime = "MVT", e3.MarquesasIslandsTime = "MART", e3.MarshallIslandsTime = "MHT", e3.MauritiusTime = "MUT", e3.MawsonStationTime = "MAWT", e3.MiddleEuropeanSummerTime = "MEDT", e3.MiddleEuropeanTime = "MET", e3.MoscowTime = "MSK", e3.MountainDaylightTime = "MDT", e3.MountainStandardTime = "MST", e3.MyanmarStandardTime = "MMT", e3.NepalTime = "NCT", e3.NauruTime = "NRT", e3.NewCaledoniaTime = "NCT", e3.NewZealandDaylightTime = "NZDT", e3.NewZealandStandardTime = "NZST", e3.NewfoundlandDaylightTime = "NDT", e3.NewfoundlandStandardTime = "NST", e3.NewfoundlandTime = "NT", e3.NiueTime = "NUT", e3.NorfolkIslandTime = "NFT", e3.NovosibirskTime = "NOVT", e3.OmskTime = "OMST", e3.OralTime = "ORAT", e3.PacificDaylightTime = "PDT", e3.PacificStandardTime = "PST", e3.PakistanStandardTime = "PKT", e3.PalauTime = "PWT", e3.PapuaNewGuineaTime = "PGT", e3.ParaguaySummerTime = "PYST", e3.ParaguayTime = "PYT", e3.PeruTime = "PET", e3.PhilippineStandardTime = "PHST", e3.PhilippineTime = "PHT", e3.PhoenixIslandTime = "PHOT", e3.PitcairnTime = "PST", e3.PohnpeiStandardTime = "PONT", e3.ReunionTime = "RET", e3.RotheraResearchStationTime = "ROTT", e3.SaintPierreAndMiquelonDaylightTime = "PMDT", e3.SaintPierreAndMiquelonStandardTime = "PMST", e3.SakhalinIslandTime = "SAKT", e3.SamaraTime = "SAMT", e3.SamoaDaylightTime = "SDT", e3.SamoaStandardTime = "SST", e3.SeychellesTime = "SCT", e3.ShowaStationTime = "SYOT", e3.SingaporeStandardTime = "SST", e3.SingaporeTime = "SGT", e3.SolomonIslandsTime = "SBT", e3.SouthAfricanStandardTime = "SAST", e3.SouthGeorgiaAndTheSouthSandwichIslandsTime = "GST", e3.SrednekolymskTime = "SRET", e3.SriLankaStandardTime = "SLST", e3.SurinameTime = "SRT", e3.TahitiTime = "TAHT", e3.TajikistanTime = "TJT", e3.ThailandStandardTime = "THA", e3.TimorLesteTime = "TLT", e3.TokelauTime = "TKT", e3.TongaTime = "TOT", e3.TurkeyTime = "TRT", e3.TurkmenistanTime = "TMT", e3.TuvaluTime = "TVT", e3.UlaanbaatarStandardTime = "ULAT", e3.UlaanbaatarSummerTime = "ULAST", e3.UruguayStandardTime = "UYT", e3.UruguaySummerTime = "UYST", e3.UzbekistanTime = "UZT", e3.VanuatuTime = "VUT", e3.VenezuelaStandardTime = "VET", e3.VladivostokTime = "VLAT", e3.VolgogradTime = "VOLT", e3.VostokStationTime = "VOST", e3.WakeIslandTime = "WAKT", e3.WestAfricaSummerTime = "WAST", e3.WestAfricaTime = "WAT", e3.WestGreenlandSummerTime = "WGST", e3.WestGreenlandTime = "WGT", e3.WestKazakhstanTime = "WKT", e3.WesternEuropeanSummerTime = "WEDT", e3.WesternEuropeanTime = "WET", e3.WesternIndonesianTime = "WIT", e3.WesternStandardTime = "WST", e3.YakutskTime = "YAKT", e3.YekaterinburgTime = "YEKT", e3))(on || {});
var un = ((e3) => (e3.Africa = "Africa", e3.Americas = "Americas", e3.Asia = "Asia", e3.Europe = "Europe", e3.Oceania = "Oceania", e3.Polar = "Polar", e3))(un || {});
var rn = ((e3) => (e3.CentralAmerica = "Central America", e3.EasternAsia = "Eastern Asia", e3.EasternEurope = "Eastern Europe", e3.EasternAfrica = "Eastern Africa", e3.MiddleAfrica = "Middle Africa", e3.MiddleEast = "Middle East", e3.NorthernAfrica = "Northern Africa", e3.NorthernAmerica = "Northern America", e3.NorthernEurope = "Northern Europe", e3.Polynesia = "Polynesia", e3.SouthAmerica = "South America", e3.SouthernAfrica = "Southern Africa", e3.SouthernAsia = "Southern Asia", e3.SouthernEurope = "Southern Europe", e3.WesternAfrica = "Western Africa", e3.WesternAsia = "Western Asia", e3.WesternEurope = "Western Europe", e3.WesternAustralia = "Western Australia", e3))(rn || {});
var ze = (e3 = 21) => {
  let n2 = "", o2 = crypto.getRandomValues(new Uint8Array(e3));
  for (; e3--; ) {
    let r3 = o2[e3] & 63;
    r3 < 36 ? n2 += r3.toString(36) : r3 < 62 ? n2 += (r3 - 26).toString(36).toUpperCase() : r3 < 63 ? n2 += "_" : n2 += "-";
  }
  return n2;
};
var mn = [{ property: "name", enumerable: false }, { property: "message", enumerable: false }, { property: "stack", enumerable: false }, { property: "code", enumerable: true }];
var xe = Symbol(".toJSON was called");
var ln = (e3) => {
  e3[xe] = true;
  let n2 = e3.toJSON();
  return delete e3[xe], n2;
};
var qe = ({ from: e3, seen: n2, to_: o2, forceEnumerable: r3, maxDepth: p3, depth: T2 }) => {
  let A2 = o2 || (Array.isArray(e3) ? [] : {});
  if (n2.push(e3), T2 >= p3)
    return A2;
  if (typeof e3.toJSON == "function" && e3[xe] !== true)
    return ln(e3);
  for (let [l2, d2] of Object.entries(e3)) {
    if (typeof Buffer == "function" && Buffer.isBuffer(d2)) {
      A2[l2] = "[object Buffer]";
      continue;
    }
    if (d2 !== null && typeof d2 == "object" && typeof d2.pipe == "function") {
      A2[l2] = "[object Stream]";
      continue;
    }
    if (typeof d2 != "function") {
      if (!d2 || typeof d2 != "object") {
        A2[l2] = d2;
        continue;
      }
      if (!n2.includes(e3[l2])) {
        T2++, A2[l2] = qe({ from: e3[l2], seen: [...n2], forceEnumerable: r3, maxDepth: p3, depth: T2 });
        continue;
      }
      A2[l2] = "[Circular]";
    }
  }
  for (let { property: l2, enumerable: d2 } of mn)
    typeof e3[l2] == "string" && Object.defineProperty(A2, l2, { value: e3[l2], enumerable: r3 ? true : d2, configurable: true, writable: true });
  return A2;
};
function Ge(e3, n2 = {}) {
  let { maxDepth: o2 = Number.POSITIVE_INFINITY } = n2;
  return typeof e3 == "object" && e3 !== null ? qe({ from: e3, seen: [], forceEnumerable: true, maxDepth: o2, depth: 0 }) : typeof e3 == "function" ? `[Function: ${e3.name || "anonymous"}]` : e3;
}
var u = ((a) => (a[a.Warning = 999] = "Warning", a[a.Exception = 1e3] = "Exception", a[a.UnmanagedException = 1001] = "UnmanagedException", a[a.CaughtException = 1002] = "CaughtException", a[a.UncaughtException = 1003] = "UncaughtException", a[a.UnhandledPromiseRejectionException = 1004] = "UnhandledPromiseRejectionException", a[a.AuthenticationException = 2e3] = "AuthenticationException", a[a.AuthenticationExpiredAccessTokenException = 2001] = "AuthenticationExpiredAccessTokenException", a[a.AuthenticationInvalidAccessTokenException = 2002] = "AuthenticationInvalidAccessTokenException", a[a.AuthenticationMissingAccessTokenException = 2003] = "AuthenticationMissingAccessTokenException", a[a.AuthenticationExpiredRefreshTokenException = 2004] = "AuthenticationExpiredRefreshTokenException", a[a.AuthenticationInvalidRefreshTokenException = 2005] = "AuthenticationInvalidRefreshTokenException", a[a.AuthenticationMissingRefreshTokenException = 2006] = "AuthenticationMissingRefreshTokenException", a[a.AuthenticationMissingDeviceKeyException = 2007] = "AuthenticationMissingDeviceKeyException", a[a.AuthenticationUnAuthorizedAccessException = 2008] = "AuthenticationUnAuthorizedAccessException", a[a.AuthenticationCodeMismatchException = 2009] = "AuthenticationCodeMismatchException", a[a.AuthenticationExpiredCodeException = 2010] = "AuthenticationExpiredCodeException", a[a.AuthenticationLoginException = 2011] = "AuthenticationLoginException", a[a.AuthenticationLoginInvalidCredentialsException = 2012] = "AuthenticationLoginInvalidCredentialsException", a[a.AuthenticationLoginTooManyFailedAttemptsException = 2013] = "AuthenticationLoginTooManyFailedAttemptsException", a[a.AuthenticationLimitExceededException = 2014] = "AuthenticationLimitExceededException", a[a.AuthenticationUnauthorizedAccessException = 2015] = "AuthenticationUnauthorizedAccessException", a[a.AuthenticationTooManyRequestsException = 2016] = "AuthenticationTooManyRequestsException", a[a.AuthenticationUserNotFoundException = 2017] = "AuthenticationUserNotFoundException", a[a.AuthenticationSignupException = 2018] = "AuthenticationSignupException", a[a.AuthenticationUsernameAvailabilityCheckException = 2019] = "AuthenticationUsernameAvailabilityCheckException", a[a.AuthenticationUsernameExistsException = 2020] = "AuthenticationUsernameExistsException", a[a.AuthenticationAliasExistException = 2021] = "AuthenticationAliasExistException", a[a.AuthenticationCodeDeliveryFailureException = 2022] = "AuthenticationCodeDeliveryFailureException", a[a.AuthenticationMFAMethodNotFoundException = 2023] = "AuthenticationMFAMethodNotFoundException", a[a.AuthenticationNotAuthorizedException = 2024] = "AuthenticationNotAuthorizedException", a[a.AuthenticationPasswordResetRequiredException = 2025] = "AuthenticationPasswordResetRequiredException", a[a.AuthenticationUserNotConfirmedException = 2026] = "AuthenticationUserNotConfirmedException", a[a.DatabaseException = 3e3] = "DatabaseException", a[a.SequelizeNotInitializedException = 3001] = "SequelizeNotInitializedException", a[a.ProcessException = 4e3] = "ProcessException", a[a.ProcessWarningException = 4001] = "ProcessWarningException", a[a.KillProcessException = 4002] = "KillProcessException", a[a.FatalException = 4003] = "FatalException", a[a.ProcessSigTermException = 4004] = "ProcessSigTermException", a[a.ProcessSigIntException = 4005] = "ProcessSigIntException", a[a.MissingEnvironmentVariable = 4006] = "MissingEnvironmentVariable", a[a.NetworkException = 5e3] = "NetworkException", a[a.HttpException = 5001] = "HttpException", a[a.HttpRequestException = 5002] = "HttpRequestException", a[a.HttpRequestResourceNotFoundException = 5003] = "HttpRequestResourceNotFoundException", a[a.HttpResponseException = 5004] = "HttpResponseException", a[a.ServiceProviderException = 6e3] = "ServiceProviderException", a[a.AWSException = 6001] = "AWSException", a[a.AWSMissingAccessKeyException = 6002] = "AWSMissingAccessKeyException", a[a.AWSMissingSecretKeyException = 6003] = "AWSMissingSecretKeyException", a[a.CognitoException = 6004] = "CognitoException", a[a.CognitoInternalErrorException = 6005] = "CognitoInternalErrorException", a[a.CognitoInvalidEmailRoleAccessPolicyException = 6006] = "CognitoInvalidEmailRoleAccessPolicyException", a[a.CognitoInvalidLambdaResponseException = 6007] = "CognitoInvalidLambdaResponseException", a[a.CognitoUserLambdaValidationException = 6008] = "CognitoUserLambdaValidationException", a[a.CognitoInvalidParameterException = 6009] = "CognitoInvalidParameterException", a[a.CognitoInvalidSmsRoleAccessPolicyException = 6010] = "CognitoInvalidSmsRoleAccessPolicyException", a[a.CognitoInvalidSmsRoleTrustRelationshipException = 6011] = "CognitoInvalidSmsRoleTrustRelationshipException", a[a.CognitoInvalidUserPoolConfigurationException = 6012] = "CognitoInvalidUserPoolConfigurationException", a[a.CognitoResourceNotFoundException = 6013] = "CognitoResourceNotFoundException", a[a.CognitoMissingUserPoolClientIdException = 6014] = "CognitoMissingUserPoolClientIdException", a[a.CognitoMissingUserPoolIdException = 6015] = "CognitoMissingUserPoolIdException", a[a.CognitoUnexpectedLambdaException = 6016] = "CognitoUnexpectedLambdaException", a[a.StripeException = 6017] = "StripeException", a[a.StripeMissingSecretKeyException = 6018] = "StripeMissingSecretKeyException", a[a.StripeSubscriptionCreationFailedException = 6019] = "StripeSubscriptionCreationFailedException", a[a.StripePaymentMethodRequiredException = 6020] = "StripePaymentMethodRequiredException", a[a.UserException = 7e3] = "UserException", a[a.NullUserException = 7001] = "NullUserException", a[a.UserStateConflictException = 7002] = "UserStateConflictException", a[a.NullAccountException = 7003] = "NullAccountException", a[a.ValidationException = 8e3] = "ValidationException", a[a.InvalidTypeException = 8001] = "InvalidTypeException", a[a.MissingArgumentException = 8002] = "MissingArgumentException", a[a.MissingPropertyException = 8003] = "MissingPropertyException", a[a.InvalidArgumentException = 8004] = "InvalidArgumentException", a[a.InvalidPropertyException = 8005] = "InvalidPropertyException", a[a.MissingRequestBodyPropertyException = 8006] = "MissingRequestBodyPropertyException", a[a.MissingRequestUrlParameterException = 8007] = "MissingRequestUrlParameterException", a[a.MissingCookieException = 8008] = "MissingCookieException", a))(u || {});
var s = class extends Error {
  cause;
  code = 1e3;
  context;
  created;
  data;
  description;
  model;
  form;
  friendlyMessage = "An unknown error has occurred. :(";
  id;
  logLevel = i.Exception;
  origin;
  pii;
  request;
  response;
  scope;
  remediation;
  tags;
  task;
  user;
  __proto__;
  constructor(n2, o2) {
    super(n2);
    let r3 = new.target.prototype;
    if (this.__proto__ = r3, Error.captureStackTrace && Error.captureStackTrace(o2?.cause ?? this, s), this.id = ze(), this.name = this.constructor.name, this.created = new Date().toString(), this.description = o2?.description ?? this.description, this.remediation = o2?.remediation ?? this.remediation, this.scope = o2?.scope ?? this.scope, o2) {
      let { cause: p3, context: T2, data: A2, model: l2, form: d2, origin: Ye, pii: Ze, request: Je, response: Qe, tags: $e, task: Xe, user: ea3 } = o2;
      this.cause = p3, this.context = T2, this.data = A2, this.model = l2, this.form = d2, this.origin = Ye, this.pii = Ze, this.request = Je, this.response = Qe, this.task = Xe, this.tags = $e, this.user = ea3;
    }
  }
  toJSON() {
    return Ge(this);
  }
};
var Fe = new Re();
var c = ((r3) => (r3.Simple = "simple", r3.ExponentialBackoff = "exponential", r3.CircuitBreaker = "circuit_breaker", r3))(c || {});
var v = class extends s {
  code = 1001;
  description = `An "Error" object that isn't managed by AppLab`;
  friendlyMessage = "An unknown error has occurred.";
  remediation = { response: { code: 500 }, retry: { limit: 3 } };
};
var F = class extends s {
  code = 1002;
  description = "An exception was caught within a try block.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3 } };
};
var M = class extends s {
  code = 1003;
  description = "An uncaught exception bubbled up and was caught automatically.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3 } };
};
var S = class extends s {
  code = 1004;
  description = "An unhandled promise rejection was caught automatically.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3 } };
};
var g = class extends s {
  code = 4e3;
  description = "A exception was caught in a process.";
  logLevel = i.Exception;
};
var L = class extends g {
  code = 4001;
  description = "A warning was caught in a process.";
  logLevel = i.Warning;
};
var C = class extends g {
  code = 4002;
  description = 'Exception thrown to kill a Node.js "gracefully".';
  logLevel = i.Critical;
};
var b = class extends g {
  code = 4004;
  description = "Process received SIGTERM termination code.";
  logLevel = i.Critical;
};
var y = class extends g {
  code = 4005;
  description = "Process received SIGINT termination code.";
  logLevel = i.Critical;
};
var P = class extends g {
  code = 4003;
  description = "An fatal exception occurred which has crashed the server.";
  logLevel = i.Critical;
};
var R = class extends g {
  code = 4006;
  description = "An environment variable is not set or unavailable.";
  logLevel = i.Critical;
};
function Me(e3) {
  process.on("SIGINT", () => {
    let n2 = new y("SIGINT signal received.", {});
    e3 && e3(n2);
  });
}
function Le(e3) {
  process.on("SIGTERM", () => {
    let n2 = new b("SIGTERM signal received", {});
    e3 && e3(n2);
  });
}
function Pe(e3) {
  process.on("uncaughtException", async (n2) => {
    n2.name !== C.name && e3 && e3(n2);
  }), process.on("unhandledRejection", async (n2) => {
    if (n2.name !== C.name) {
      let o2 = new S(`Unhandled Rejection: ${n2.name}`, { cause: n2 });
      e3 && e3(o2);
    }
  }), process.on("warning", (n2) => {
    e3 && e3(n2);
  });
}
var we = class {
  browser = false;
  process = false;
  constructor({ browser: n2, process: o2, processExceptionsHandler: r3, processInteruptHandler: p3, processTerminationHandler: T2 }) {
    this.browser = n2, this.process = o2, o2 && (Pe(r3), Me(p3), Le(T2));
  }
};
var t = class extends s {
  code = 2e3;
  description = "Generic or unknown exceptions associated with user authentication.";
  friendlyMessage = "An unknown error occurred.";
  logLevel = i.Warning;
  remediation = { response: { code: 401 }, retry: { limit: 3, strategy: "circuit_breaker" } };
};
var z = class extends t {
  code = 2015;
  description = "User lacks permissions to access the requested resource.";
  logLevel = i.Warning;
  remediation = { response: { code: 403 }, retry: false };
};
var q = class extends t {
  code = 2014;
  description = "This exception is thrown when a user exceeds the limit for a requested AWS resource";
  friendlyMessage = "You are trying to access this resource too often.";
  logLevel = i.Warning;
  remediation = { response: { code: 429 }, retry: false };
};
var G = class extends t {
  code = 2024;
  description = "The Auth user does not have permission to perform this action.";
  friendlyMessage = "You need to be logged in or have proper permissions to access this resource.";
  logLevel = i.Warning;
  remediation = { response: { code: 403 }, retry: false };
};
var K = class extends t {
  code = 2016;
  description = "This exception is thrown when the user has made too many requests for a given operation.";
  friendlyMessage = "You are trying to access this resource too often.";
  logLevel = i.Warning;
  remediation = { response: { code: 429 }, retry: false };
};
var w = class extends t {
  code = 2017;
  description = "This exception is thrown when the Auth service cannot find a user with the provided username.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: false };
};
var O = class extends t {
  code = 2025;
  description = "This exception is thrown when a password reset is required.";
  friendlyMessage = "A password reset is required in order to login.";
  logLevel = i.Warning;
  remediation = { response: { code: 403 }, retry: false };
};
var H = class extends t {
  code = 2011;
  description = "An exception occurred while logging a user in.";
  friendlyMessage = "An unknown error occurred.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: true };
};
var W = class extends t {
  code = 2012;
  description = "Incorrect username or password provided.";
  friendlyMessage = "Incorrect username or password.";
  logLevel = i.Info;
  remediation = { response: { code: 401 }, retry: false };
};
var V = class extends t {
  code = 2013;
  description = "This exception is thrown when the user has provided an incorrect username or password too many times.";
  friendlyMessage = "You've provided an incorrect username or password too many times.";
  logLevel = i.Warning;
  remediation = { response: { code: 429 }, retry: false };
};
var j = class extends t {
  code = 2023;
  description = "This exception is thrown when the Auth service cannot find a multi-factor authentication (MFA) method.";
  logLevel = i.Exception;
  remediation = { response: { code: 403 }, retry: { limit: 3, strategy: "simple" } };
};
var Y = class extends t {
  code = 2018;
  description = "An exception occurred while signing up a user.";
  friendlyMessage = "An error occurred while signing up.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: true };
};
var _ = class extends t {
  code = 2019;
  description = "An exception occurred while checking if a username is available.";
  friendlyMessage = "An error occurred while checking if a username is available.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: true };
};
var Z = class extends _ {
  code = 2020;
  description = "User with email or phone number already exists.";
  friendlyMessage = "A user with that email already exists.";
  logLevel = i.Warning;
  remediation = { response: { code: 400 }, retry: false };
};
var J = class extends _ {
  code = 2021;
  description = "This exception is thrown when a user tries to confirm the account with an email or phone number that has already been supplied as an alias from a different account. This exception tells user that an account with this email or phone already exists";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var Oe = class extends t {
  code = 2001;
  description = "The access token associated with a session has expired.";
  logLevel = i.Warning;
  remediation = { response: { code: 401 }, retry: false };
};
var He = class extends t {
  code = 2002;
  description = "The access token associated with a session is invalid.";
  logLevel = i.Warning;
  remediation = { response: { code: 401 }, retry: false };
};
var We = class extends t {
  code = 2003;
  description = "The access token associated with a session is missing.";
  logLevel = i.Warning;
  remediation = { response: { code: 401 }, retry: false };
};
var Q = class extends t {
  code = 2004;
  description = "The refresh token associated with a session has expired.";
  logLevel = i.Warning;
  remediation = { response: { code: 401 }, retry: false };
};
var $ = class extends t {
  code = 2005;
  description = "The refresh token associated with a session is invalid.";
  logLevel = i.Warning;
  remediation = { response: { code: 401 }, retry: false };
};
var k = class extends t {
  code = 2006;
  description = "The refresh token associated with a session is missing.";
  logLevel = i.Warning;
  remediation = { response: { code: 401 }, retry: false };
};
var X = class extends t {
  code = 2022;
  description = "This exception is thrown when a verification code fails to deliver successfully.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var ee = class extends t {
  code = 2009;
  description = "The verification code provided is incorrect";
  logLevel = i.Warning;
  remediation = { response: { code: 400 }, retry: false };
};
var ae = class extends t {
  code = 2010;
  description = "The verification code provided has expired";
  logLevel = i.Warning;
  remediation = { response: { code: 403 }, retry: false };
};
var ie = class extends t {
  code = 2026;
  description = "This exception is thrown when a user who is not confirmed attempts to login.";
  friendlyMessage = "You haven't verified your email address or telephone number yet";
  logLevel = i.Warning;
  remediation = { response: { code: 403 }, retry: false };
};
var B = class extends s {
  code = 3e3;
  description = "Generic or unknown database exceptions.";
  logLevel = i.Exception;
};
var ne = class extends B {
  code = 3001;
  description = "Generic or unknown database exceptions.";
  logLevel = i.Exception;
};
var D = class extends s {
  code = 5e3;
  description = "A network related issue has occurred.";
  logLevel = i.Exception;
};
var N = class extends D {
  code = 5001;
  description = "A generic or unknown exception occurred related to an HTTP request.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "circuit_breaker" } };
};
var E = class extends N {
  code = 5002;
  description = "Base class for generic or unknown exceptions occuring during an HTTP request.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "circuit_breaker" } };
};
var se = class extends E {
  code = 5003;
  description = "The requested HTTP resource could not be found.";
  logLevel = i.Exception;
  remediation = { response: { code: 404 }, retry: { limit: 3, strategy: "circuit_breaker" } };
};
var te = class extends E {
  code = 8006;
  description = "HTTP request body is missing a required property.";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var oe = class extends E {
  code = 8007;
  description = "HTTP request URL is missing a required parameter.";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var ue = class extends E {
  code = 8008;
  description = "A required cookie is missing.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: false };
};
var re = class extends N {
  code = 5002;
  description = "Generic or unknown exceptions related to HTTP responses.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: false };
};
var f = class extends s {
  code = 6e3;
  description = "An error originating from a third-party or service provider occurred.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var h = class extends f {
  code = 6001;
  description = "An exception originating from the AWS integration occurred.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var x = class extends h {
  code = 6018;
  description = "Missing AWS access key token.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: false };
};
var cn = class extends h {
  code = 6018;
  description = "Missing AWS secret key token.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: false };
};
var m = class extends h {
  code = 6001;
  description = "An exception originating from the AWS Cognito integration occurred.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var me = class extends m {
  code = 6005;
  description = "An internal error occurred originating from AWS Cognito.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var le = class extends m {
  code = 6012;
  description = "This exception is thrown when the user pool configuration is invalid.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: false };
};
var de = class extends m {
  code = 6006;
  description = "There is an access policy exception for the role provided for email configuration.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: false };
};
var ce = class extends m {
  code = 6010;
  description = "This exception is returned when the role provided for SMS configuration does not have permission to publish using Amazon SNS.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: false };
};
var Ae = class extends m {
  code = 6011;
  description = "This exception is thrown when the trust relationship is invalid for the role provided for SMS configuration. This can happen if you do not trust -idp.amazonaws.com or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: false };
};
var ge = class extends m {
  code = 6014;
  description = "Cognito user pool client ID configuration is missing.";
  logLevel = i.Critical;
};
var Te = class extends m {
  code = 6015;
  description = "Cognito user pool ID configuration is missing.";
  logLevel = i.Critical;
};
var pe = class extends m {
  code = 6016;
  description = "This exception is thrown when the Auth service encounters an unexpected exception with the AWS Lambda service.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var Ee = class extends m {
  code = 6009;
  description = "This exception is thrown when the Cognito service encounters an invalid parameter.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var fe = class extends m {
  code = 6007;
  description = "This exception is thrown when the Amazon service encounters an invalid AWS Lambda response.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var he = class extends m {
  code = 6013;
  description = "This exception is thrown when the Cognito service cannot find the requested resource.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var Ce = class extends m {
  code = 6008;
  description = "This exception is thrown when the Cognito service encounters a user validation exception with the AWS Lambda service.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var I = class extends f {
  code = 6017;
  description = "An exception occurred relating to Stripe.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var Ie = class extends I {
  code = 6018;
  description = "The Stripe secret key token is missing.";
  logLevel = i.Critical;
  remediation = { response: { code: 500 }, retry: false };
};
var ve = class extends I {
  code = 6019;
  description = "Stripe subscription creation failed.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var Se = class extends I {
  code = 6020;
  description = "An updated payment method is required.";
  logLevel = i.Exception;
  remediation = { response: { code: 500 }, retry: { limit: 3, strategy: "simple" } };
};
var U = class extends s {
  code = 7e3;
  description = "Generic or unknown exceptions related to a user.";
  logLevel = i.Exception;
};
var be = class extends U {
  code = 7001;
  description = "An operation was performed on behalf a user that cannot be found in the database.";
  logLevel = i.Critical;
};
var ye = class extends U {
  code = 7002;
  description = "Exception used for user state that exists in one system or another and isn't being actively managed, or synced between all systems, or at least differences accounted for.";
  logLevel = i.Critical;
};
var _e = class extends s {
  code = 8e3;
  description = "Generic or otherwise unknown input validation exception.";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var Be = class extends s {
  code = 8001;
  description = "Instance type is invalid.";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var De = class extends s {
  code = 8002;
  description = "A required argument is missing.";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var Ne = class extends s {
  code = 8003;
  description = "A required property is missing.";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var Ue = class extends s {
  code = 8004;
  description = "An argument is invalid.";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var ke = class extends s {
  code = 8005;
  description = "An object property is invalid.";
  logLevel = i.Exception;
  remediation = { response: { code: 400 }, retry: false };
};
var An = { [1e3]: s, [1001]: v, [1002]: F, [1003]: M, [1004]: S, [2e3]: t, [2004]: Q, [2005]: $, [2011]: H, [2012]: W, [2013]: V, [2007]: k, [2006]: k, [2015]: z, [2009]: ee, [2010]: ae, [2014]: q, [2024]: G, [2016]: K, [2017]: w, [2018]: Y, [2019]: _, [2021]: J, [2020]: Z, [2022]: X, [2023]: j, [2025]: O, [2026]: ie, [3e3]: B, [3001]: ne, [6e3]: f, [6001]: h, [6002]: x, [6003]: x, [6004]: m, [6005]: me, [6006]: de, [6010]: ce, [6011]: Ae, [6016]: pe, [6012]: le, [6007]: fe, [6009]: Ee, [6015]: Te, [6014]: ge, [6013]: he, [6008]: Ce, [6017]: I, [6019]: ve, [6018]: Ie, [6020]: Se, [5e3]: D, [5001]: N, [5002]: E, [5003]: se, [5004]: re, [8006]: te, [8007]: oe, [8008]: ue, [8e3]: _e, [8004]: Ue, [8005]: ke, [8001]: Be, [8002]: De, [8003]: Ne, [4e3]: g, [4001]: L, [4004]: b, [4005]: y, [4003]: P, [4006]: R, [4002]: C, [7e3]: U, [7001]: be, [7002]: ye };
var Ve = class extends t {
  code = 2007;
  description = "The device key associated with the user's session is missing.";
  logLevel = i.Warning;
  remediation = { response: { code: 401 }, retry: false };
};
var je = class {
  exception = void 0;
  handleException(n2, { res: o2 }) {
    this.exception = n2 instanceof s ? n2 : new v(n2.name, { cause: n2 });
    let r3 = this.getExceptionResponse();
    return r3 ? o2.status(r3.code).json(r3.body) : o2.status(500).json({ code: 99999, description: "An unknown error occurred.", friendlyMessage: "An unknown error occurred." });
  }
  getExceptionResponse() {
    if (this.exception) {
      let { code: n2, description: o2, friendlyMessage: r3, remediation: p3 } = this.exception, T2 = p3?.response?.code ?? 500;
      return { body: { code: n2, description: o2, friendlyMessage: r3 }, code: T2 };
    }
    return null;
  }
};

// node_modules/@srclaunch/logger/dist/index.js
var r = class {
  analytics(o2) {
  }
  critical(o2) {
  }
  debug(o2) {
  }
  async exception(o2) {
    console.log(o2);
  }
  http(o2) {
  }
  async info(o2) {
    console.log(o2);
  }
  warning(o2) {
  }
  constructor(o2) {
  }
};
var p = r;
var e = p;

// node_modules/@srclaunch/node-environment/dist/index.js
var i2 = ((a) => (a.Comment = "comment", a.Create = "create", a.Delete = "delete", a.Edit = "edit", a.Invoice = "invoice", a.Message = "message", a.PageView = "pageView", a.Paid = "paid", a.Payment = "payment", a.Purchase = "purchase", a.Referral = "referral", a.Renewal = "renewal", a.Signup = "signup", a.Subscription = "subscription", a.Upgrade = "upgrade", a))(i2 || {});
var n = ((a) => (a.Business = "business", a.Engineering = "engineering", a.Exception = "exception", a.LogMessage = "log-message", a.Marketing = "marketing", a.PageLeave = "page-leave", a.PageView = "page-view", a.Product = "product", a.QualityManagement = "quality-management", a.UserAccess = "user-access", a.UserLogin = "user-login", a.UserLogout = "user-logout", a.UserSignup = "user-signup", a.UserPreferencesChanged = "user-preferences-changed", a.WebsiteVisit = "website-visit", a))(n || {});
var u2 = ((a) => (a.CloseTab = "close-tab", a.ExternalLink = "external-link", a.NavigateAway = "navigate-away", a.Unknown = "unknown", a))(u2 || {});
var s2 = ((a) => (a.Ecs = "Ecs", a))(s2 || {});
var t2 = ((a) => (a.Finished = "Finished", a.Queued = "Queued", a.Running = "Running", a.Started = "Started", a))(t2 || {});
var o = ((a) => (a.Mobile = "mobile", a.TV = "tv", a.Watch = "watch", a.Web = "web", a))(o || {});
var e2 = ((a) => (a.Development = "Development", a.NonProduction = "NonProduction", a.Production = "Production", a))(e2 || {});
var r2 = ((a) => (a.Completed = "completed", a.Started = "started", a.Uncompleted = "uncompleted", a))(r2 || {});
var m2 = ((a) => (a.Build = "Build", a.Deployment = "Deployment", a.Test = "Test", a))(m2 || {});
var l = ((a) => (a.Canceled = "Canceled", a.Completed = "Completed", a.Failed = "Failed", a.Running = "Running", a.Queued = "Queued", a.Waiting = "Waiting", a))(l || {});
var d = ((a) => (a.Canceled = "Canceled", a.Completed = "Completed", a.Failed = "Failed", a.Running = "Running", a.Queued = "Queued", a.Waiting = "Waiting", a))(d || {});
var A = ((a) => (a.ForgotPassword = "forgot_password", a.Index = "index", a.Login = "login", a.PageNotFound = "404", a.Signup = "signup", a.VerifyCode = "verify_code", a))(A || {});
var c2 = ((a) => (a.Info = "info", a.Warning = "warning", a.Error = "error", a.Success = "success", a))(c2 || {});
var g2 = ((a) => (a.Details = "details", a.Dialog = "dialog", a))(g2 || {});
var T = ((a) => (a.Info = "info", a.Warning = "warning", a.Error = "error", a.Success = "success", a))(T || {});
var C2 = ((a) => (a.AccountBalance = "AccountBalance", a.UserAssets = "UserAssets", a.UserCreditCardDebt = "UserCreditCardDebt", a.UserCreditLimit = "UserCreditLimit", a.UserCreditUtilization = "UserCreditUtilization", a.UserDebt = "UserDebt", a.UserInvestments = "UserInvestments", a.UserRetirement = "UserRetirement", a.UserSavings = "UserSavings", a))(C2 || {});
var E2 = ((a) => (a.DateTime = "date_time", a.True = "true", a.False = "false", a.UniqueId = "unique_id", a))(E2 || {});
var f2 = ((a) => (a.DomainModel = "domain_entity", a.GenericModel = "generic_entity", a))(f2 || {});
var I2 = ((a) => (a.AirportCode = "airport-code", a.BankIDCode = "bank-id-code", a.BitcoinAddress = "bitcoin-address", a.Boolean = "boolean", a.City = "city", a.Color = "color", a.CountryCode = "country-code", a.CreditCard = "credit-card", a.CurrencyAmount = "currency-amount", a.CurrencyCode = "currency-code", a.DataURI = "data-uri", a.Date = "date", a.DateRange = "date-range", a.DateTime = "date-time", a.DayOfMonth = "day-of-month", a.DomainName = "domain-name", a.EmailAddress = "email-address", a.EthereumAddress = "ethereum-address", a.EAN = "european-article-number", a.EIN = "employer-identification-number", a.Float = "float", a.GeographicCoordinate = "geographic-coordinate", a.GeographicCoordinates = "geographic-coordinates", a.GitRepositoryURL = "git-repository-url", a.HSLColor = "hsl-color", a.HexColor = "hex-color", a.Hexadecimal = "hexadecimal", a.IBAN = "international-bank-account-number", a.IMEI = "international-mobile-equipment-identifier", a.IPAddress = "ip-address", a.IPAddressRange = "ip-address-range", a.ISBN = "international-standard-book-number", a.ISIN = "international-stock-number", a.ISMN = "international-standard-music-number", a.ISSN = "international-standard-serial-number", a.ISO8601 = "iso-8601", a.ISO31661Alpha2 = "iso-31661-alpha-2", a.ISO31661Alpha3 = "iso-31661-alpha-3", a.ISO4217 = "iso-4217", a.Image = "image", a.Integer = "integer", a.JSON = "json", a.LanguageCode = "language-code", a.LicensePlateNumber = "license-plate-number", a.LongText = "long-text", a.MD5 = "md5", a.Markdown = "markdown", a.Menu = "menu", a.Number = "number", a.MACAddress = "mac-address", a.MagnetURI = "magnet-uri", a.MimeType = "mime-type", a.Month = "month", a.Password = "password", a.PassportNumber = "passport-number", a.Percent = "percent", a.PhoneNumber = "phone-number", a.Port = "port", a.PostalCode = "postal-code", a.Province = "province", a.RFC3339 = "rfc-3339", a.RGBColor = "rgb-color", a.SemanticVersion = "semantic-version", a.SSN = "social-security-number", a.State = "state", a.StreetAddress = "street-address", a.String = "string", a.Tags = "tags", a.TaxIDNumber = "tax-id-number", a.Time = "time", a.TimeOfDay = "time-of-day", a.TimeRange = "time-range", a.TimezoneRegion = "timezone-region", a.URL = "url", a.URLPath = "url-path", a.UUID = "uuid", a.VATIDNumber = "value-added-tax-id-number", a.VerificationCode = "verification-code", a.Video = "video", a.Weekday = "weekday", a.Year = "year", a))(I2 || {});
var h2 = ((a) => (a.Critical = "Critical", a.Error = "Error", a.Fatal = "Fatal", a.Warning = "Warning", a))(h2 || {});
var S2 = ((a) => (a.Contains = "contains", a.HasCharacterCount = "has-character-count", a.HasNumberCount = "has-number-count", a.HasLetterCount = "has-letter-count", a.HasLowercaseCount = "has-lowercase-count", a.HasSpacesCount = "has-spaces-count", a.HasSymbolCount = "has-symbol-count", a.HasUppercaseCount = "has-uppercase-count", a.IsAfter = "is-after", a.IsAfterOrEqual = "is-after-or-equal", a.IsAirport = "is-airport", a.IsAlpha = "is-alpha", a.IsAlphanumeric = "is-alphanumeric", a.IsAlgorithmHash = "is-algorithm-hash", a.IsAscii = "is-ascii", a.IsBase64 = "is-base-64", a.IsBefore = "is-before", a.IsBeforeOrAfter = "is-before-or-after", a.IsBeforeOrEqual = "is-before-or-equal", a.IsBetween = "is-between", a.IsBIC = "is-bic", a.IsBitcoinAddress = "is-bitcoin-address", a.IsBoolean = "is-boolean", a.IsColor = "is-color", a.IsComplexEnough = "is-complex-enough", a.IsCountry = "is-country", a.IsCreditCard = "is-credit-card", a.IsCurrency = "is-currency", a.IsDataURI = "is-data-uri", a.IsDate = "is-date", a.IsDateRange = "is-date-range", a.IsDateTime = "is-date-time", a.IsDayOfMonth = "is-day-of-month", a.IsDecimal = "is-decimal", a.IsDivisibleBy = "is-divisible-by", a.IsDomainName = "is-domain-name", a.IsEmailAddress = "is-email-address", a.IsEthereumAddress = "is-ethereum-address", a.IsEAN = "is-ean", a.IsEIN = "is-ein", a.IsEqual = "is-equal", a.IsEvenNumber = "is-even-number", a.IsFloat = "is-float", a.IsIBAN = "is-iban", a.IsGreaterThan = "greater-than", a.IsGreaterThanOrEqual = "greater-than-or-equal", a.IsHSLColor = "is-hsl-color", a.IsHexColor = "is-hex-color", a.IsHexadecimal = "is-hexadecimal", a.IsIdentityCardCode = "is-identity-card-code", a.IsIMEI = "is-imei", a.IsInIPAddressRange = "is-in-ip-address-range", a.IsInList = "is-in-list", a.IsInTheLast = "is-in-the-last", a.IsInteger = "is-integer", a.IsIPAddress = "is-ip-address", a.IsIPAddressRange = "is-ip-address-range", a.IsISBN = "is-isbn", a.IsISIN = "is-isin", a.IsISMN = "is-ismn", a.IsISRC = "is-isrc", a.IsISSN = "is-issn", a.IsISO4217 = "is-iso-4217", a.IsISO8601 = "is-iso-8601", a.IsISO31661Alpha2 = "is-iso-31661-alpha-2", a.IsISO31661Alpha3 = "is-iso-31661-alpha-3", a.IsJSON = "is-json", a.IsLanguage = "is-language", a.IsLatitude = "is-latitude", a.IsLongitude = "is-longitude", a.IsLengthEqual = "is-length-equal", a.IsLengthGreaterThan = "is-length-greater-than", a.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", a.IsLengthLessThan = "is-length-less-than", a.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", a.IsLessThan = "less-than", a.IsLessThanOrEqual = "less-than-or-equal", a.IsLicensePlateNumber = "is-license-plate-number", a.IsLowercase = "is-lowercase", a.IsOctal = "is-octal", a.IsMACAddress = "is-mac-address", a.IsMD5 = "is-md5", a.IsMagnetURI = "is-magnet-uri", a.IsMarkdown = "is-markdown", a.IsMimeType = "is-mime-type", a.IsMonth = "is-month", a.IsNegativeNumber = "is-negative-number", a.IsNotDate = "is-not-date", a.IsNotEqual = "is-not-equal", a.IsNotInIPAddressRange = "is-not-in-ip-address-range", a.IsNotInList = "is-not-in-list", a.IsNotNull = "is-not-null", a.IsNotRegexMatch = "is-not-regex-match", a.IsNotToday = "is-not-today", a.IsNumber = "is-number", a.IsNumeric = "is-numeric", a.IsOddNumber = "is-odd-number", a.IsPassportNumber = "is-passport-number", a.IsPhoneNumber = "is-phone-number", a.IsPort = "is-port", a.IsPositiveNumber = "is-positive-number", a.IsPostalCode = "is-postal-code", a.IsProvince = "is-province", a.IsRGBColor = "is-rgb-color", a.IsRegexMatch = "is-regex-match", a.IsRequired = "is-required", a.IsSemanticVersion = "is-semantic-version", a.IsSlug = "is-slug", a.IsSSN = "is-ssn", a.IsState = "is-state", a.IsStreetAddress = "is-street-address", a.IsString = "is-string", a.IsStrongPassword = "is-strong-password", a.IsTags = "is-tags", a.IsTaxIDNumber = "is-tax-id-number", a.IsThisMonth = "is-this-month", a.IsThisQuarter = "is-this-quarter", a.IsThisWeek = "is-this-week", a.IsThisWeekend = "is-this-weekend", a.IsThisYear = "is-this-year", a.IsTime = "is-time", a.IsTimeOfDay = "is-time-of-day", a.IsTimeRange = "is-time-range", a.IsToday = "is-today", a.IsURL = "is-url", a.IsUUID = "is-uuid", a.IsUppercase = "is-uppercase", a.IsUsernameAvailable = "is-username-available", a.IsValidStreetAddress = "is-valid-street-address", a.IsVATIDNumber = "is-vat-id-number", a.IsWeekday = "is-weekday", a.IsWeekend = "is-weekend", a.IsYear = "is-year", a))(S2 || {});
var p2 = ((a) => (a.IsAuthenticated = "is-authenticated", a.IsNotAuthenticated = "is-not-authenticated", a.IsUsernameAvailable = "is-username-available", a.PasswordMismatch = "password-mismatch", a))(p2 || {});
var b2 = ((a) => (a[a.IsHSLColor = "is-hsl-color"] = "IsHSLColor", a[a.IsHexColor = "is-hex-color"] = "IsHexColor", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsRGBColor = "is-rgb-color"] = "IsRGBColor", a[a.IsString = "is-string"] = "IsString", a))(b2 || {});
var v2 = ((a) => (a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsCurrency = "is-currency"] = "IsCurrency", a[a.IsDecimal = "is-decimal"] = "IsDecimal", a[a.IsDivisibleBy = "is-divisible-by"] = "IsDivisibleBy", a[a.IsEvenNumber = "is-even-number"] = "IsEvenNumber", a[a.IsFloat = "is-float"] = "IsFloat", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsInteger = "is-integer"] = "IsInteger", a[a.IsISO8601 = "is-iso-8601"] = "IsISO8601", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsNegativeNumber = "is-negative-number"] = "IsNegativeNumber", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsOddNumber = "is-odd-number"] = "IsOddNumber", a[a.IsPositiveNumber = "is-positive-number"] = "IsPositiveNumber", a))(v2 || {});
var _2 = ((a) => (a[a.IsBitcoinAddress = "is-bitcoin-address"] = "IsBitcoinAddress", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(_2 || {});
var B2 = ((a) => (a[a.IsEthereumAddress = "is-ethereum-address"] = "IsEthereumAddress", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(B2 || {});
var y2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsJSON = "is-json"] = "IsJSON", a[a.IsLanguage = "is-language"] = "IsLanguage", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(y2 || {});
var D2 = ((a) => (a[a.IsAlpha = "is-alpha"] = "IsAlpha", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(D2 || {});
var N2 = ((a) => (a[a.IsAlpha = "is-alpha"] = "IsAlpha", a[a.IsCountry = "is-country"] = "IsCountry", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(N2 || {});
var U2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsFloat = "is-float"] = "IsFloat", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumeric = "is-numeric"] = "IsNumeric", a))(U2 || {});
var k2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsFloat = "is-float"] = "IsFloat", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumeric = "is-numeric"] = "IsNumeric", a))(k2 || {});
var F2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsPostalCode = "is-postal-code"] = "IsPostalCode", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(F2 || {});
var M2 = ((a) => (a[a.IsAlpha = "is-alpha"] = "IsAlpha", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsProvince = "is-province"] = "IsProvince", a[a.IsString = "is-string"] = "IsString", a))(M2 || {});
var P2 = ((a) => (a[a.IsAlpha = "is-alpha"] = "IsAlpha", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsState = "is-state"] = "IsState", a[a.IsString = "is-string"] = "IsString", a))(P2 || {});
var L2 = ((a) => (a[a.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a[a.IsStreetAddress = "is-street-address"] = "IsStreetAddress", a))(L2 || {});
var z2 = ((a) => (a[a.IsAirport = "is-airport"] = "IsAirport", a[a.IsAlpha = "is-alpha"] = "IsAlpha", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(z2 || {});
var R2 = ((a) => (a[a.IsAlgorithmHash = "is-algorithm-hash"] = "IsAlgorithmHash", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(R2 || {});
var q2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", a[a.IsString = "is-string"] = "IsString", a))(q2 || {});
var G2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a[a.IsUUID = "is-uuid"] = "IsUUID", a))(G2 || {});
var K2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsMD5 = "is-md5"] = "IsMD5", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(K2 || {});
var O2 = ((a) => (a[a.IsBoolean = "is-boolean"] = "IsBoolean", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(O2 || {});
var w2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsDate = "is-date"] = "IsDate", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotDate = "is-not-date"] = "IsNotDate", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNotToday = "is-not-today"] = "IsNotToday", a[a.IsThisWeek = "is-this-week"] = "IsThisWeek", a[a.IsThisMonth = "is-this-month"] = "IsThisMonth", a[a.IsThisQuarter = "is-this-quarter"] = "IsThisQuarter", a[a.IsThisYear = "is-this-year"] = "IsThisYear", a[a.IsToday = "is-today"] = "IsToday", a[a.IsWeekend = "is-weekend"] = "IsWeekend", a))(w2 || {});
var H2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsDate = "is-date"] = "IsDate", a[a.IsDateRange = "is-date-range"] = "IsDateRange", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(H2 || {});
var x2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsDate = "is-date"] = "IsDate", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotDate = "is-not-date"] = "IsNotDate", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNotToday = "is-not-today"] = "IsNotToday", a[a.IsThisWeek = "is-this-week"] = "IsThisWeek", a[a.IsThisMonth = "is-this-month"] = "IsThisMonth", a[a.IsThisQuarter = "is-this-quarter"] = "IsThisQuarter", a[a.IsThisYear = "is-this-year"] = "IsThisYear", a[a.IsToday = "is-today"] = "IsToday", a[a.IsWeekend = "is-weekend"] = "IsWeekend", a))(x2 || {});
var V2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsDayOfMonth = "is-day-of-month"] = "IsDayOfMonth", a[a.IsEvenNumber = "is-even-number"] = "IsEvenNumber", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsInteger = "is-integer"] = "IsInteger", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsOddNumber = "is-odd-number"] = "IsOddNumber", a[a.IsToday = "is-today"] = "IsToday", a[a.IsWeekday = "is-weekday"] = "IsWeekday", a[a.IsWeekend = "is-weekend"] = "IsWeekend", a))(V2 || {});
var W2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsEvenNumber = "is-even-number"] = "IsEvenNumber", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsInteger = "is-integer"] = "IsInteger", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsMonth = "is-month"] = "IsMonth", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsOddNumber = "is-odd-number"] = "IsOddNumber", a[a.IsThisMonth = "is-this-month"] = "IsThisMonth", a))(W2 || {});
var j2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsTime = "is-time"] = "IsTime", a))(j2 || {});
var Z2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsTime = "is-time"] = "IsTime", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsTimeRange = "is-time-range"] = "IsTimeRange", a))(Z2 || {});
var Y2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsTimeOfDay = "is-time-of-day"] = "IsTimeOfDay", a[a.IsTimeRange = "is-time-range"] = "IsTimeRange", a))(Y2 || {});
var J2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsEvenNumber = "is-even-number"] = "IsEvenNumber", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsOddNumber = "is-odd-number"] = "IsOddNumber", a[a.IsWeekday = "is-weekday"] = "IsWeekday", a[a.IsWeekend = "is-weekend"] = "IsWeekend", a))(J2 || {});
var Q2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsEvenNumber = "is-even-number"] = "IsEvenNumber", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsInteger = "is-integer"] = "IsInteger", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsOddNumber = "is-odd-number"] = "IsOddNumber", a[a.IsThisYear = "is-this-year"] = "IsThisYear", a[a.IsYear = "is-year"] = "IsYear", a))(Q2 || {});
var $2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsHexadecimal = "is-hexadecimal"] = "IsHexadecimal", a[a.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", a[a.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", a[a.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", a[a.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", a[a.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))($2 || {});
var X2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsJSON = "is-json"] = "IsJSON", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(X2 || {});
var aa2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsMarkdown = "is-markdown"] = "IsMarkdown", a[a.IsString = "is-string"] = "IsString", a))(aa2 || {});
var ea = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(ea || {});
var ia2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(ia2 || {});
var na2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsDataURI = "is-data-uri"] = "IsDataURI", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(na2 || {});
var ua2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsDomainName = "is-domain-name"] = "IsDomainName", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(ua2 || {});
var sa2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEmailAddress = "is-email-address"] = "IsEmailAddress", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(sa2 || {});
var ta2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsIPAddress = "is-ip-address"] = "IsIPAddress", a[a.IsInIPAddressRange = "is-in-ip-address-range"] = "IsInIPAddressRange", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(ta2 || {});
var oa2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsIPAddressRange = "is-ip-address-range"] = "IsIPAddressRange", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(oa2 || {});
var ra2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsInteger = "is-integer"] = "IsInteger", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a))(ra2 || {});
var ma2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsMACAddress = "is-mac-address"] = "IsMACAddress", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(ma2 || {});
var la2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsMagnetURI = "is-magnet-uri"] = "IsMagnetURI", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(la2 || {});
var da2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsMimeType = "is-mime-type"] = "IsMimeType", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(da2 || {});
var Aa2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a[a.IsSlug = "is-slug"] = "IsSlug", a))(Aa2 || {});
var ca2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a[a.IsURL = "is-url"] = "IsURL", a))(ca2 || {});
var ga2 = ((a) => (a[a.IsAfter = "is-after"] = "IsAfter", a[a.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", a[a.IsBefore = "is-before"] = "IsBefore", a[a.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", a[a.IsBetween = "is-between"] = "IsBetween", a[a.IsDecimal = "is-decimal"] = "IsDecimal", a[a.IsDivisibleBy = "is-divisible-by"] = "IsDivisibleBy", a[a.IsEAN = "is-ean"] = "IsEAN", a[a.IsEIN = "is-ein"] = "IsEIN", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsEvenNumber = "is-even-number"] = "IsEvenNumber", a[a.IsFloat = "is-float"] = "IsFloat", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsInt = "is-integer"] = "IsInt", a[a.IsISBN = "is-isbn"] = "IsISBN", a[a.IsISMN = "is-ismn"] = "IsISMN", a[a.IsISSN = "is-issn"] = "IsISSN", a[a.IsLatitude = "is-latitude"] = "IsLatitude", a[a.IsLongitude = "is-longitude"] = "IsLongitude", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsMACAddress = "is-mac-address"] = "IsMACAddress", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsNegativeNumber = "is-negative-number"] = "IsNegativeNumber", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsOddNumber = "is-odd-number"] = "IsOddNumber", a[a.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", a[a.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", a[a.IsPort = "is-port"] = "IsPort", a[a.IsPositiveNumber = "is-positive-number"] = "IsPositiveNumber", a[a.IsPostalCode = "is-postal-code"] = "IsPostalCode", a[a.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", a[a.IsSSN = "is-ssn"] = "IsSSN", a[a.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", a[a.IsUUID = "is-uuid"] = "IsUUID", a[a.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", a))(ga2 || {});
var Ta2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsFloat = "is-float"] = "IsFloat", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsNumeric = "is-numeric"] = "IsNumeric", a))(Ta2 || {});
var Ca2 = ((a) => (a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInteger = "is-integer"] = "IsInteger", a[a.IsGreaterThan = "greater-than"] = "IsGreaterThan", a[a.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", a[a.IsLessThan = "less-than"] = "IsLessThan", a[a.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsNumeric = "is-numeric"] = "IsNumeric", a))(Ca2 || {});
var Ea2 = ((a) => (a[a.IsCreditCard = "is-credit-card"] = "IsCreditCard", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", a[a.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", a[a.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", a[a.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", a[a.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", a[a.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", a))(Ea2 || {});
var fa2 = ((a) => (a[a.isEmailAddress = "is-email-address"] = "isEmailAddress", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", a[a.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", a[a.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", a[a.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", a[a.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", a[a.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", a))(fa2 || {});
var Ia2 = ((a) => (a[a.IsLicensePlateNumber = "is-license-plate-number"] = "IsLicensePlateNumber", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", a[a.IsString = "is-string"] = "IsString", a[a.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", a))(Ia2 || {});
var ha2 = ((a) => (a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", a[a.IsString = "is-string"] = "IsString", a[a.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", a))(ha2 || {});
var Sa2 = ((a) => (a[a.IsComplexEnough = "is-complex-enough"] = "IsComplexEnough", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", a[a.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", a[a.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", a[a.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", a[a.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", a[a.IsStrongPassword = "is-strong-password"] = "IsStrongPassword", a[a.IsString = "is-string"] = "IsString", a[a.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", a))(Sa2 || {});
var pa2 = ((a) => (a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", a[a.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", a))(pa2 || {});
var ba2 = ((a) => (a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsSSN = "is-ssn"] = "IsSSN", a[a.IsString = "is-string"] = "IsString", a[a.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", a))(ba2 || {});
var va2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsBIC = "is-bic"] = "IsBIC", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(va2 || {});
var _a2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEAN = "is-ean"] = "IsEAN", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(_a2 || {});
var Ba2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEIN = "is-ein"] = "IsEIN", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(Ba2 || {});
var ya2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsIBAN = "is-iban"] = "IsIBAN", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(ya2 || {});
var Da2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsISBN = "is-isbn"] = "IsISBN", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(Da2 || {});
var Na2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsISIN = "is-isin"] = "IsISIN", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(Na2 || {});
var Ua2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsISMN = "is-ismn"] = "IsISMN", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(Ua2 || {});
var ka2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsISSN = "is-issn"] = "IsISSN", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a))(ka2 || {});
var Fa2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a[a.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", a))(Fa2 || {});
var Ma2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsNotEqual = "is-not-equal"] = "IsNotEqual", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsString = "is-string"] = "IsString", a[a.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", a))(Ma2 || {});
var Pa2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.HasNumberCount = "has-number-count"] = "HasNumberCount", a[a.HasLowercaseCount = "has-lowercase-count"] = "HasLowercaseCount", a[a.HasLetterCount = "has-letter-count"] = "HasLetterCount", a[a.HasSpacesCount = "has-spaces-count"] = "HasSpacesCount", a[a.HasSymbolCount = "has-symbol-count"] = "HasSymbolCount", a[a.HasUppercaseCount = "has-uppercase-count"] = "HasUppercaseCount", a[a.IsAlpha = "is-alpha"] = "IsAlpha", a[a.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", a[a.IsAscii = "is-ascii"] = "IsAscii", a[a.IsBase64 = "is-base-64"] = "IsBase64", a[a.IsColor = "is-color"] = "IsColor", a[a.IsComplexEnough = "is-complex-enough"] = "IsComplexEnough", a[a.IsCreditCard = "is-credit-card"] = "IsCreditCard", a[a.IsDataURI = "is-data-uri"] = "IsDataURI", a[a.IsDomainName = "is-domain-name"] = "IsDomainName", a[a.IsEmailAddress = "is-email-address"] = "IsEmailAddress", a[a.IsEthereumAddress = "is-ethereum-address"] = "IsEthereumAddress", a[a.IsEAN = "is-ean"] = "IsEAN", a[a.IsEIN = "is-ein"] = "IsEIN", a[a.IsEqual = "is-equal"] = "IsEqual", a[a.IsIBAN = "is-iban"] = "IsIBAN", a[a.IsHSLColor = "is-hsl-color"] = "IsHSLColor", a[a.IsHexColor = "is-hex-color"] = "IsHexColor", a[a.IsHexadecimal = "is-hexadecimal"] = "IsHexadecimal", a[a.IsIdentityCardCode = "is-identity-card-code"] = "IsIdentityCardCode", a[a.IsIMEI = "is-imei"] = "IsIMEI", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsIPAddress = "is-ip-address"] = "IsIPAddress", a[a.IsInIPAddressRange = "is-in-ip-address-range"] = "IsInIPAddressRange", a[a.IsISBN = "is-isbn"] = "IsISBN", a[a.IsISIN = "is-isin"] = "IsISIN", a[a.IsISMN = "is-ismn"] = "IsISMN", a[a.IsISRC = "is-isrc"] = "IsISRC", a[a.IsISSN = "is-issn"] = "IsISSN", a[a.IsLanguage = "is-language"] = "IsLanguage", a[a.IsLatitude = "is-latitude"] = "IsLatitude", a[a.IsLongitude = "is-longitude"] = "IsLongitude", a[a.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", a[a.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", a[a.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", a[a.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", a[a.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", a[a.IsLicensePlateNumber = "is-license-plate-number"] = "IsLicensePlateNumber", a[a.IsLowercase = "is-lowercase"] = "IsLowercase", a[a.IsOctal = "is-octal"] = "IsOctal", a[a.IsMACAddress = "is-mac-address"] = "IsMACAddress", a[a.IsMD5 = "is-md5"] = "IsMD5", a[a.IsMagnetURI = "is-magnet-uri"] = "IsMagnetURI", a[a.IsMarkdown = "is-markdown"] = "IsMarkdown", a[a.IsMimeType = "is-mime-type"] = "IsMimeType", a[a.IsMonth = "is-month"] = "IsMonth", a[a.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNotNull = "is-not-null"] = "IsNotNull", a[a.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", a[a.IsNumber = "is-number"] = "IsNumber", a[a.IsNumeric = "is-numeric"] = "IsNumeric", a[a.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", a[a.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", a[a.IsPort = "is-port"] = "IsPort", a[a.IsPostalCode = "is-postal-code"] = "IsPostalCode", a[a.IsProvince = "is-province"] = "IsProvince", a[a.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", a[a.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", a[a.IsSlug = "is-slug"] = "IsSlug", a[a.IsSSN = "is-ssn"] = "IsSSN", a[a.IsState = "is-state"] = "IsState", a[a.IsStreetAddress = "is-street-address"] = "IsStreetAddress", a[a.IsString = "is-string"] = "IsString", a[a.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", a[a.IsURL = "is-url"] = "IsURL", a[a.IsUUID = "is-uuid"] = "IsUUID", a[a.IsUppercase = "is-uppercase"] = "IsUppercase", a[a.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", a[a.IsWeekday = "is-weekday"] = "IsWeekday", a[a.IsWeekend = "is-weekend"] = "IsWeekend", a[a.IsYear = "is-year"] = "IsYear", a))(Pa2 || {});
var La2 = ((a) => (a[a.Contains = "contains"] = "Contains", a[a.IsAlpha = "is-alpha"] = "IsAlpha", a[a.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", a[a.IsInList = "is-in-list"] = "IsInList", a[a.IsMarkdown = "is-markdown"] = "IsMarkdown", a[a.IsNotInList = "is-not-in-list"] = "IsNotInList", a[a.IsNumeric = "is-numeric"] = "IsNumeric", a[a.IsLowercase = "is-lowercase"] = "IsLowercase", a[a.IsString = "is-string"] = "IsString", a[a.IsUppercase = "is-uppercase"] = "IsUppercase", a))(La2 || {});
var za2 = ((a) => (a.InvalidCharacters = "invalid-characters", a.InvalidPattern = "invalid-pattern", a.NotComplexEnough = "not-complex-enough", a.NotUnique = "not-unique", a.NotValidEmail = "not-valid-email", a.TooLong = "too-long", a.TooShort = "too-short", a.Required = "required", a))(za2 || {});
var Ra2 = ((a) => (a[a.Allowed = 0] = "Allowed", a[a.Blocked = 1] = "Blocked", a))(Ra2 || {});
var qa2 = ((a) => (a.Canceled = "Canceled", a.Completed = "Completed", a.Created = "Created", a.Faulted = "Faulted", a.Queued = "Queued", a.Running = "Running", a.Waiting = "Waiting", a))(qa2 || {});
var Ga2 = ((a) => (a.Archived = "ARCHIVED", a.Compromised = "COMPROMISED", a.Confirmed = "CONFIRMED", a.ForcePasswordChange = "FORCE_CHANGE_PASSWORD", a.ResetRequired = "RESET_REQUIRED", a.Unconfirmed = "UNCONFIRMED", a.Unknown = "UNKNOWN", a))(Ga2 || {});
var Ka2 = ((a) => (a.Owner = "Owner", a.Admin = "Admin", a.User = "User", a.Visitor = "Visitor", a))(Ka2 || {});
var Oa2 = ((a) => (a.RequiresPaymentMethod = "requires_payment_method", a.RequiresConfirmation = "requires_confirmation", a.RequiresAction = "requires_action", a.Processing = "processing", a.RequiresCapture = "requires_capture", a.Canceled = "canceled", a.Succeeded = "succeeded", a))(Oa2 || {});
var wa2 = ((a) => (a.Incomplete = "incomplete", a.IncompleteExpired = "incomplete_expired", a.Trialing = "trialing", a.Active = "active", a.PastDue = "past_due", a.Canceled = "canceled", a.Unpaid = "unpaid", a))(wa2 || {});
var Ha2 = ((a) => (a.Monthly = "monthly", a.Quarterly = "quarterly", a.Yearly = "yearly", a.Lifetime = "lifetime", a))(Ha2 || {});
var xa2 = ((a) => (a.Delivered = "delivered", a.Read = "read", a.Sending = "sending", a.Sent = "sent", a))(xa2 || {});
var Va2 = ((a) => (a.Audio = "audio", a.File = "file", a.Image = "image", a.Text = "text", a.Video = "video", a))(Va2 || {});
var Wa2 = ((a) => (a.Audio = "audio", a.File = "file", a.Image = "image", a.Video = "video", a))(Wa2 || {});
var ja2 = ((a) => (a.Angry = "angry", a.Laugh = "laugh", a.Like = "like", a.Love = "love", a.Sad = "sad", a.Wow = "wow", a.Wink = "wink", a.Yay = "yay", a))(ja2 || {});
var Za2 = ((a) => (a.Email = "email", a.PhoneNumber = "phone_number", a))(Za2 || {});
var Ya2 = ((a) => (a.Analytics = "analytics", a.Critical = "critical", a.Debug = "debug", a.Exception = "exception", a.Http = "http", a.Info = "info", a.Warning = "warning", a))(Ya2 || {});
var Ja2 = ((a) => (a.Delete = "delete", a.Get = "get", a.Head = "head", a.Patch = "patch", a.Post = "post", a.Put = "put", a))(Ja2 || {});
var Qa2 = ((a) => (a[a.CONTINUE = 100] = "CONTINUE", a[a.SWITCHING_PROTOCOLS = 101] = "SWITCHING_PROTOCOLS", a[a.PROCESSING = 102] = "PROCESSING", a[a.OK = 200] = "OK", a[a.CREATED = 201] = "CREATED", a[a.ACCEPTED = 202] = "ACCEPTED", a[a.NON_AUTHORITATIVE_INFORMATION = 203] = "NON_AUTHORITATIVE_INFORMATION", a[a.NO_CONTENT = 204] = "NO_CONTENT", a[a.RESET_CONTENT = 205] = "RESET_CONTENT", a[a.PARTIAL_CONTENT = 206] = "PARTIAL_CONTENT", a[a.MULTI_STATUS = 207] = "MULTI_STATUS", a[a.ALREADY_REPORTED = 208] = "ALREADY_REPORTED", a[a.IM_USED = 226] = "IM_USED", a[a.MULTIPLE_CHOICES = 300] = "MULTIPLE_CHOICES", a[a.MOVED_PERMANENTLY = 301] = "MOVED_PERMANENTLY", a[a.FOUND = 302] = "FOUND", a[a.SEE_OTHER = 303] = "SEE_OTHER", a[a.NOT_MODIFIED = 304] = "NOT_MODIFIED", a[a.USE_PROXY = 305] = "USE_PROXY", a[a.SWITCH_PROXY = 306] = "SWITCH_PROXY", a[a.TEMPORARY_REDIRECT = 307] = "TEMPORARY_REDIRECT", a[a.PERMANENT_REDIRECT = 308] = "PERMANENT_REDIRECT", a[a.BAD_REQUEST = 400] = "BAD_REQUEST", a[a.UNAUTHORIZED = 401] = "UNAUTHORIZED", a[a.PAYMENT_REQUIRED = 402] = "PAYMENT_REQUIRED", a[a.FORBIDDEN = 403] = "FORBIDDEN", a[a.NOT_FOUND = 404] = "NOT_FOUND", a[a.METHOD_NOT_ALLOWED = 405] = "METHOD_NOT_ALLOWED", a[a.NOT_ACCEPTABLE = 406] = "NOT_ACCEPTABLE", a[a.PROXY_AUTHENTICATION_REQUIRED = 407] = "PROXY_AUTHENTICATION_REQUIRED", a[a.REQUEST_TIMEOUT = 408] = "REQUEST_TIMEOUT", a[a.CONFLICT = 409] = "CONFLICT", a[a.GONE = 410] = "GONE", a[a.LENGTH_REQUIRED = 411] = "LENGTH_REQUIRED", a[a.PRECONDITION_FAILED = 412] = "PRECONDITION_FAILED", a[a.PAYLOAD_TOO_LARGE = 413] = "PAYLOAD_TOO_LARGE", a[a.URI_TOO_LONG = 414] = "URI_TOO_LONG", a[a.UNSUPPORTED_MEDIA_TYPE = 415] = "UNSUPPORTED_MEDIA_TYPE", a[a.RANGE_NOT_SATISFIABLE = 416] = "RANGE_NOT_SATISFIABLE", a[a.EXPECTATION_FAILED = 417] = "EXPECTATION_FAILED", a[a.I_AM_A_TEAPOT = 418] = "I_AM_A_TEAPOT", a[a.MISDIRECTED_REQUEST = 421] = "MISDIRECTED_REQUEST", a[a.UNPROCESSABLE_ENTITY = 422] = "UNPROCESSABLE_ENTITY", a[a.LOCKED = 423] = "LOCKED", a[a.FAILED_DEPENDENCY = 424] = "FAILED_DEPENDENCY", a[a.TOO_EARLY = 425] = "TOO_EARLY", a[a.UPGRADE_REQUIRED = 426] = "UPGRADE_REQUIRED", a[a.PRECONDITION_REQUIRED = 428] = "PRECONDITION_REQUIRED", a[a.TOO_MANY_REQUESTS = 429] = "TOO_MANY_REQUESTS", a[a.REQUEST_HEADER_FIELDS_TOO_LARGE = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE", a[a.UNAVAILABLE_FOR_LEGAL_REASONS = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS", a[a.INTERNAL_SERVER_ERROR = 500] = "INTERNAL_SERVER_ERROR", a[a.NOT_IMPLEMENTED = 501] = "NOT_IMPLEMENTED", a[a.BAD_GATEWAY = 502] = "BAD_GATEWAY", a[a.SERVICE_UNAVAILABLE = 503] = "SERVICE_UNAVAILABLE", a[a.GATEWAY_TIMEOUT = 504] = "GATEWAY_TIMEOUT", a[a.HTTP_VERSION_NOT_SUPPORTED = 505] = "HTTP_VERSION_NOT_SUPPORTED", a[a.VARIANT_ALSO_NEGOTIATES = 506] = "VARIANT_ALSO_NEGOTIATES", a[a.INSUFFICIENT_STORAGE = 507] = "INSUFFICIENT_STORAGE", a[a.LOOP_DETECTED = 508] = "LOOP_DETECTED", a[a.BANDWIDTH_LIMIT_EXCEEDED = 509] = "BANDWIDTH_LIMIT_EXCEEDED", a[a.NOT_EXTENDED = 510] = "NOT_EXTENDED", a[a.NETWORK_AUTHENTICATION_REQUIRED = 511] = "NETWORK_AUTHENTICATION_REQUIRED", a))(Qa2 || {});
var $a2 = ((a) => (a.Afghanistan = "AF", a.Albania = "AL", a.Algeria = "DZ", a.AmericanSamoa = "AS", a.Andorra = "AD", a.Angola = "AO", a.Anguilla = "AI", a.Antarctica = "AQ", a.AntiguaAndBarbuda = "AG", a.Argentina = "AR", a.Armenia = "AM", a.Aruba = "AW", a.Australia = "AU", a.Austria = "AT", a.Azerbaijan = "AZ", a.Bahamas = "BS", a.Bahrain = "BH", a.Bangladesh = "BD", a.Barbados = "BB", a.Belarus = "BY", a.Belgium = "BE", a.Belize = "BZ", a.Benin = "BJ", a.Bermuda = "BM", a.Bhutan = "BT", a.Bolivia = "BO", a.BosniaAndHerzegovina = "BA", a.Botswana = "BW", a.BouvetIsland = "BV", a.Brazil = "BR", a.BritishIndianOceanTerritory = "IO", a.Brunei = "BN", a.Bulgaria = "BG", a.BurkinaFaso = "BF", a.Burundi = "BI", a.Cambodia = "KH", a.Cameroon = "CM", a.Canada = "CA", a.CapeVerde = "CV", a.CaymanIslands = "KY", a.CentralAfricanRepublic = "CF", a.Chad = "TD", a.Chile = "CL", a.China = "CN", a.ChristmasIsland = "CX", a.CocosKeelingIslands = "CC", a.Colombia = "CO", a.Comoros = "KM", a.Congo = "CG", a.CongoTheDemocraticRepublicOfThe = "CD", a.CookIslands = "CK", a.CostaRica = "CR", a.CoteDIvoire = "CI", a.Croatia = "HR", a.Cuba = "CU", a.Cyprus = "CY", a.CzechRepublic = "CZ", a.Denmark = "DK", a.Djibouti = "DJ", a.Dominica = "DM", a.DominicanRepublic = "DO", a.Ecuador = "EC", a.Egypt = "EG", a.ElSalvador = "SV", a.EquatorialGuinea = "GQ", a.Eritrea = "ER", a.Estonia = "EE", a.Ethiopia = "ET", a.FalklandIslands = "FK", a.FaroeIslands = "FO", a.Fiji = "FJ", a.Finland = "FI", a.France = "FR", a.FrenchGuiana = "GF", a.FrenchPolynesia = "PF", a.FrenchSouthernTerritories = "TF", a.Gabon = "GA", a.Gambia = "GM", a.Georgia = "GE", a.Germany = "DE", a.Ghana = "GH", a.Gibraltar = "GI", a.Greece = "GR", a.Greenland = "GL", a.Grenada = "GD", a.Guadeloupe = "GP", a.Guam = "GU", a.Guatemala = "GT", a.Guernsey = "GG", a.Guinea = "GN", a.GuineaBissau = "GW", a.Guyana = "GY", a.Haiti = "HT", a.HeardIslandMcdonaldIslands = "HM", a.HolySeeVaticanCityState = "VA", a.Honduras = "HN", a.HongKong = "HK", a.Hungary = "HU", a.Iceland = "IS", a.India = "IN", a.Indonesia = "ID", a.Iran = "IR", a.Iraq = "IQ", a.Ireland = "IE", a.IsleOfMan = "IM", a.Israel = "IL", a.Italy = "IT", a.Jamaica = "JM", a.Japan = "JP", a.Jersey = "JE", a.Jordan = "JO", a.Kazakhstan = "KZ", a.Kenya = "KE", a.Kiribati = "KI", a.Kuwait = "KW", a.Kyrgyzstan = "KG", a.Laos = "LA", a.Latvia = "LV", a.Lebanon = "LB", a.Lesotho = "LS", a.Liberia = "LR", a.Libya = "LY", a.Liechtenstein = "LI", a.Lithuania = "LT", a.Luxembourg = "LU", a.Macau = "MO", a.Madagascar = "MG", a.Malawi = "MW", a.Malaysia = "MY", a.Maldives = "MV", a.Mali = "ML", a.Malta = "MT", a.MarshallIslands = "MH", a.Martinique = "MQ", a.Mauritania = "MR", a.Mauritius = "MU", a.Mayotte = "YT", a.Mexico = "MX", a.MicronesiaFederatedStatesOf = "FM", a.Moldova = "MD", a.Monaco = "MC", a.Mongolia = "MN", a.Montenegro = "ME", a.Montserrat = "MS", a.Morocco = "MA", a.Mozambique = "MZ", a.Myanmar = "MM", a.Namibia = "NA", a.Nauru = "NR", a.Nepal = "NP", a.Netherlands = "NL", a.NetherlandsAntilles = "AN", a.NewCaledonia = "NC", a.NewZealand = "NZ", a.NorthKorea = "KP", a.Nicaragua = "NI", a.Niger = "NE", a.Nigeria = "NG", a.Niue = "NU", a.NorfolkIsland = "NF", a.NorthMacedonia = "MK", a.NorthernMarianaIslands = "MP", a.Norway = "NO", a.Oman = "OM", a.Pakistan = "PK", a.Palau = "PW", a.PalestinianTerritoryOccupied = "PS", a.Panama = "PA", a.PapuaNewGuinea = "PG", a.Paraguay = "PY", a.Peru = "PE", a.Philippines = "PH", a.Pitcairn = "PN", a.Poland = "PL", a.Portugal = "PT", a.PuertoRico = "PR", a.Qatar = "QA", a.Reunion = "RE", a.Romania = "RO", a.RussianFederation = "RU", a.Rwanda = "RW", a.SaintBarthelemy = "BL", a.SaintHelena = "SH", a.SaintKittsAndNevis = "KN", a.SaintLucia = "LC", a.SaintMartin = "MF", a.SaintPierreAndMiquelon = "PM", a.SaintVincentAndTheGrenadines = "VC", a.Samoa = "WS", a.SanMarino = "SM", a.SaoTomeAndPrincipe = "ST", a.SaudiArabia = "SA", a.Senegal = "SN", a.Serbia = "RS", a.SerbiaAndMontenegro = "CS", a.Seychelles = "SC", a.SierraLeone = "SL", a.Singapore = "SG", a.Slovakia = "SK", a.Slovenia = "SI", a.SolomonIslands = "SB", a.Somalia = "SO", a.SouthAfrica = "ZA", a.SouthGeorgiaAndTheSouthSandwichIslands = "GS", a.SouthKorea = "KR", a.Spain = "ES", a.SriLanka = "LK", a.Sudan = "SD", a.Suriname = "SR", a.SvalbardAndJanMayen = "SJ", a.Swaziland = "SZ", a.Sweden = "SE", a.Switzerland = "CH", a.Syria = "SY", a.Taiwan = "TW", a.Tajikistan = "TJ", a.Tanzania = "TZ", a.Thailand = "TH", a.TimorLeste = "TL", a.Togo = "TG", a.Tokelau = "TK", a.Tonga = "TO", a.TrinidadAndTobago = "TT", a.Tunisia = "TN", a.Turkey = "TR", a.Turkmenistan = "TM", a.TurksAndCaicosIslands = "TC", a.Tuvalu = "TV", a.Uganda = "UG", a.Ukraine = "UA", a.UnitedArabEmirates = "AE", a.UnitedKingdom = "GB", a.UnitedStates = "US", a.UnitedStatesMinorOutlyingIslands = "UM", a.Uruguay = "UY", a.Uzbekistan = "UZ", a.Vanuatu = "VU", a.Venezuela = "VE", a.Vietnam = "VN", a.VirginIslandsBritish = "VG", a.VirginIslandsUS = "VI", a.WallisAndFutuna = "WF", a.WesternSahara = "EH", a.Yemen = "YE", a.Zambia = "ZM", a.Zimbabwe = "ZW", a))($a2 || {});
var Xa2 = ((a) => (a.AfghanistanAfghani = "AFN", a.AlbaniaLek = "ALL", a.ArmeniaDram = "AMD", a.AlgeriaDinar = "DZD", a.AmericanSamoaTala = "WST", a.AngolaKwanza = "AOA", a.ArgentinaPeso = "ARS", a.AustraliaDollar = "AUD", a.ArubaFlorin = "AWG", a.AzerbaijanNewManat = "AZN", a.BosniaAndHerzegovinaConvertibleMark = "BAM", a.BahrainDinar = "BHD", a.BarbadosDollar = "BBD", a.BangladeshTaka = "BDT", a.BelgiumFranc = "BGN", a.BermudaDollar = "BMD", a.BruneiDollar = "BND", a.BoliviaBoliviano = "BOB", a.BrazilReal = "BRL", a.BahamasDollar = "BSD", a.BhutanNgultrum = "BTN", a.BotswanaPula = "BWP", a.BelarusRuble = "BYN", a.BelizeDollar = "BZD", a.BulgariaLev = "BGN", a.BurundiFranc = "BIF", a.BritishPound = "GBP", a.CanadaDollar = "CAD", a.CambodiaRiel = "KHR", a.ComorosFranc = "KMF", a.CaymanIslandsDollar = "KYD", a.ChilePeso = "CLP", a.ChinaYuan = "CNY", a.ColombiaPeso = "COP", a.CostaRicaColon = "CRC", a.CroatiaKuna = "HRK", a.CubaConvertiblePeso = "CUC", a.CubaPeso = "CUP", a.CapeVerdeEscudo = "CVE", a.CyprusPound = "CYP", a.CzechRepublicKoruna = "CZK", a.DjiboutiFranc = "DJF", a.DenmarkKrone = "DKK", a.DominicaDollar = "XCD", a.DominicanRepublicPeso = "DOP", a.EastCaribbeanDollar = "XCD", a.EgyptPound = "EGP", a.ElSalvadorColon = "SVC", a.EquatorialGuineaEkwele = "GQE", a.EritreaNakfa = "ERN", a.EstoniaKroon = "EEK", a.EthiopiaBirr = "ETB", a.Euro = "EUR", a.FijiDollar = "FJD", a.FalklandIslandsPound = "FKP", a.GambiaDalasi = "GMD", a.GabonFranc = "GMD", a.GeorgiaLari = "GEL", a.GhanaCedi = "GHS", a.GibraltarPound = "GIP", a.GuatemalaQuetzal = "GTQ", a.GuernseyPound = "GGP", a.GuineaBissauPeso = "GWP", a.GuyanaDollar = "GYD", a.HongKongDollar = "HKD", a.HondurasLempira = "HNL", a.HaitiGourde = "HTG", a.HungaryForint = "HUF", a.IndonesiaRupiah = "IDR", a.IsleOfManPound = "IMP", a.IsraelNewShekel = "ILS", a.IndiaRupee = "INR", a.IraqDinar = "IQD", a.IranRial = "IRR", a.IcelandKrona = "ISK", a.JamaicaDollar = "JMD", a.JapanYen = "JPY", a.JerseyPound = "JEP", a.JordanDinar = "JOD", a.KazakhstanTenge = "KZT", a.KenyaShilling = "KES", a.KyrgyzstanSom = "KGS", a.NorthKoreaWon = "KPW", a.SouthKoreaWon = "KRW", a.KuwaitDinar = "KWD", a.LaosKip = "LAK", a.LebanonPound = "LBP", a.LiberiaDollar = "LRD", a.LesothoLoti = "LSL", a.LibyanDinar = "LYD", a.LithuaniaLitas = "LTL", a.LatviaLats = "LVL", a.LibyaDinar = "LYD", a.MacauPataca = "MOP", a.MaldivesRufiyaa = "MVR", a.MalawiKwacha = "MWK", a.MaltaLira = "MTL", a.MauritiusRupee = "MUR", a.MongoliaTughrik = "MNT", a.MoroccoDirham = "MAD", a.MoldovaLeu = "MDL", a.MozambiqueMetical = "MZN", a.MadagascarAriary = "MGA", a.MacedoniaDenar = "MKD", a.MexicoPeso = "MXN", a.MalaysiaRinggit = "MYR", a.MyanmarKyat = "MMK", a.MicronesiaFederatedStatesDollar = "USD", a.NicaraguaCordoba = "NIO", a.NamibiaDollar = "NAD", a.NetherlandsAntillesGuilder = "ANG", a.NewCaledoniaFranc = "XPF", a.NigeriaNaira = "NGN", a.NicaraguaCordobaOro = "NIO", a.NigerCFAFranc = "XOF", a.NorwayKrone = "NOK", a.NepalRupee = "NPR", a.NewZealandDollar = "NZD", a.OmanRial = "OMR", a.PanamaBalboa = "PAB", a.PeruNuevoSol = "PEN", a.PapuaNewGuineaKina = "PGK", a.PhilippinesPeso = "PHP", a.PakistanRupee = "PKR", a.PeruNuevo = "PEN", a.PolandZloty = "PLN", a.ParaguayGuarani = "PYG", a.QatarRial = "QAR", a.RomaniaNewLeu = "RON", a.SerbiaDinar = "RSD", a.SriLankaRupee = "LKR", a.RussiaRuble = "RUB", a.RwandaFranc = "RWF", a.SaudiArabiaRiyal = "SAR", a.SlovakiaKoruna = "SKK", a.SloveniaTolar = "SIT", a.SolomonIslandsDollar = "SBD", a.SeychellesRupee = "SCR", a.SudanPound = "SDG", a.SwedenKrona = "SEK", a.SingaporeDollar = "SGD", a.SaintHelenaPound = "SHP", a.SierraLeoneLeone = "SLL", a.SomaliaShilling = "SOS", a.SurinameDollar = "SRD", a.SintMaartenPound = "SXD", a.SyriaPound = "SYP", a.SwazilandLilangeni = "SZL", a.SwitzerlandFranc = "CHF", a.ThailandBaht = "THB", a.TajikistanSomoni = "TJS", a.TurkmenistanManat = "TMT", a.TunisiaDinar = "TND", a.TongaPaanga = "TOP", a.TurkeyLira = "TRY", a.TrinidadAndTobagoDollar = "TTD", a.TaiwanNewDollar = "TWD", a.TanzaniaShilling = "TZS", a.UnitedArabEmiratesDirham = "AED", a.UkraineHryvnia = "UAH", a.UgandaShilling = "UGX", a.UnitedKingdomPound = "GBP", a.UnitedStatesDollar = "USD", a.UruguayPeso = "UYU", a.UzbekistanSom = "UZS", a.VenezuelaBolivar = "VEF", a.VietnamDong = "VND", a.VanuatuVatu = "VUV", a.SamoaTala = "WST", a.YemenRial = "YER", a.SouthAfricaRand = "ZAR", a.ZambiaKwacha = "ZMW", a.ZimbabweDollar = "ZWL", a))(Xa2 || {});
var ae2 = ((a) => (a.Bitcoin = "BTC", a.Ethereum = "ETH", a.Litecoin = "LTC", a.Ripple = "XRP", a.Dash = "DASH", a.Zcash = "ZEC", a.Dogecoin = "DOGE", a.Monero = "XMR", a.BitcoinCash = "BCH", a.EOS = "EOS", a.Binance = "BNB", a.Stellar = "XLM", a.Cardano = "ADA", a.IOTA = "IOTA", a.Tezos = "XTZ", a.NEO = "NEO", a.TRON = "TRX", a.EOSClassic = "EOSC", a.Ontology = "ONT", a.VeChain = "VEN", a.QTUM = "QTUM", a.Lisk = "LSK", a.Waves = "WAVES", a.OmiseGO = "OMG", a.Zilliqa = "ZIL", a.BitcoinGold = "BTG", a.Decred = "DCR", a.Stratis = "STRAT", a.Populous = "PPT", a.Augur = "REP", a.Golem = "GNT", a.Siacoin = "SC", a.BasicAttentionToken = "BAT", a.ZCoin = "XZC", a.StratisHedged = "SNT", a.VeChainHedged = "VEN", a.PowerLedger = "POWR", a.WavesHedged = "WAVE", a.ZilliqaHedged = "ZRX", a.BitcoinDiamond = "BCD", a.DigiByte = "DGB", a.DigiByteHedged = "DGB", a.Bytecoin = "BCN", a.BytecoinHedged = "BCN", a))(ae2 || {});
var ee2 = ((a) => (a.Afrikaans = "af", a.Albanian = "sq", a.Amharic = "am", a.Arabic = "ar", a.Armenian = "hy", a.Azerbaijani = "az", a.Bashkir = "ba", a.Basque = "eu", a.Belarusian = "be", a.Bengali = "bn", a.Berber = "ber", a.Bhutani = "dz", a.Bihari = "bh", a.Bislama = "bi", a.Bosnian = "bs", a.Breten = "br", a.Bulgarian = "bg", a.Burmese = "my", a.Cantonese = "yue", a.Catalan = "ca", a.Chinese = "zh", a.Chuvash = "cv", a.Corsican = "co", a.Croatian = "hr", a.Czech = "cs", a.Danish = "da", a.Dari = "prs", a.Divehi = "dv", a.Dutch = "nl", a.English = "en", a.Esperanto = "eo", a.Estonian = "et", a.Faroese = "fo", a.Farsi = "fa", a.Filipino = "fil", a.Finnish = "fi", a.French = "fr", a.Frisian = "fy", a.Galician = "gl", a.Georgian = "ka", a.German = "de", a.Greek = "el", a.Greenlandic = "kl", a.Gujarati = "gu", a.Haitian = "ht", a.Hausa = "ha", a.Hebrew = "he", a.Hindi = "hi", a.Hungarian = "hu", a.Icelandic = "is", a.Igbo = "ig", a.Indonesian = "id", a.Irish = "ga", a.Italian = "it", a.Japanese = "ja", a.Javanese = "jv", a.Kannada = "kn", a.Karelian = "krl", a.Kazakh = "kk", a.Khmer = "km", a.Komi = "kv", a.Konkani = "kok", a.Korean = "ko", a.Kurdish = "ku", a.Kyrgyz = "ky", a.Lao = "lo", a.Latin = "la", a.Latvian = "lv", a.Lithuanian = "lt", a.Luxembourgish = "lb", a.Ossetian = "os", a.Macedonian = "mk", a.Malagasy = "mg", a.Malay = "ms", a.Malayalam = "ml", a.Maltese = "mt", a.Maori = "mi", a.Marathi = "mr", a.Mari = "mhr", a.Mongolian = "mn", a.Montenegrin = "me", a.Nepali = "ne", a.NorthernSotho = "nso", a.Norwegian = "no", a.NorwegianBokmal = "nb", a.NorwegianNynorsk = "nn", a.Oriya = "or", a.Pashto = "ps", a.Persian = "fa", a.Polish = "pl", a.Portuguese = "pt", a.Punjabi = "pa", a.Quechua = "qu", a.Romanian = "ro", a.Russian = "ru", a.Sakha = "sah", a.Sami = "se", a.Samoan = "sm", a.Sanskrit = "sa", a.Scots = "gd", a.Serbian = "sr", a.SerbianCyrillic = "sr-Cyrl", a.Sesotho = "st", a.Shona = "sn", a.Sindhi = "sd", a.Sinhala = "si", a.Slovak = "sk", a.Slovenian = "sl", a.Somali = "so", a.Spanish = "es", a.Sudanese = "su", a.Sutu = "sx", a.Swahili = "sw", a.Swedish = "sv", a.Syriac = "syr", a.Tagalog = "tl", a.Tajik = "tg", a.Tamazight = "tmh", a.Tamil = "ta", a.Tatar = "tt", a.Telugu = "te", a.Thai = "th", a.Tibetan = "bo", a.Tsonga = "ts", a.Tswana = "tn", a.Turkish = "tr", a.Turkmen = "tk", a.Ukrainian = "uk", a.Urdu = "ur", a.Uzbek = "uz", a.Vietnamese = "vi", a.Welsh = "cy", a.Xhosa = "xh", a.Yiddish = "yi", a.Yoruba = "yo", a.Zulu = "zu", a))(ee2 || {});
var ie2 = ((a) => (a.Afrikaans = "af", a.AfrikaansSouthAfrica = "af-ZA", a.Albanian = "sq", a.AlbanianAlbania = "sq-AL", a.Amharic = "am", a.AmharicEthiopia = "am-ET", a.Arabic = "ar", a.ArabicAlgeria = "ar-DZ", a.ArabicBahrain = "ar-BH", a.ArabicEgypt = "ar-EG", a.ArabicIraq = "ar-IQ", a.ArabicJordan = "ar-JO", a.ArabicKuwait = "ar-KW", a.ArabicLebanon = "ar-LB", a.ArabicLibya = "ar-LY", a.ArabicMorocco = "ar-MA", a.ArabicOman = "ar-OM", a.ArabicQatar = "ar-QA", a.ArabicSaudiArabia = "ar-SA", a.ArabicSyria = "ar-SY", a.ArabicTunisia = "ar-TN", a.ArabicUnitedArabEmirates = "ar-AE", a.ArabicYemen = "ar-YE", a.Armenian = "hy", a.ArmenianArmenia = "hy-AM", a.Azerbaijani = "az", a.AzerbaijaniAzerbaijan = "az-AZ", a.AzerbaijaniCyrillicAzerbaijan = "az-Cyrl-AZ", a.Bashkir = "ba", a.Basque = "eu", a.BasqueSpain = "eu-ES", a.Belarusian = "be", a.BelarusianBelarus = "be-BY", a.Bengali = "bn", a.BengaliBangladesh = "bn-BD", a.BengaliIndia = "bn-IN", a.Berber = "ber", a.Bhutani = "dz", a.BhutaniBhutan = "dz-BT", a.Bosnian = "bs", a.BosnianBosniaAndHerzegovina = "bs-BA", a.Breton = "br", a.Bulgarian = "bg", a.BulgarianBosniaAndHerzegovina = "bg-BG", a.BulgarianBulgaria = "bg-BG", a.Burmese = "my", a.BurmeseMyanmar = "my-MM", a.Cantonese = "yue", a.CantoneseHongKong = "yue-HK", a.Catalan = "ca", a.CatalanSpain = "ca-ES", a.Chechen = "ce", a.Cherokee = "chr", a.Chinese = "zh", a.ChineseSimplified = "zh-Hans", a.ChineseSimplifiedChina = "zh-Hans-CN", a.ChineseSimplifiedHongKong = "zh-Hans-HK", a.ChineseSimplifiedMacau = "zh-Hans-MO", a.ChineseSimplifiedSingapore = "zh-Hans-SG", a.ChineseTraditional = "zh-Hant", a.ChineseTraditionalHongKong = "zh-Hant-HK", a.ChineseTraditionalMacau = "zh-Hant-MO", a.ChineseTraditionalSingapore = "zh-Hant-SG", a.ChineseTraditionalTaiwan = "zh-Hant-TW", a.Chuvash = "cv", a.CorsicanFrance = "co-FR", a.Croatian = "hr", a.CroatianBosniaAndHerzegovina = "hr-BA", a.CroatianCroatia = "hr-HR", a.Czech = "cs", a.CzechCzechRepublic = "cs-CZ", a.Danish = "da", a.DanishDenmark = "da-DK", a.Dari = "prs", a.DariAfghanistan = "prs-AF", a.Divehi = "dv", a.DivehiMaldives = "dv-MV", a.Dutch = "nl", a.DutchBelgium = "nl-BE", a.DutchNetherlands = "nl-NL", a.English = "en", a.EnglishAustralia = "en-AU", a.EnglishBelgium = "en-BE", a.EnglishBelize = "en-BZ", a.EnglishCanada = "en-CA", a.EnglishCaribbean = "en-029", a.EnglishIreland = "en-IE", a.EnglishJamaica = "en-JM", a.EnglishNewZealand = "en-NZ", a.EnglishPhilippines = "en-PH", a.EnglishSingapore = "en-SG", a.EnglishSouthAfrica = "en-ZA", a.EnglishTrinidadAndTobago = "en-TT", a.EnglishUnitedKingdom = "en-GB", a.EnglishUnitedStates = "en-US", a.EnglishZimbabwe = "en-ZW", a.Esperanto = "eo", a.Estonian = "et", a.EstonianEstonia = "et-EE", a.Faroese = "fo", a.FaroeseFaroeIslands = "fo-FO", a.Farsi = "fa", a.FarsiIran = "fa-IR", a.Filipino = "fil", a.FilipinoPhilippines = "fil-PH", a.Finnish = "fi", a.FinnishFinland = "fi-FI", a.French = "fr", a.FrenchBelgium = "fr-BE", a.FrenchCanada = "fr-CA", a.FrenchFrance = "fr-FR", a.FrenchLuxembourg = "fr-LU", a.FrenchMonaco = "fr-MC", a.FrenchReunion = "fr-RE", a.FrenchSwitzerland = "fr-CH", a.Frisian = "fy", a.FrisianNetherlands = "fy-NL", a.Galician = "gl", a.GalicianSpain = "gl-ES", a.Georgian = "ka", a.GeorgianGeorgia = "ka-GE", a.German = "de", a.GermanAustria = "de-AT", a.GermanBelgium = "de-BE", a.GermanGermany = "de-DE", a.GermanLiechtenstein = "de-LI", a.GermanLuxembourg = "de-LU", a.GermanSwitzerland = "de-CH", a.Greenlandic = "kl", a.GreenlandicGreenland = "kl-GL", a.Greek = "el", a.GreekGreece = "el-GR", a.Gujarati = "gu", a.GujaratiIndia = "gu-IN", a.Haitian = "ht", a.Hausa = "ha", a.HausaGhana = "ha-GH", a.HausaNiger = "ha-NE", a.HausaNigeria = "ha-NG", a.Hebrew = "he", a.HebrewIsrael = "he-IL", a.Hindi = "hi", a.HindiIndia = "hi-IN", a.Hungarian = "hu", a.HungarianHungary = "hu-HU", a.Icelandic = "is", a.IcelandicIceland = "is-IS", a.Igbo = "ig", a.IgboNigeria = "ig-NG", a.Indonesian = "id", a.IndonesianIndonesia = "id-ID", a.Irish = "ga", a.IrishIreland = "ga-IE", a.Italian = "it", a.ItalianItaly = "it-IT", a.ItalianSwitzerland = "it-CH", a.Japanese = "ja", a.JapaneseJapan = "ja-JP", a.Javanese = "jv", a.Kannada = "kn", a.KannadaIndia = "kn-IN", a.Karelian = "krl", a.Kazakh = "kk", a.KazakhKazakhstan = "kk-KZ", a.Khmer = "km", a.KhmerCambodia = "km-KH", a.KinyarwandaRwanda = "rw-RW", a.Komi = "kv", a.Konkani = "kok", a.KonkaniIndia = "kok-IN", a.Korean = "ko", a.KoreanSouthKorea = "ko-KR", a.Kurdish = "ku", a.KurdishIraq = "ku-IQ", a.KurdishTurkey = "ku-TR", a.Kyrgyz = "ky", a.KyrgyzKyrgyzstan = "ky-KG", a.Lao = "lo", a.LaoLaos = "lo-LA", a.Latin = "la", a.Latvian = "lv", a.LatvianLatvia = "lv-LV", a.Lithuanian = "lt", a.LithuanianLithuania = "lt-LT", a.Luxembourgish = "lb", a.LuxembourgishBelgium = "lb-LU", a.LuxembourgishLuxembourg = "lb-LU", a.Macedonian = "mk", a.MacedonianNorthMacedonia = "mk-MK", a.Malagasy = "mg", a.Malay = "ms", a.MalayBrunei = "ms-BN", a.MalayIndia = "ms-IN", a.MalayMalaysia = "ms-MY", a.MalaySingapore = "ms-SG", a.Malayalam = "ml", a.MalayalamIndia = "ml-IN", a.Maltese = "mt", a.MalteseMalta = "mt-MT", a.Maori = "mi", a.MaoriNewZealand = "mi-NZ", a.Marathi = "mr", a.MarathiIndia = "mr-IN", a.Mari = "chm", a.Mongolian = "mn", a.MongolianMongolia = "mn-MN", a.Montenegrin = "me", a.MontenegrinMontenegro = "me-ME", a.Nepali = "ne", a.NepaliNepal = "ne-NP", a.NorthernSotho = "ns", a.NorthernSothoSouthAfrica = "ns-ZA", a.Norwegian = "nb", a.NorwegianBokmalNorway = "nb-NO", a.NorwegianNynorskNorway = "nn-NO", a.Oriya = "or", a.OriyaIndia = "or-IN", a.Ossetian = "os", a.Pashto = "ps", a.PashtoAfghanistan = "ps-AF", a.Persian = "fa", a.PersianIran = "fa-IR", a.Polish = "pl", a.PolishPoland = "pl-PL", a.Portuguese = "pt", a.PortugueseBrazil = "pt-BR", a.PortuguesePortugal = "pt-PT", a.Punjabi = "pa", a.PunjabiIndia = "pa-IN", a.PunjabiPakistan = "pa-PK", a.Quechua = "qu", a.QuechuaBolivia = "qu-BO", a.QuechuaEcuador = "qu-EC", a.QuechuaPeru = "qu-PE", a.Romanian = "ro", a.RomanianRomania = "ro-RO", a.Russian = "ru", a.RussianKazakhstan = "ru-KZ", a.RussianKyrgyzstan = "ru-KG", a.RussianRussia = "ru-RU", a.RussianUkraine = "ru-UA", a.Sakha = "sah", a.Sanskrit = "sa", a.SanskritIndia = "sa-IN", a.Sami = "se", a.SamiNorway = "se-NO", a.SamiSweden = "se-SE", a.SamiFinland = "se-FI", a.Samoan = "sm", a.SamoanSamoa = "sm-WS", a.Scots = "gd", a.Serbian = "sr", a.SerbianBosniaAndHerzegovina = "sr-BA", a.SerbianSerbiaAndMontenegro = "sr-SP", a.SerbianCyrillic = "sr-SP-Cyrl", a.SerbianCyrillicBosniaAndHerzegovina = "sr-Cyrl-BA", a.SerbianCyrillicSerbiaAndMontenegro = "sr-Cyrl-SP", a.Sesotho = "st", a.SesothoSouthAfrica = "st-ZA", a.Shona = "sn", a.ShonaZimbabwe = "sn-ZW", a.Sindhi = "sd", a.SindhiPakistan = "sd-PK", a.Sinhala = "si", a.SinhalaSriLanka = "si-LK", a.Slovak = "sk", a.SlovakSlovakia = "sk-SK", a.Slovenian = "sl", a.SlovenianSlovenia = "sl-SI", a.Somali = "so", a.SomaliSomalia = "so-SO", a.Spanish = "es", a.SpanishArgentina = "es-AR", a.SpanishBolivia = "es-BO", a.SpanishChile = "es-CL", a.SpanishColombia = "es-CO", a.SpanishCostaRica = "es-CR", a.SpanishCuba = "es-CU", a.SpanishDominicanRepublic = "es-DO", a.SpanishEcuador = "es-EC", a.SpanishEquatorialGuinea = "es-GQ", a.SpanishElSalvador = "es-SV", a.SpanishGuatemala = "es-GT", a.SpanishHonduras = "es-HN", a.SpanishMexico = "es-MX", a.SpanishNicaragua = "es-NI", a.SpanishPanama = "es-PA", a.SpanishParaguay = "es-PY", a.SpanishPeru = "es-PE", a.SpanishPuertoRico = "es-PR", a.SpanishSpain = "es-ES", a.SpanishUnitedStates = "es-US", a.SpanishUruguay = "es-UY", a.SpanishVenezuela = "es-VE", a.Sudanese = "su", a.Sutu = "st", a.SutuSouthAfrica = "st-ZA", a.Swahili = "sw", a.SwahiliKenya = "sw-KE", a.Swedish = "sv", a.SwedishFinland = "sv-FI", a.SwedishSweden = "sv-SE", a.Syriac = "syr", a.SyriacSyria = "syr-SY", a.Tajik = "tg", a.TajikTajikistan = "tg-TJ", a.Tagalog = "tl", a.TagalogPhilippines = "tl-PH", a.Tamazight = "tmh", a.Tamil = "ta", a.TamilIndia = "ta-IN", a.Tatar = "tt", a.Telugu = "te", a.TeluguIndia = "te-IN", a.Thai = "th", a.ThaiThailand = "th-TH", a.Tibetan = "bo", a.TibetanBhutan = "bo-BT", a.TibetanChina = "bo-CN", a.TibetanIndia = "bo-IN", a.Tsonga = "ts", a.Tswana = "tn", a.TswanaSouthAfrica = "tn-ZA", a.Turkish = "tr", a.TurkishTurkey = "tr-TR", a.Turkmen = "tk", a.Ukrainian = "uk", a.UkrainianUkraine = "uk-UA", a.Urdu = "ur", a.UrduAfghanistan = "ur-AF", a.UrduIndia = "ur-IN", a.UrduPakistan = "ur-PK", a.Uzbek = "uz", a.UzbekCyrillic = "uz-Cyrl-UZ", a.UzbekLatin = "uz-Latn-UZ", a.UzbekUzbekistan = "uz-UZ", a.Vietnamese = "vi", a.VietnameseVietnam = "vi-VN", a.Welsh = "cy", a.WelshUnitedKingdom = "cy-GB", a.Xhosa = "xh", a.XhosaSouthAfrica = "xh-ZA", a.Yiddish = "yi", a.Yoruba = "yo", a.YorubaNigeria = "yo-NG", a.ZhuyinMandarinChina = "yue-Hant-CN", a.Zulu = "zu", a.ZuluSouthAfrica = "zu-ZA", a))(ie2 || {});
var ne2 = ((a) => (a.AfricaAbidjan = "Africa/Abidjan", a.AfricaAccra = "Africa/Accra", a.AfricaAddisAbaba = "Africa/Addis_Ababa", a.AfricaAlgiers = "Africa/Algiers", a.AfricaAsmara = "Africa/Asmara", a.AfricaBamako = "Africa/Bamako", a.AfricaBangui = "Africa/Bangui", a.AfricaBanjul = "Africa/Banjul", a.AfricaBissau = "Africa/Bissau", a.AfricaBlantyre = "Africa/Blantyre", a.AfricaBrazzaville = "Africa/Brazzaville", a.AfricaBujumbura = "Africa/Bujumbura", a.AfricaCairo = "Africa/Cairo", a.AfricaCasablanca = "Africa/Casablanca", a.AfricaCeuta = "Africa/Ceuta", a.AfricaConakry = "Africa/Conakry", a.AfricaDakar = "Africa/Dakar", a.AfricaDarEsSalaam = "Africa/Dar_es_Salaam", a.AfricaDjibouti = "Africa/Djibouti", a.AfricaDouala = "Africa/Douala", a.AfricaElAaiun = "Africa/El_Aaiun", a.AfricaFreetown = "Africa/Freetown", a.AfricaGaborone = "Africa/Gaborone", a.AfricaHarare = "Africa/Harare", a.AfricaJohannesburg = "Africa/Johannesburg", a.AfricaJuba = "Africa/Juba", a.AfricaKampala = "Africa/Kampala", a.AfricaKhartoum = "Africa/Khartoum", a.AfricaKigali = "Africa/Kigali", a.AfricaKinshasa = "Africa/Kinshasa", a.AfricaLagos = "Africa/Lagos", a.AfricaLibreville = "Africa/Libreville", a.AfricaLome = "Africa/Lome", a.AfricaLuanda = "Africa/Luanda", a.AfricaLubumbashi = "Africa/Lubumbashi", a.AfricaLusaka = "Africa/Lusaka", a.AfricaMalabo = "Africa/Malabo", a.AfricaMaputo = "Africa/Maputo", a.AfricaMaseru = "Africa/Maseru", a.AfricaMbabane = "Africa/Mbabane", a.AfricaMogadishu = "Africa/Mogadishu", a.AfricaMonrovia = "Africa/Monrovia", a.AfricaNairobi = "Africa/Nairobi", a.AfricaNdjamena = "Africa/Ndjamena", a.AfricaNiamey = "Africa/Niamey", a.AfricaNouakchott = "Africa/Nouakchott", a.AfricaOuagadougou = "Africa/Ouagadougou", a.AfricaPortoNovo = "Africa/Porto-Novo", a.AfricaSaoTome = "Africa/Sao_Tome", a.AfricaTripoli = "Africa/Tripoli", a.AfricaTunis = "Africa/Tunis", a.AfricaWindhoek = "Africa/Windhoek", a.AmericaAdak = "America/Adak", a.AmericaAnchorage = "America/Anchorage", a.AmericaAnguilla = "America/Anguilla", a.AmericaAntigua = "America/Antigua", a.AmericaAraguaina = "America/Araguaina", a.AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires", a.AmericaArgentinaCatamarca = "America/Argentina/Catamarca", a.AmericaArgentinaCordoba = "America/Argentina/Cordoba", a.AmericaArgentinaJujuy = "America/Argentina/Jujuy", a.AmericaArgentinaLaRioja = "America/Argentina/La_Rioja", a.AmericaArgentinaMendoza = "America/Argentina/Mendoza", a.AmericaArgentinaRioGallegos = "America/Argentina/Rio_Gallegos", a.AmericaArgentinaSalta = "America/Argentina/Salta", a.AmericaArgentinaSanJuan = "America/Argentina/San_Juan", a.AmericaArgentinaSanLuis = "America/Argentina/San_Luis", a.AmericaArgentinaTucuman = "America/Argentina/Tucuman", a.AmericaArgentinaUshuaia = "America/Argentina/Ushuaia", a.AmericaAruba = "America/Aruba", a.AmericaAsuncion = "America/Asuncion", a.AmericaAtikokan = "America/Atikokan", a.AmericaAtka = "America/Atka", a.AmericaBahia = "America/Bahia", a.AmericaBahiaBanderas = "America/Bahia_Banderas", a.AmericaBarbados = "America/Barbados", a.AmericaBelem = "America/Belem", a.AmericaBelize = "America/Belize", a.AmericaBlancSablon = "America/Blanc-Sablon", a.AmericaBoaVista = "America/Boa_Vista", a.AmericaBogota = "America/Bogota", a.AmericaBoise = "America/Boise", a.AmericaCambridgeBay = "America/Cambridge_Bay", a.AmericaCampoGrande = "America/Campo_Grande", a.AmericaCancun = "America/Cancun", a.AmericaCaracas = "America/Caracas", a.AmericaCayenne = "America/Cayenne", a.AmericaCayman = "America/Cayman", a.AmericaChicago = "America/Chicago", a.AmericaChihuahua = "America/Chihuahua", a.AmericaCoralHarbour = "America/Coral_Harbour", a.AmericaCordoba = "America/Cordoba", a.AmericaCostaRica = "America/Costa_Rica", a.AmericaCreston = "America/Creston", a.AmericaCuiaba = "America/Cuiaba", a.AmericaCuracao = "America/Curacao", a.AmericaDanmarkshavn = "America/Danmarkshavn", a.AmericaDawson = "America/Dawson", a.AmericaDawsonCreek = "America/Dawson_Creek", a.AmericaDenver = "America/Denver", a.AmericaDetroit = "America/Detroit", a.AmericaDominica = "America/Dominica", a.AmericaEdmonton = "America/Edmonton", a.AmericaEirunepe = "America/Eirunepe", a.AmericaElSalvador = "America/El_Salvador", a.AmericaFortaleza = "America/Fortaleza", a.AmericaGlaceBay = "America/Glace_Bay", a.AmericaGodthab = "America/Godthab", a.AmericaGooseBay = "America/Goose_Bay", a.AmericaGrandTurk = "America/Grand_Turk", a.AmericaGrenada = "America/Grenada", a.AmericaGuadeloupe = "America/Guadeloupe", a.AmericaGuatemala = "America/Guatemala", a.AmericaGuayaquil = "America/Guayaquil", a.AmericaGuyana = "America/Guyana", a.AmericaHalifax = "America/Halifax", a.AmericaHavana = "America/Havana", a.AmericaHermosillo = "America/Hermosillo", a.AmericaIndianaIndianapolis = "America/Indiana/Indianapolis", a.AmericaIndianaKnox = "America/Indiana/Knox", a.AmericaIndianaMarengo = "America/Indiana/Marengo", a.AmericaIndianaPetersburg = "America/Indiana/Petersburg", a.AmericaIndianaTellCity = "America/Indiana/Tell_City", a.AmericaIndianaVevay = "America/Indiana/Vevay", a.AmericaIndianaVincennes = "America/Indiana/Vincennes", a.AmericaIndianaWinamac = "America/Indiana/Winamac", a.AmericaInuvik = "America/Inuvik", a.AmericaIqaluit = "America/Iqaluit", a.AmericaJamaica = "America/Jamaica", a.AmericaJuneau = "America/Juneau", a.AmericaKentuckyLouisville = "America/Kentucky/Louisville", a.AmericaKentuckyMonticello = "America/Kentucky/Monticello", a.AmericaKralendijk = "America/Kralendijk", a.AmericaLaPaz = "America/La_Paz", a.AmericaLima = "America/Lima", a.AmericaLosAngeles = "America/Los_Angeles", a.AmericaLouisville = "America/Louisville", a.AmericaLowerPrinces = "America/Lower_Princes", a.AmericaMaceio = "America/Maceio", a.AmericaManagua = "America/Managua", a.AmericaManaus = "America/Manaus", a.AmericaMarigot = "America/Marigot", a.AmericaMartinique = "America/Martinique", a.AmericaMatamoros = "America/Matamoros", a.AmericaMazatlan = "America/Mazatlan", a.AmericaMenominee = "America/Menominee", a.AmericaMerida = "America/Merida", a.AmericaMetlakatla = "America/Metlakatla", a.AmericaMexicoCity = "America/Mexico_City", a.AmericaMiquelon = "America/Miquelon", a.AmericaMoncton = "America/Moncton", a.AmericaMonterrey = "America/Monterrey", a.AmericaMontevideo = "America/Montevideo", a.AmericaMontserrat = "America/Montserrat", a.AmericaMontreal = "America/Montreal", a.AmericaNassau = "America/Nassau", a.AmericaNewYork = "America/New_York", a.AmericaNipigon = "America/Nipigon", a.AmericaNome = "America/Nome", a.AmericaNoronha = "America/Noronha", a.AmericaNorthDakotaBeulah = "America/North_Dakota/Beulah", a.AmericaNorthDakotaCenter = "America/North_Dakota/Center", a.AmericaNorthDakotaNewSalem = "America/North_Dakota/New_Salem", a.AmericaOjinaga = "America/Ojinaga", a.AmericaPanama = "America/Panama", a.AmericaPangnirtung = "America/Pangnirtung", a.AmericaParamaribo = "America/Paramaribo", a.AmericaPhoenix = "America/Phoenix", a.AmericaPortAuPrince = "America/Port-au-Prince", a.AmericaPortOfSpain = "America/Port_of_Spain", a.AmericaPortoVelho = "America/Porto_Velho", a.AmericaPuertoRico = "America/Puerto_Rico", a.AmericaRainyRiver = "America/Rainy_River", a.AmericaRankinInlet = "America/Rankin_Inlet", a.AmericaRecife = "America/Recife", a.AmericaRegina = "America/Regina", a.AmericaResolute = "America/Resolute", a.AmericaRioBranco = "America/Rio_Branco", a.AmericaSantaIsabel = "America/Santa_Isabel", a.AmericaSantarem = "America/Santarem", a.AmericaSantiago = "America/Santiago", a.AmericaSantoDomingo = "America/Santo_Domingo", a.AmericaSaoPaulo = "America/Sao_Paulo", a.AmericaScoresbysund = "America/Scoresbysund", a.AmericaShiprock = "America/Shiprock", a.AmericaSitka = "America/Sitka", a.AmericaStBarthelemy = "America/St_Barthelemy", a.AmericaStJohns = "America/St_Johns", a.AmericaStKitts = "America/St_Kitts", a.AmericaStLucia = "America/St_Lucia", a.AmericaStThomas = "America/St_Thomas", a.AmericaStVincent = "America/St_Vincent", a.AmericaSwiftCurrent = "America/Swift_Current", a.AmericaTegucigalpa = "America/Tegucigalpa", a.AmericaThule = "America/Thule", a.AmericaThunderBay = "America/Thunder_Bay", a.AmericaTijuana = "America/Tijuana", a.AmericaToronto = "America/Toronto", a.AmericaTortola = "America/Tortola", a.AmericaVancouver = "America/Vancouver", a.AmericaWhitehorse = "America/Whitehorse", a.AmericaWinnipeg = "America/Winnipeg", a.AmericaYakutat = "America/Yakutat", a.AmericaYellowknife = "America/Yellowknife", a.AntarcticaCasey = "Antarctica/Casey", a.AntarcticaDavis = "Antarctica/Davis", a.AntarcticaDumontDUrville = "Antarctica/DumontDUrville", a.AntarcticaMacquarie = "Antarctica/Macquarie", a.AntarcticaMawson = "Antarctica/Mawson", a.AntarcticaMcMurdo = "Antarctica/McMurdo", a.AntarcticaPalmer = "Antarctica/Palmer", a.AntarcticaRothera = "Antarctica/Rothera", a.AntarcticaSyowa = "Antarctica/Syowa", a.AntarcticaTroll = "Antarctica/Troll", a.AntarcticaVostok = "Antarctica/Vostok", a.ArcticLongyearbyen = "Arctic/Longyearbyen", a.AsiaAden = "Asia/Aden", a.AsiaAlmaty = "Asia/Almaty", a.AsiaAmman = "Asia/Amman", a.AsiaAnadyr = "Asia/Anadyr", a.AsiaAqtau = "Asia/Aqtau", a.AsiaAqtobe = "Asia/Aqtobe", a.AsiaAshgabat = "Asia/Ashgabat", a.AsiaBaghdad = "Asia/Baghdad", a.AsiaBahrain = "Asia/Bahrain", a.AsiaBaku = "Asia/Baku", a.AsiaBangkok = "Asia/Bangkok", a.AsiaBarnaul = "Asia/Barnaul", a.AsiaBeirut = "Asia/Beirut", a.AsiaBishkek = "Asia/Bishkek", a.AsiaBrunei = "Asia/Brunei", a.AsiaChita = "Asia/Chita", a.AsiaChoibalsan = "Asia/Choibalsan", a.AsiaColombo = "Asia/Colombo", a.AsiaDamascus = "Asia/Damascus", a.AsiaDhaka = "Asia/Dhaka", a.AsiaDili = "Asia/Dili", a.AsiaDubai = "Asia/Dubai", a.AsiaDushanbe = "Asia/Dushanbe", a.AsiaFamagusta = "Asia/Famagusta", a.AsiaGaza = "Asia/Gaza", a.AsiaHebron = "Asia/Hebron", a.AsiaHoChiMinh = "Asia/Ho_Chi_Minh", a.AsiaHongKong = "Asia/Hong_Kong", a.AsiaHovd = "Asia/Hovd", a.AsiaIrkutsk = "Asia/Irkutsk", a.AsiaJakarta = "Asia/Jakarta", a.AsiaJayapura = "Asia/Jayapura", a.AsiaJerusalem = "Asia/Jerusalem", a.AsiaKabul = "Asia/Kabul", a.AsiaKamchatka = "Asia/Kamchatka", a.AsiaKarachi = "Asia/Karachi", a.AsiaKathmandu = "Asia/Kathmandu", a.AsiaKhandyga = "Asia/Khandyga", a.AsiaKolkata = "Asia/Kolkata", a.AsiaKrasnoyarsk = "Asia/Krasnoyarsk", a.AsiaKualaLumpur = "Asia/Kuala_Lumpur", a.AsiaKuching = "Asia/Kuching", a.AsiaKuwait = "Asia/Kuwait", a.AsiaMacau = "Asia/Macau", a.AsiaMagadan = "Asia/Magadan", a.AsiaMakassar = "Asia/Makassar", a.AsiaManila = "Asia/Manila", a.AsiaMuscat = "Asia/Muscat", a.AsiaNicosia = "Asia/Nicosia", a.AsiaNovokuznetsk = "Asia/Novokuznetsk", a.AsiaNovosibirsk = "Asia/Novosibirsk", a.AsiaOmsk = "Asia/Omsk", a.AsiaOral = "Asia/Oral", a.AsiaPhnomPenh = "Asia/Phnom_Penh", a.AsiaPontianak = "Asia/Pontianak", a.AsiaPyongyang = "Asia/Pyongyang", a.AsiaQatar = "Asia/Qatar", a.AsiaQyzylorda = "Asia/Qyzylorda", a.AsiaRangoon = "Asia/Rangoon", a.AsiaRiyadh = "Asia/Riyadh", a.AsiaSakhalin = "Asia/Sakhalin", a.AsiaSamarkand = "Asia/Samarkand", a.AsiaSeoul = "Asia/Seoul", a.AsiaShanghai = "Asia/Shanghai", a.AsiaSingapore = "Asia/Singapore", a.AsiaSrednekolymsk = "Asia/Srednekolymsk", a.AsiaTaipei = "Asia/Taipei", a.AsiaTashkent = "Asia/Tashkent", a.AsiaTbilisi = "Asia/Tbilisi", a.AsiaTehran = "Asia/Tehran", a.AsiaThimphu = "Asia/Thimphu", a.AsiaTokyo = "Asia/Tokyo", a.AsiaTomsk = "Asia/Tomsk", a.AsiaUlaanbaatar = "Asia/Ulaanbaatar", a.AsiaUrumqi = "Asia/Urumqi", a.AsiaUstNera = "Asia/Ust-Nera", a.AsiaVientiane = "Asia/Vientiane", a.AsiaVladivostok = "Asia/Vladivostok", a.AsiaYakutsk = "Asia/Yakutsk", a.AsiaYekaterinburg = "Asia/Yekaterinburg", a.AsiaYerevan = "Asia/Yerevan", a.AtlanticAzores = "Atlantic/Azores", a.AtlanticBermuda = "Atlantic/Bermuda", a.AtlanticCanary = "Atlantic/Canary", a.AtlanticCapeVerde = "Atlantic/Cape_Verde", a.AtlanticFaroe = "Atlantic/Faroe", a.AtlanticMadeira = "Atlantic/Madeira", a.AtlanticReykjavik = "Atlantic/Reykjavik", a.AtlanticSouthGeorgia = "Atlantic/South_Georgia", a.AtlanticStHelena = "Atlantic/St_Helena", a.AtlanticStanley = "Atlantic/Stanley", a.AustraliaAdelaide = "Australia/Adelaide", a.AustraliaBrisbane = "Australia/Brisbane", a.AustraliaBrokenHill = "Australia/Broken_Hill", a.AustraliaCanberra = "Australia/Canberra", a.AustraliaCurrie = "Australia/Currie", a.AustraliaDarwin = "Australia/Darwin", a.AustraliaEucla = "Australia/Eucla", a.AustraliaHobart = "Australia/Hobart", a.AustraliaLindeman = "Australia/Lindeman", a.AustraliaLordHowe = "Australia/Lord_Howe", a.AustraliaMelbourne = "Australia/Melbourne", a.AustraliaPerth = "Australia/Perth", a.AustraliaSydney = "Australia/Sydney", a.EuropeAmsterdam = "Europe/Amsterdam", a.EuropeAndorra = "Europe/Andorra", a.EuropeAthens = "Europe/Athens", a.EuropeBelgrade = "Europe/Belgrade", a.EuropeBerlin = "Europe/Berlin", a.EuropeBratislava = "Europe/Bratislava", a.EuropeBrussels = "Europe/Brussels", a.EuropeBucharest = "Europe/Bucharest", a.EuropeBudapest = "Europe/Budapest", a.EuropeBusingen = "Europe/Busingen", a.EuropeChisinau = "Europe/Chisinau", a.EuropeCopenhagen = "Europe/Copenhagen", a.EuropeDublin = "Europe/Dublin", a.EuropeGibraltar = "Europe/Gibraltar", a.EuropeGuernsey = "Europe/Guernsey", a.EuropeHelsinki = "Europe/Helsinki", a.EuropeIsleOfMan = "Europe/Isle_of_Man", a.EuropeIstanbul = "Europe/Istanbul", a.EuropeJersey = "Europe/Jersey", a.EuropeKaliningrad = "Europe/Kaliningrad", a.EuropeKiev = "Europe/Kiev", a.EuropeKirov = "Europe/Kirov", a.EuropeLisbon = "Europe/Lisbon", a.EuropeLjubljana = "Europe/Ljubljana", a.EuropeLondon = "Europe/London", a.EuropeLuxembourg = "Europe/Luxembourg", a.EuropeMadrid = "Europe/Madrid", a.EuropeMalta = "Europe/Malta", a.EuropeMariehamn = "Europe/Mariehamn", a.EuropeMinsk = "Europe/Minsk", a.EuropeMonaco = "Europe/Monaco", a.EuropeMoscow = "Europe/Moscow", a.EuropeOslo = "Europe/Oslo", a.EuropeParis = "Europe/Paris", a.EuropePodgorica = "Europe/Podgorica", a.EuropePrague = "Europe/Prague", a.EuropeRiga = "Europe/Riga", a.EuropeRome = "Europe/Rome", a.EuropeSamara = "Europe/Samara", a.EuropeSanMarino = "Europe/San_Marino", a.EuropeSarajevo = "Europe/Sarajevo", a.EuropeSimferopol = "Europe/Simferopol", a.EuropeSkopje = "Europe/Skopje", a.EuropeSofia = "Europe/Sofia", a.EuropeStockholm = "Europe/Stockholm", a.EuropeTallinn = "Europe/Tallinn", a.EuropeTirane = "Europe/Tirane", a.EuropeUzhgorod = "Europe/Uzhgorod", a.EuropeVaduz = "Europe/Vaduz", a.EuropeVatican = "Europe/Vatican", a.EuropeVienna = "Europe/Vienna", a.EuropeVilnius = "Europe/Vilnius", a.EuropeVolgograd = "Europe/Volgograd", a.EuropeWarsaw = "Europe/Warsaw", a.EuropeZagreb = "Europe/Zagreb", a.EuropeZaporozhye = "Europe/Zaporozhye", a.EuropeZurich = "Europe/Zurich", a.GMT = "GMT", a.IndianAntananarivo = "Indian/Antananarivo", a.IndianChagos = "Indian/Chagos", a.IndianChristmas = "Indian/Christmas", a.IndianCocos = "Indian/Cocos", a.IndianComoro = "Indian/Comoro", a.IndianKerguelen = "Indian/Kerguelen", a.IndianMahe = "Indian/Mahe", a.IndianMaldives = "Indian/Maldives", a.IndianMauritius = "Indian/Mauritius", a.IndianMayotte = "Indian/Mayotte", a.IndianReunion = "Indian/Reunion", a.PacificApia = "Pacific/Apia", a.PacificAuckland = "Pacific/Auckland", a.PacificBougainville = "Pacific/Bougainville", a.PacificChatham = "Pacific/Chatham", a.PacificChuuk = "Pacific/Chuuk", a.PacificEaster = "Pacific/Easter", a.PacificEfate = "Pacific/Efate", a.PacificEnderbury = "Pacific/Enderbury", a.PacificFakaofo = "Pacific/Fakaofo", a.PacificFiji = "Pacific/Fiji", a.PacificFunafuti = "Pacific/Funafuti", a.PacificGalapagos = "Pacific/Galapagos", a.PacificGambier = "Pacific/Gambier", a.PacificGuadalcanal = "Pacific/Guadalcanal", a.PacificGuam = "Pacific/Guam", a.PacificHonolulu = "Pacific/Honolulu", a.PacificJohnston = "Pacific/Johnston", a.PacificKiritimati = "Pacific/Kiritimati", a.PacificKosrae = "Pacific/Kosrae", a.PacificKwajalein = "Pacific/Kwajalein", a.PacificMajuro = "Pacific/Majuro", a.PacificMarquesas = "Pacific/Marquesas", a.PacificMidway = "Pacific/Midway", a.PacificNauru = "Pacific/Nauru", a.PacificNiue = "Pacific/Niue", a.PacificNorfolk = "Pacific/Norfolk", a.PacificNoumea = "Pacific/Noumea", a.PacificPagoPago = "Pacific/Pago_Pago", a.PacificPalau = "Pacific/Palau", a.PacificPitcairn = "Pacific/Pitcairn", a.PacificPohnpei = "Pacific/Pohnpei", a.PacificPonape = "Pacific/Ponape", a.PacificPortMoresby = "Pacific/Port_Moresby", a.PacificRarotonga = "Pacific/Rarotonga", a.PacificSaipan = "Pacific/Saipan", a.PacificSamoa = "Pacific/Samoa", a.PacificTahiti = "Pacific/Tahiti", a.PacificTarawa = "Pacific/Tarawa", a.PacificTongatapu = "Pacific/Tongatapu", a.PacificTruk = "Pacific/Truk", a.PacificWake = "Pacific/Wake", a.PacificWallis = "Pacific/Wallis", a.PacificYap = "Pacific/Yap", a))(ne2 || {});
var ue2 = ((a) => (a.UTC_MINUS_12 = "UTC-12", a.UTC_MINUS_11_30 = "UTC-11:30", a.UTC_MINUS_11 = "UTC-11", a.UTC_MINUS_10_30 = "UTC-10:30", a.UTC_MINUS_10 = "UTC-10", a.UTC_MINUS_9_30 = "UTC-9:30", a.UTC_MINUS_9 = "UTC-09", a.UTC_MINUS_8_45 = "UTC-8:45", a.UTC_MINUS_8 = "UTC-08", a.UTC_MINUS_7 = "UTC-07", a.UTC_MINUS_6_30 = "UTC-6:30", a.UTC_MINUS_6 = "UTC-06", a.UTC_MINUS_5_45 = "UTC-5:45", a.UTC_MINUS_5_30 = "UTC-5:30", a.UTC_MINUS_5 = "UTC-05", a.UTC_MINUS_4_30 = "UTC-4:30", a.UTC_MINUS_4 = "UTC-04", a.UTC_MINUS_3_30 = "UTC-3:30", a.UTC_MINUS_3 = "UTC-03", a.UTC_MINUS_2_30 = "UTC-2:30", a.UTC_MINUS_2 = "UTC-02", a.UTC_MINUS_1 = "UTC-01", a.UTC_0 = "UTC+00", a.UTC_PLUS_1 = "UTC+01", a.UTC_PLUS_2 = "UTC+02", a.UTC_PLUS_3 = "UTC+03", a.UTC_PLUS_3_30 = "UTC+3:30", a.UTC_PLUS_4 = "UTC+04", a.UTC_PLUS_4_30 = "UTC+4:30", a.UTC_PLUS_5 = "UTC+05", a.UTC_PLUS_5_30 = "UTC+5:30", a.UTC_PLUS_5_45 = "UTC+5:45", a.UTC_PLUS_6 = "UTC+06", a.UTC_PLUS_6_30 = "UTC+6:30", a.UTC_PLUS_7 = "UTC+07", a.UTC_PLUS_8 = "UTC+08", a.UTC_PLUS_8_45 = "UTC+8:45", a.UTC_PLUS_9 = "UTC+09", a.UTC_PLUS_9_30 = "UTC+9:30", a.UTC_PLUS_10 = "UTC+10", a.UTC_PLUS_10_30 = "UTC+10:30", a.UTC_PLUS_11 = "UTC+11", a.UTC_PLUS_11_30 = "UTC+11:30", a.UTC_PLUS_12 = "UTC+12", a.UTC_PLUS_12_45 = "UTC+12:45", a.UTC_PLUS_13 = "UTC+13", a.UTC_PLUS_13_45 = "UTC+13:45", a.UTC_PLUS_14 = "UTC+14", a))(ue2 || {});
var se2 = ((a) => (a.AcreTime = "ACT", a.AfghanistanTime = "AFT", a.AIXCentralEuropeanTime = "DFT", a.AlaskaDaylightTime = "AKDT", a.AlaskaStandardTime = "AKST", a.AlmaAtaTime = "ALMT", a.AmazonSummerTime = "AMST", a.AmazonTime = "AMT", a.AnadyrTime = "ANAT", a.AqtobeTime = "AQTT", a.ArabiaStandardTime = "AST", a.ArgentinaTime = "ART", a.ArmeniaTime = "AMT", a.ASEANCommonTime = "ASEAN", a.AtlanticDaylightTime = "ADT", a.AtlanticStandardTime = "AST", a.AustralianCentralDaylightSavingTime = "ACDT", a.AustralianCentralStandardTime = "ACST", a.AustralianCentralWesternStandardTime = "ACWST", a.AustralianEasternDaylightSavingTime = "AEDT", a.AustralianEasternStandardTime = "AEST", a.AustralianEasternTime = "AET", a.AustralianWesternStandardTime = "AWST", a.AzerbaijanTime = "AZT", a.AzoresStandardTime = "AZOT", a.AzoresSummerTime = "AZOST", a.BakerIslandTime = "BIT", a.BangladeshStandardTime = "BST", a.BhutanTime = "BTT", a.BoliviaTime = "BOT", a.BougainvilleStandardTime = "BST", a.BrasiliaSummerTime = "BRST", a.BrasiliaTime = "BRT", a.BritishIndianOceanTime = "BIOT", a.BritishSummerTime = "BST", a.BruneiTime = "BNT", a.CapeVerdeTime = "CVT", a.CentralAfricaTime = "CAT", a.CentralDaylightTime = "CDT", a.CentralEuropeanSummerTime = "CEST", a.CentralEuropeanTime = "CET", a.CentralIndonesiaTime = "WITA", a.CentralStandardTime = "CST", a.CentralTime = "CT", a.CentralWesternStandardTime = "CWST", a.ChamorroStandardTime = "CHST", a.ChathamDaylightTime = "CHADT", a.ChathamStandardTime = "CHAST", a.ChileStandardTime = "CLT", a.ChileSummerTime = "CLST", a.ChinaStandardTime = "CST", a.ChoibalsanStandardTime = "CHOT", a.ChoibalsanSummerTime = "CHOST", a.ChristmasIslandTime = "CXT", a.ChuukTime = "CHUT", a.ClipptertonIslandStandardTime = "CIST", a.CocosIslandsTime = "CCT", a.ColombiaSummerTime = "COST", a.ColombiaTime = "COT", a.CookIslandTime = "CKT", a.CoordinatedUniversalTime = "UTC", a.CubaDaylightTime = "CDT", a.CubaStandardTime = "CST", a.DavisTime = "DAVT", a.DumontDUrvilleTime = "DDUT", a.EastAfricaTime = "EAT", a.EasterIslandStandardTime = "EAST", a.EasterIslandSummerTime = "EASST", a.EasternCaribbeanTime = "ECT", a.EasternDaylightTime = "EDT", a.EasternEuropeanSummerTime = "EEST", a.EasternEuropeanTime = "EET", a.EasternGreenlandSummerTime = "EGST", a.EasternGreenlandTime = "EGT", a.EasternIndonesianTime = "WIT", a.EasternStandardTime = "EST", a.EasternTime = "ET", a.EcuadorTime = "ECT", a.FalklandIslandsSummerTime = "FKST", a.FalklandIslandsTime = "FKT", a.FernandoDeNoronhaTime = "FNT", a.FijiTime = "FJT", a.FrenchGuianaTime = "GFT", a.FrenchSouthernAndAntarcticTime = "TFT", a.FurtherEasternEuropeanTime = "FET", a.GalapagosTime = "GALT", a.GambierIslandTime = "GIT", a.GambierIslandsTime = "GAMT", a.GeorgiaStandardTime = "GET", a.GilbertIslandTime = "GILT", a.GreenwichMeanTime = "GMT", a.GulfStandardTime = "GST", a.GuyanaTime = "GYT", a.HawaiiAleutianDaylightTime = "HDT", a.HawaiiAleutianStandardTime = "HST", a.HeardAndMcDonaldIslandsTime = "HMT", a.HeureAvanceeDEuropeCentraleTime = "HAEC", a.HongKongTime = "HKT", a.HovdSummerTime = "HOVST", a.HovdTime = "HOVT", a.IndianOceanTime = "IOT", a.IndianStandardTime = "IST", a.IndochinaTime = "ICT", a.InternationalDayLineWestTime = "IDLW", a.IranDaylightTime = "IRDT", a.IranStandardTime = "IRST", a.IrishStandardTime = "IST", a.IrkutskSummerTime = "IRKST", a.IrkutskTime = "IRKT", a.IsraelDaylightTime = "IDT", a.IsraelStandardTime = "IST", a.JapanStandardTime = "JST", a.KaliningradTime = "KALT", a.KamchatkaTime = "KAMT", a.KoreaStandardTime = "KST", a.KosraeTime = "KOST", a.KrasnoyarskSummerTime = "KRAST", a.KrasnoyarskTime = "KRAT", a.KyrgyzstanTime = "KGT", a.LineIslandsTime = "LINT", a.KazakhstanStandardTime = "KAST", a.LordHoweStandardTime = "LHST", a.LordHoweSummerTime = "LHST", a.MacquarieIslandStationTime = "MIST", a.MagadanTime = "MAGT", a.MalaysiaStandardTime = "MST", a.MalaysiaTime = "MYT", a.MaldivesTime = "MVT", a.MarquesasIslandsTime = "MART", a.MarshallIslandsTime = "MHT", a.MauritiusTime = "MUT", a.MawsonStationTime = "MAWT", a.MiddleEuropeanSummerTime = "MEDT", a.MiddleEuropeanTime = "MET", a.MoscowTime = "MSK", a.MountainDaylightTime = "MDT", a.MountainStandardTime = "MST", a.MyanmarStandardTime = "MMT", a.NepalTime = "NCT", a.NauruTime = "NRT", a.NewCaledoniaTime = "NCT", a.NewZealandDaylightTime = "NZDT", a.NewZealandStandardTime = "NZST", a.NewfoundlandDaylightTime = "NDT", a.NewfoundlandStandardTime = "NST", a.NewfoundlandTime = "NT", a.NiueTime = "NUT", a.NorfolkIslandTime = "NFT", a.NovosibirskTime = "NOVT", a.OmskTime = "OMST", a.OralTime = "ORAT", a.PacificDaylightTime = "PDT", a.PacificStandardTime = "PST", a.PakistanStandardTime = "PKT", a.PalauTime = "PWT", a.PapuaNewGuineaTime = "PGT", a.ParaguaySummerTime = "PYST", a.ParaguayTime = "PYT", a.PeruTime = "PET", a.PhilippineStandardTime = "PHST", a.PhilippineTime = "PHT", a.PhoenixIslandTime = "PHOT", a.PitcairnTime = "PST", a.PohnpeiStandardTime = "PONT", a.ReunionTime = "RET", a.RotheraResearchStationTime = "ROTT", a.SaintPierreAndMiquelonDaylightTime = "PMDT", a.SaintPierreAndMiquelonStandardTime = "PMST", a.SakhalinIslandTime = "SAKT", a.SamaraTime = "SAMT", a.SamoaDaylightTime = "SDT", a.SamoaStandardTime = "SST", a.SeychellesTime = "SCT", a.ShowaStationTime = "SYOT", a.SingaporeStandardTime = "SST", a.SingaporeTime = "SGT", a.SolomonIslandsTime = "SBT", a.SouthAfricanStandardTime = "SAST", a.SouthGeorgiaAndTheSouthSandwichIslandsTime = "GST", a.SrednekolymskTime = "SRET", a.SriLankaStandardTime = "SLST", a.SurinameTime = "SRT", a.TahitiTime = "TAHT", a.TajikistanTime = "TJT", a.ThailandStandardTime = "THA", a.TimorLesteTime = "TLT", a.TokelauTime = "TKT", a.TongaTime = "TOT", a.TurkeyTime = "TRT", a.TurkmenistanTime = "TMT", a.TuvaluTime = "TVT", a.UlaanbaatarStandardTime = "ULAT", a.UlaanbaatarSummerTime = "ULAST", a.UruguayStandardTime = "UYT", a.UruguaySummerTime = "UYST", a.UzbekistanTime = "UZT", a.VanuatuTime = "VUT", a.VenezuelaStandardTime = "VET", a.VladivostokTime = "VLAT", a.VolgogradTime = "VOLT", a.VostokStationTime = "VOST", a.WakeIslandTime = "WAKT", a.WestAfricaSummerTime = "WAST", a.WestAfricaTime = "WAT", a.WestGreenlandSummerTime = "WGST", a.WestGreenlandTime = "WGT", a.WestKazakhstanTime = "WKT", a.WesternEuropeanSummerTime = "WEDT", a.WesternEuropeanTime = "WET", a.WesternIndonesianTime = "WIT", a.WesternStandardTime = "WST", a.YakutskTime = "YAKT", a.YekaterinburgTime = "YEKT", a))(se2 || {});
var te2 = ((a) => (a.Africa = "Africa", a.Americas = "Americas", a.Asia = "Asia", a.Europe = "Europe", a.Oceania = "Oceania", a.Polar = "Polar", a))(te2 || {});
var oe2 = ((a) => (a.CentralAmerica = "Central America", a.EasternAsia = "Eastern Asia", a.EasternEurope = "Eastern Europe", a.EasternAfrica = "Eastern Africa", a.MiddleAfrica = "Middle Africa", a.MiddleEast = "Middle East", a.NorthernAfrica = "Northern Africa", a.NorthernAmerica = "Northern America", a.NorthernEurope = "Northern Europe", a.Polynesia = "Polynesia", a.SouthAmerica = "South America", a.SouthernAfrica = "Southern Africa", a.SouthernAsia = "Southern Asia", a.SouthernEurope = "Southern Europe", a.WesternAfrica = "Western Africa", a.WesternAsia = "Western Asia", a.WesternEurope = "Western Europe", a.WesternAustralia = "Western Australia", a))(oe2 || {});
var re2 = { id: "dev", type: e2.Development, public: false, name: "Development", description: "Development environment" };
var me2 = { id: "test", type: e2.NonProduction, public: false, name: "Test", description: "Test environment" };
var le2 = { id: "production", type: e2.Production, public: true, name: "Production", description: "Production environment" };
function ge2() {
  let a = process.env.NODE_ENV;
  return a === "dev" || a === "development" ? re2 : a === "production" ? le2 : me2;
}

// src/index.ts
var import_cors = __toESM(require_lib(), 1);
import compression from "compression";
import express from "express";
import multer from "multer";

// src/middleware/auth-middleware.ts
var logger = new e();
function auth_middleware_default(req, res, next) {
  try {
    return next();
  } catch (err) {
    const isManaged = err instanceof s;
    const exception = isManaged ? err : new v(err.name, { cause: err });
    logger.exception(exception.toJSON());
  }
  return next();
}

// node_modules/@srclaunch/types/dist/index.js
var q3 = ((U3) => (U3.Comment = "comment", U3.Create = "create", U3.Delete = "delete", U3.Edit = "edit", U3.Invoice = "invoice", U3.Message = "message", U3.PageView = "pageView", U3.Paid = "paid", U3.Payment = "payment", U3.Purchase = "purchase", U3.Referral = "referral", U3.Renewal = "renewal", U3.Signup = "signup", U3.Subscription = "subscription", U3.Upgrade = "upgrade", U3))(q3 || {});
var R3 = ((U3) => (U3.Business = "business", U3.Engineering = "engineering", U3.Exception = "exception", U3.LogMessage = "log-message", U3.Marketing = "marketing", U3.PageLeave = "page-leave", U3.PageView = "page-view", U3.Product = "product", U3.QualityManagement = "quality-management", U3.UserAccess = "user-access", U3.UserLogin = "user-login", U3.UserLogout = "user-logout", U3.UserSignup = "user-signup", U3.UserPreferencesChanged = "user-preferences-changed", U3.WebsiteVisit = "website-visit", U3))(R3 || {});
var F3 = ((o2) => (o2.CloseTab = "close-tab", o2.ExternalLink = "external-link", o2.NavigateAway = "navigate-away", o2.Unknown = "unknown", o2))(F3 || {});
var H3 = ((De2) => (De2.Ecs = "Ecs", De2))(H3 || {});
var O3 = ((o2) => (o2.Finished = "Finished", o2.Queued = "Queued", o2.Running = "Running", o2.Started = "Started", o2))(O3 || {});
var j3 = ((o2) => (o2.Mobile = "mobile", o2.TV = "tv", o2.Watch = "watch", o2.Web = "web", o2))(j3 || {});
var V3 = ((P3) => (P3.Development = "Development", P3.NonProduction = "NonProduction", P3.Production = "Production", P3))(V3 || {});
var W3 = ((P3) => (P3.Completed = "completed", P3.Started = "started", P3.Uncompleted = "uncompleted", P3))(W3 || {});
var J3 = ((P3) => (P3.Build = "Build", P3.Deployment = "Deployment", P3.Test = "Test", P3))(J3 || {});
var Z3 = ((_3) => (_3.Canceled = "Canceled", _3.Completed = "Completed", _3.Failed = "Failed", _3.Running = "Running", _3.Queued = "Queued", _3.Waiting = "Waiting", _3))(Z3 || {});
var Y3 = ((_3) => (_3.Canceled = "Canceled", _3.Completed = "Completed", _3.Failed = "Failed", _3.Running = "Running", _3.Queued = "Queued", _3.Waiting = "Waiting", _3))(Y3 || {});
var Q3 = ((_3) => (_3.ForgotPassword = "forgot_password", _3.Index = "index", _3.Login = "login", _3.PageNotFound = "404", _3.Signup = "signup", _3.VerifyCode = "verify_code", _3))(Q3 || {});
var $3 = ((o2) => (o2.Info = "info", o2.Warning = "warning", o2.Error = "error", o2.Success = "success", o2))($3 || {});
var X3 = ((N3) => (N3.Details = "details", N3.Dialog = "dialog", N3))(X3 || {});
var C3 = ((o2) => (o2.Info = "info", o2.Warning = "warning", o2.Error = "error", o2.Success = "success", o2))(C3 || {});
var aa3 = ((h3) => (h3.AccountBalance = "AccountBalance", h3.UserAssets = "UserAssets", h3.UserCreditCardDebt = "UserCreditCardDebt", h3.UserCreditLimit = "UserCreditLimit", h3.UserCreditUtilization = "UserCreditUtilization", h3.UserDebt = "UserDebt", h3.UserInvestments = "UserInvestments", h3.UserRetirement = "UserRetirement", h3.UserSavings = "UserSavings", h3))(aa3 || {});
var ea2 = ((o2) => (o2.DateTime = "date_time", o2.True = "true", o2.False = "false", o2.UniqueId = "unique_id", o2))(ea2 || {});
var ia3 = ((N3) => (N3.DomainModel = "domain_entity", N3.GenericModel = "generic_entity", N3))(ia3 || {});
var na3 = ((T2) => (T2.AirportCode = "airport-code", T2.BankIDCode = "bank-id-code", T2.BitcoinAddress = "bitcoin-address", T2.Boolean = "boolean", T2.City = "city", T2.Color = "color", T2.CountryCode = "country-code", T2.CreditCard = "credit-card", T2.CurrencyAmount = "currency-amount", T2.CurrencyCode = "currency-code", T2.DataURI = "data-uri", T2.Date = "date", T2.DateRange = "date-range", T2.DateTime = "date-time", T2.DayOfMonth = "day-of-month", T2.DomainName = "domain-name", T2.EmailAddress = "email-address", T2.EthereumAddress = "ethereum-address", T2.EAN = "european-article-number", T2.EIN = "employer-identification-number", T2.Float = "float", T2.GeographicCoordinate = "geographic-coordinate", T2.GeographicCoordinates = "geographic-coordinates", T2.GitRepositoryURL = "git-repository-url", T2.HSLColor = "hsl-color", T2.HexColor = "hex-color", T2.Hexadecimal = "hexadecimal", T2.IBAN = "international-bank-account-number", T2.IMEI = "international-mobile-equipment-identifier", T2.IPAddress = "ip-address", T2.IPAddressRange = "ip-address-range", T2.ISBN = "international-standard-book-number", T2.ISIN = "international-stock-number", T2.ISMN = "international-standard-music-number", T2.ISSN = "international-standard-serial-number", T2.ISO8601 = "iso-8601", T2.ISO31661Alpha2 = "iso-31661-alpha-2", T2.ISO31661Alpha3 = "iso-31661-alpha-3", T2.ISO4217 = "iso-4217", T2.Image = "image", T2.Integer = "integer", T2.JSON = "json", T2.LanguageCode = "language-code", T2.LicensePlateNumber = "license-plate-number", T2.LongText = "long-text", T2.MD5 = "md5", T2.Markdown = "markdown", T2.Menu = "menu", T2.Number = "number", T2.MACAddress = "mac-address", T2.MagnetURI = "magnet-uri", T2.MimeType = "mime-type", T2.Month = "month", T2.Password = "password", T2.PassportNumber = "passport-number", T2.Percent = "percent", T2.PhoneNumber = "phone-number", T2.Port = "port", T2.PostalCode = "postal-code", T2.Province = "province", T2.RFC3339 = "rfc-3339", T2.RGBColor = "rgb-color", T2.SemanticVersion = "semantic-version", T2.SSN = "social-security-number", T2.State = "state", T2.StreetAddress = "street-address", T2.String = "string", T2.Tags = "tags", T2.TaxIDNumber = "tax-id-number", T2.Time = "time", T2.TimeOfDay = "time-of-day", T2.TimeRange = "time-range", T2.TimezoneRegion = "timezone-region", T2.URL = "url", T2.URLPath = "url-path", T2.UUID = "uuid", T2.VATIDNumber = "value-added-tax-id-number", T2.VerificationCode = "verification-code", T2.Video = "video", T2.Weekday = "weekday", T2.Year = "year", T2))(na3 || {});
var ra3 = ((o2) => (o2.Critical = "Critical", o2.Error = "Error", o2.Fatal = "Fatal", o2.Warning = "Warning", o2))(ra3 || {});
var x3 = ((l2) => (l2.Contains = "contains", l2.HasCharacterCount = "has-character-count", l2.HasNumberCount = "has-number-count", l2.HasLetterCount = "has-letter-count", l2.HasLowercaseCount = "has-lowercase-count", l2.HasSpacesCount = "has-spaces-count", l2.HasSymbolCount = "has-symbol-count", l2.HasUppercaseCount = "has-uppercase-count", l2.IsAfter = "is-after", l2.IsAfterOrEqual = "is-after-or-equal", l2.IsAirport = "is-airport", l2.IsAlpha = "is-alpha", l2.IsAlphanumeric = "is-alphanumeric", l2.IsAlgorithmHash = "is-algorithm-hash", l2.IsAscii = "is-ascii", l2.IsBase64 = "is-base-64", l2.IsBefore = "is-before", l2.IsBeforeOrAfter = "is-before-or-after", l2.IsBeforeOrEqual = "is-before-or-equal", l2.IsBetween = "is-between", l2.IsBIC = "is-bic", l2.IsBitcoinAddress = "is-bitcoin-address", l2.IsBoolean = "is-boolean", l2.IsColor = "is-color", l2.IsComplexEnough = "is-complex-enough", l2.IsCountry = "is-country", l2.IsCreditCard = "is-credit-card", l2.IsCurrency = "is-currency", l2.IsDataURI = "is-data-uri", l2.IsDate = "is-date", l2.IsDateRange = "is-date-range", l2.IsDateTime = "is-date-time", l2.IsDayOfMonth = "is-day-of-month", l2.IsDecimal = "is-decimal", l2.IsDivisibleBy = "is-divisible-by", l2.IsDomainName = "is-domain-name", l2.IsEmailAddress = "is-email-address", l2.IsEthereumAddress = "is-ethereum-address", l2.IsEAN = "is-ean", l2.IsEIN = "is-ein", l2.IsEqual = "is-equal", l2.IsEvenNumber = "is-even-number", l2.IsFloat = "is-float", l2.IsIBAN = "is-iban", l2.IsGreaterThan = "greater-than", l2.IsGreaterThanOrEqual = "greater-than-or-equal", l2.IsHSLColor = "is-hsl-color", l2.IsHexColor = "is-hex-color", l2.IsHexadecimal = "is-hexadecimal", l2.IsIdentityCardCode = "is-identity-card-code", l2.IsIMEI = "is-imei", l2.IsInIPAddressRange = "is-in-ip-address-range", l2.IsInList = "is-in-list", l2.IsInTheLast = "is-in-the-last", l2.IsInteger = "is-integer", l2.IsIPAddress = "is-ip-address", l2.IsIPAddressRange = "is-ip-address-range", l2.IsISBN = "is-isbn", l2.IsISIN = "is-isin", l2.IsISMN = "is-ismn", l2.IsISRC = "is-isrc", l2.IsISSN = "is-issn", l2.IsISO4217 = "is-iso-4217", l2.IsISO8601 = "is-iso-8601", l2.IsISO31661Alpha2 = "is-iso-31661-alpha-2", l2.IsISO31661Alpha3 = "is-iso-31661-alpha-3", l2.IsJSON = "is-json", l2.IsLanguage = "is-language", l2.IsLatitude = "is-latitude", l2.IsLongitude = "is-longitude", l2.IsLengthEqual = "is-length-equal", l2.IsLengthGreaterThan = "is-length-greater-than", l2.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal", l2.IsLengthLessThan = "is-length-less-than", l2.IsLengthLessThanOrEqual = "is-length-less-than-or-equal", l2.IsLessThan = "less-than", l2.IsLessThanOrEqual = "less-than-or-equal", l2.IsLicensePlateNumber = "is-license-plate-number", l2.IsLowercase = "is-lowercase", l2.IsOctal = "is-octal", l2.IsMACAddress = "is-mac-address", l2.IsMD5 = "is-md5", l2.IsMagnetURI = "is-magnet-uri", l2.IsMarkdown = "is-markdown", l2.IsMimeType = "is-mime-type", l2.IsMonth = "is-month", l2.IsNegativeNumber = "is-negative-number", l2.IsNotDate = "is-not-date", l2.IsNotEqual = "is-not-equal", l2.IsNotInIPAddressRange = "is-not-in-ip-address-range", l2.IsNotInList = "is-not-in-list", l2.IsNotNull = "is-not-null", l2.IsNotRegexMatch = "is-not-regex-match", l2.IsNotToday = "is-not-today", l2.IsNumber = "is-number", l2.IsNumeric = "is-numeric", l2.IsOddNumber = "is-odd-number", l2.IsPassportNumber = "is-passport-number", l2.IsPhoneNumber = "is-phone-number", l2.IsPort = "is-port", l2.IsPositiveNumber = "is-positive-number", l2.IsPostalCode = "is-postal-code", l2.IsProvince = "is-province", l2.IsRGBColor = "is-rgb-color", l2.IsRegexMatch = "is-regex-match", l2.IsRequired = "is-required", l2.IsSemanticVersion = "is-semantic-version", l2.IsSlug = "is-slug", l2.IsSSN = "is-ssn", l2.IsState = "is-state", l2.IsStreetAddress = "is-street-address", l2.IsString = "is-string", l2.IsStrongPassword = "is-strong-password", l2.IsTags = "is-tags", l2.IsTaxIDNumber = "is-tax-id-number", l2.IsThisMonth = "is-this-month", l2.IsThisQuarter = "is-this-quarter", l2.IsThisWeek = "is-this-week", l2.IsThisWeekend = "is-this-weekend", l2.IsThisYear = "is-this-year", l2.IsTime = "is-time", l2.IsTimeOfDay = "is-time-of-day", l2.IsTimeRange = "is-time-range", l2.IsToday = "is-today", l2.IsURL = "is-url", l2.IsUUID = "is-uuid", l2.IsUppercase = "is-uppercase", l2.IsUsernameAvailable = "is-username-available", l2.IsValidStreetAddress = "is-valid-street-address", l2.IsVATIDNumber = "is-vat-id-number", l2.IsWeekday = "is-weekday", l2.IsWeekend = "is-weekend", l2.IsYear = "is-year", l2))(x3 || {});
var sa3 = ((o2) => (o2.IsAuthenticated = "is-authenticated", o2.IsNotAuthenticated = "is-not-authenticated", o2.IsUsernameAvailable = "is-username-available", o2.PasswordMismatch = "password-mismatch", o2))(sa3 || {});
var ta3 = ((A2) => (A2[A2.IsHSLColor = "is-hsl-color"] = "IsHSLColor", A2[A2.IsHexColor = "is-hex-color"] = "IsHexColor", A2[A2.IsNotNull = "is-not-null"] = "IsNotNull", A2[A2.IsRGBColor = "is-rgb-color"] = "IsRGBColor", A2[A2.IsString = "is-string"] = "IsString", A2))(ta3 || {});
var oa3 = ((c3) => (c3[c3.IsBetween = "is-between"] = "IsBetween", c3[c3.IsCurrency = "is-currency"] = "IsCurrency", c3[c3.IsDecimal = "is-decimal"] = "IsDecimal", c3[c3.IsDivisibleBy = "is-divisible-by"] = "IsDivisibleBy", c3[c3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", c3[c3.IsFloat = "is-float"] = "IsFloat", c3[c3.IsGreaterThan = "greater-than"] = "IsGreaterThan", c3[c3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", c3[c3.IsInteger = "is-integer"] = "IsInteger", c3[c3.IsISO8601 = "is-iso-8601"] = "IsISO8601", c3[c3.IsLessThan = "less-than"] = "IsLessThan", c3[c3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", c3[c3.IsNegativeNumber = "is-negative-number"] = "IsNegativeNumber", c3[c3.IsNotEqual = "is-not-equal"] = "IsNotEqual", c3[c3.IsNotNull = "is-not-null"] = "IsNotNull", c3[c3.IsNumber = "is-number"] = "IsNumber", c3[c3.IsOddNumber = "is-odd-number"] = "IsOddNumber", c3[c3.IsPositiveNumber = "is-positive-number"] = "IsPositiveNumber", c3))(oa3 || {});
var ma3 = ((o2) => (o2[o2.IsBitcoinAddress = "is-bitcoin-address"] = "IsBitcoinAddress", o2[o2.IsEqual = "is-equal"] = "IsEqual", o2[o2.IsNotEqual = "is-not-equal"] = "IsNotEqual", o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2))(ma3 || {});
var la3 = ((o2) => (o2[o2.IsEthereumAddress = "is-ethereum-address"] = "IsEthereumAddress", o2[o2.IsEqual = "is-equal"] = "IsEqual", o2[o2.IsNotEqual = "is-not-equal"] = "IsNotEqual", o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2))(la3 || {});
var ca3 = ((A2) => (A2[A2.IsEqual = "is-equal"] = "IsEqual", A2[A2.IsJSON = "is-json"] = "IsJSON", A2[A2.IsLanguage = "is-language"] = "IsLanguage", A2[A2.IsNotEqual = "is-not-equal"] = "IsNotEqual", A2[A2.IsNotNull = "is-not-null"] = "IsNotNull", A2))(ca3 || {});
var ua3 = ((d2) => (d2[d2.IsAlpha = "is-alpha"] = "IsAlpha", d2[d2.IsEqual = "is-equal"] = "IsEqual", d2[d2.IsInList = "is-in-list"] = "IsInList", d2[d2.IsNotEqual = "is-not-equal"] = "IsNotEqual", d2[d2.IsNotInList = "is-not-in-list"] = "IsNotInList", d2[d2.IsNotNull = "is-not-null"] = "IsNotNull", d2[d2.IsString = "is-string"] = "IsString", d2))(ua3 || {});
var da3 = ((e3) => (e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsCountry = "is-country"] = "IsCountry", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(da3 || {});
var pa3 = ((A2) => (A2[A2.IsEqual = "is-equal"] = "IsEqual", A2[A2.IsFloat = "is-float"] = "IsFloat", A2[A2.IsNotEqual = "is-not-equal"] = "IsNotEqual", A2[A2.IsNotNull = "is-not-null"] = "IsNotNull", A2[A2.IsNumeric = "is-numeric"] = "IsNumeric", A2))(pa3 || {});
var ga3 = ((A2) => (A2[A2.IsEqual = "is-equal"] = "IsEqual", A2[A2.IsFloat = "is-float"] = "IsFloat", A2[A2.IsNotEqual = "is-not-equal"] = "IsNotEqual", A2[A2.IsNotNull = "is-not-null"] = "IsNotNull", A2[A2.IsNumeric = "is-numeric"] = "IsNumeric", A2))(ga3 || {});
var Aa3 = ((o2) => (o2[o2.IsEqual = "is-equal"] = "IsEqual", o2[o2.IsNotEqual = "is-not-equal"] = "IsNotEqual", o2[o2.IsPostalCode = "is-postal-code"] = "IsPostalCode", o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2))(Aa3 || {});
var Ta3 = ((e3) => (e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsProvince = "is-province"] = "IsProvince", e3[e3.IsString = "is-string"] = "IsString", e3))(Ta3 || {});
var fa3 = ((e3) => (e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsState = "is-state"] = "IsState", e3[e3.IsString = "is-string"] = "IsString", e3))(fa3 || {});
var _a3 = ((_3) => (_3[_3.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", _3[_3.IsEqual = "is-equal"] = "IsEqual", _3[_3.IsNotEqual = "is-not-equal"] = "IsNotEqual", _3[_3.IsNotNull = "is-not-null"] = "IsNotNull", _3[_3.IsString = "is-string"] = "IsString", _3[_3.IsStreetAddress = "is-street-address"] = "IsStreetAddress", _3))(_a3 || {});
var ha3 = ((e3) => (e3[e3.IsAirport = "is-airport"] = "IsAirport", e3[e3.IsAlpha = "is-alpha"] = "IsAlpha", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ha3 || {});
var Sa3 = ((d2) => (d2[d2.IsAlgorithmHash = "is-algorithm-hash"] = "IsAlgorithmHash", d2[d2.IsEqual = "is-equal"] = "IsEqual", d2[d2.IsInList = "is-in-list"] = "IsInList", d2[d2.IsNotEqual = "is-not-equal"] = "IsNotEqual", d2[d2.IsNotInList = "is-not-in-list"] = "IsNotInList", d2[d2.IsNotNull = "is-not-null"] = "IsNotNull", d2[d2.IsString = "is-string"] = "IsString", d2))(Sa3 || {});
var Ia3 = ((d2) => (d2[d2.IsEqual = "is-equal"] = "IsEqual", d2[d2.IsInList = "is-in-list"] = "IsInList", d2[d2.IsNotEqual = "is-not-equal"] = "IsNotEqual", d2[d2.IsNotInList = "is-not-in-list"] = "IsNotInList", d2[d2.IsNotNull = "is-not-null"] = "IsNotNull", d2[d2.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", d2[d2.IsString = "is-string"] = "IsString", d2))(Ia3 || {});
var ba3 = ((d2) => (d2[d2.IsEqual = "is-equal"] = "IsEqual", d2[d2.IsInList = "is-in-list"] = "IsInList", d2[d2.IsNotEqual = "is-not-equal"] = "IsNotEqual", d2[d2.IsNotInList = "is-not-in-list"] = "IsNotInList", d2[d2.IsNotNull = "is-not-null"] = "IsNotNull", d2[d2.IsString = "is-string"] = "IsString", d2[d2.IsUUID = "is-uuid"] = "IsUUID", d2))(ba3 || {});
var va3 = ((d2) => (d2[d2.IsEqual = "is-equal"] = "IsEqual", d2[d2.IsInList = "is-in-list"] = "IsInList", d2[d2.IsMD5 = "is-md5"] = "IsMD5", d2[d2.IsNotEqual = "is-not-equal"] = "IsNotEqual", d2[d2.IsNotInList = "is-not-in-list"] = "IsNotInList", d2[d2.IsNotNull = "is-not-null"] = "IsNotNull", d2[d2.IsString = "is-string"] = "IsString", d2))(va3 || {});
var Ua3 = ((o2) => (o2[o2.IsBoolean = "is-boolean"] = "IsBoolean", o2[o2.IsEqual = "is-equal"] = "IsEqual", o2[o2.IsNotEqual = "is-not-equal"] = "IsNotEqual", o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2))(Ua3 || {});
var Ea3 = ((g3) => (g3[g3.IsAfter = "is-after"] = "IsAfter", g3[g3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", g3[g3.IsBefore = "is-before"] = "IsBefore", g3[g3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", g3[g3.IsBetween = "is-between"] = "IsBetween", g3[g3.IsDate = "is-date"] = "IsDate", g3[g3.IsEqual = "is-equal"] = "IsEqual", g3[g3.IsNotDate = "is-not-date"] = "IsNotDate", g3[g3.IsNotEqual = "is-not-equal"] = "IsNotEqual", g3[g3.IsNotNull = "is-not-null"] = "IsNotNull", g3[g3.IsNotToday = "is-not-today"] = "IsNotToday", g3[g3.IsThisWeek = "is-this-week"] = "IsThisWeek", g3[g3.IsThisMonth = "is-this-month"] = "IsThisMonth", g3[g3.IsThisQuarter = "is-this-quarter"] = "IsThisQuarter", g3[g3.IsThisYear = "is-this-year"] = "IsThisYear", g3[g3.IsToday = "is-today"] = "IsToday", g3[g3.IsWeekend = "is-weekend"] = "IsWeekend", g3))(Ea3 || {});
var ya3 = ((h3) => (h3[h3.IsAfter = "is-after"] = "IsAfter", h3[h3.IsBefore = "is-before"] = "IsBefore", h3[h3.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", h3[h3.IsBetween = "is-between"] = "IsBetween", h3[h3.IsDate = "is-date"] = "IsDate", h3[h3.IsDateRange = "is-date-range"] = "IsDateRange", h3[h3.IsEqual = "is-equal"] = "IsEqual", h3[h3.IsNotEqual = "is-not-equal"] = "IsNotEqual", h3[h3.IsNotNull = "is-not-null"] = "IsNotNull", h3))(ya3 || {});
var xa3 = ((g3) => (g3[g3.IsAfter = "is-after"] = "IsAfter", g3[g3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", g3[g3.IsBefore = "is-before"] = "IsBefore", g3[g3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", g3[g3.IsBetween = "is-between"] = "IsBetween", g3[g3.IsDate = "is-date"] = "IsDate", g3[g3.IsEqual = "is-equal"] = "IsEqual", g3[g3.IsNotDate = "is-not-date"] = "IsNotDate", g3[g3.IsNotEqual = "is-not-equal"] = "IsNotEqual", g3[g3.IsNotNull = "is-not-null"] = "IsNotNull", g3[g3.IsNotToday = "is-not-today"] = "IsNotToday", g3[g3.IsThisWeek = "is-this-week"] = "IsThisWeek", g3[g3.IsThisMonth = "is-this-month"] = "IsThisMonth", g3[g3.IsThisQuarter = "is-this-quarter"] = "IsThisQuarter", g3[g3.IsThisYear = "is-this-year"] = "IsThisYear", g3[g3.IsToday = "is-today"] = "IsToday", g3[g3.IsWeekend = "is-weekend"] = "IsWeekend", g3))(xa3 || {});
var Na3 = ((v3) => (v3[v3.IsAfter = "is-after"] = "IsAfter", v3[v3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", v3[v3.IsBefore = "is-before"] = "IsBefore", v3[v3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", v3[v3.IsBetween = "is-between"] = "IsBetween", v3[v3.IsDayOfMonth = "is-day-of-month"] = "IsDayOfMonth", v3[v3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", v3[v3.IsEqual = "is-equal"] = "IsEqual", v3[v3.IsGreaterThan = "greater-than"] = "IsGreaterThan", v3[v3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", v3[v3.IsInteger = "is-integer"] = "IsInteger", v3[v3.IsLessThan = "less-than"] = "IsLessThan", v3[v3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", v3[v3.IsNotEqual = "is-not-equal"] = "IsNotEqual", v3[v3.IsNotNull = "is-not-null"] = "IsNotNull", v3[v3.IsNumber = "is-number"] = "IsNumber", v3[v3.IsOddNumber = "is-odd-number"] = "IsOddNumber", v3[v3.IsToday = "is-today"] = "IsToday", v3[v3.IsWeekday = "is-weekday"] = "IsWeekday", v3[v3.IsWeekend = "is-weekend"] = "IsWeekend", v3))(Na3 || {});
var Pa3 = ((c3) => (c3[c3.IsAfter = "is-after"] = "IsAfter", c3[c3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", c3[c3.IsBefore = "is-before"] = "IsBefore", c3[c3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", c3[c3.IsBetween = "is-between"] = "IsBetween", c3[c3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", c3[c3.IsEqual = "is-equal"] = "IsEqual", c3[c3.IsGreaterThan = "greater-than"] = "IsGreaterThan", c3[c3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", c3[c3.IsInteger = "is-integer"] = "IsInteger", c3[c3.IsLessThan = "less-than"] = "IsLessThan", c3[c3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", c3[c3.IsMonth = "is-month"] = "IsMonth", c3[c3.IsNotEqual = "is-not-equal"] = "IsNotEqual", c3[c3.IsNotNull = "is-not-null"] = "IsNotNull", c3[c3.IsNumber = "is-number"] = "IsNumber", c3[c3.IsOddNumber = "is-odd-number"] = "IsOddNumber", c3[c3.IsThisMonth = "is-this-month"] = "IsThisMonth", c3))(Pa3 || {});
var ka3 = ((h3) => (h3[h3.IsAfter = "is-after"] = "IsAfter", h3[h3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", h3[h3.IsBefore = "is-before"] = "IsBefore", h3[h3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", h3[h3.IsBetween = "is-between"] = "IsBetween", h3[h3.IsEqual = "is-equal"] = "IsEqual", h3[h3.IsNotEqual = "is-not-equal"] = "IsNotEqual", h3[h3.IsNotNull = "is-not-null"] = "IsNotNull", h3[h3.IsTime = "is-time"] = "IsTime", h3))(ka3 || {});
var Ma3 = ((h3) => (h3[h3.IsAfter = "is-after"] = "IsAfter", h3[h3.IsBefore = "is-before"] = "IsBefore", h3[h3.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", h3[h3.IsBetween = "is-between"] = "IsBetween", h3[h3.IsTime = "is-time"] = "IsTime", h3[h3.IsEqual = "is-equal"] = "IsEqual", h3[h3.IsNotEqual = "is-not-equal"] = "IsNotEqual", h3[h3.IsNotNull = "is-not-null"] = "IsNotNull", h3[h3.IsTimeRange = "is-time-range"] = "IsTimeRange", h3))(Ma3 || {});
var za3 = ((I3) => (I3[I3.IsAfter = "is-after"] = "IsAfter", I3[I3.IsBefore = "is-before"] = "IsBefore", I3[I3.IsBeforeOrAfter = "is-before-or-after"] = "IsBeforeOrAfter", I3[I3.IsBetween = "is-between"] = "IsBetween", I3[I3.IsEqual = "is-equal"] = "IsEqual", I3[I3.IsInList = "is-in-list"] = "IsInList", I3[I3.IsNotEqual = "is-not-equal"] = "IsNotEqual", I3[I3.IsNotInList = "is-not-in-list"] = "IsNotInList", I3[I3.IsNotNull = "is-not-null"] = "IsNotNull", I3[I3.IsTimeOfDay = "is-time-of-day"] = "IsTimeOfDay", I3[I3.IsTimeRange = "is-time-range"] = "IsTimeRange", I3))(za3 || {});
var La3 = ((g3) => (g3[g3.IsAfter = "is-after"] = "IsAfter", g3[g3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", g3[g3.IsBefore = "is-before"] = "IsBefore", g3[g3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", g3[g3.IsBetween = "is-between"] = "IsBetween", g3[g3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", g3[g3.IsEqual = "is-equal"] = "IsEqual", g3[g3.IsGreaterThan = "greater-than"] = "IsGreaterThan", g3[g3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", g3[g3.IsLessThan = "less-than"] = "IsLessThan", g3[g3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", g3[g3.IsNotEqual = "is-not-equal"] = "IsNotEqual", g3[g3.IsNotNull = "is-not-null"] = "IsNotNull", g3[g3.IsNumber = "is-number"] = "IsNumber", g3[g3.IsOddNumber = "is-odd-number"] = "IsOddNumber", g3[g3.IsWeekday = "is-weekday"] = "IsWeekday", g3[g3.IsWeekend = "is-weekend"] = "IsWeekend", g3))(La3 || {});
var Ba3 = ((c3) => (c3[c3.IsAfter = "is-after"] = "IsAfter", c3[c3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", c3[c3.IsBefore = "is-before"] = "IsBefore", c3[c3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", c3[c3.IsBetween = "is-between"] = "IsBetween", c3[c3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", c3[c3.IsEqual = "is-equal"] = "IsEqual", c3[c3.IsGreaterThan = "greater-than"] = "IsGreaterThan", c3[c3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", c3[c3.IsInteger = "is-integer"] = "IsInteger", c3[c3.IsLessThan = "less-than"] = "IsLessThan", c3[c3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", c3[c3.IsNotEqual = "is-not-equal"] = "IsNotEqual", c3[c3.IsNotNull = "is-not-null"] = "IsNotNull", c3[c3.IsNumber = "is-number"] = "IsNumber", c3[c3.IsOddNumber = "is-odd-number"] = "IsOddNumber", c3[c3.IsThisYear = "is-this-year"] = "IsThisYear", c3[c3.IsYear = "is-year"] = "IsYear", c3))(Ba3 || {});
var Da3 = ((p3) => (p3[p3.IsEqual = "is-equal"] = "IsEqual", p3[p3.IsHexadecimal = "is-hexadecimal"] = "IsHexadecimal", p3[p3.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", p3[p3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", p3[p3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", p3[p3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", p3[p3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", p3[p3.IsNotEqual = "is-not-equal"] = "IsNotEqual", p3[p3.IsNotNull = "is-not-null"] = "IsNotNull", p3[p3.IsString = "is-string"] = "IsString", p3))(Da3 || {});
var Ga3 = ((o2) => (o2[o2.IsEqual = "is-equal"] = "IsEqual", o2[o2.IsJSON = "is-json"] = "IsJSON", o2[o2.IsNotEqual = "is-not-equal"] = "IsNotEqual", o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2))(Ga3 || {});
var Ka3 = ((A2) => (A2[A2.IsEqual = "is-equal"] = "IsEqual", A2[A2.IsNotEqual = "is-not-equal"] = "IsNotEqual", A2[A2.IsNotNull = "is-not-null"] = "IsNotNull", A2[A2.IsMarkdown = "is-markdown"] = "IsMarkdown", A2[A2.IsString = "is-string"] = "IsString", A2))(Ka3 || {});
var wa3 = ((o2) => (o2[o2.Contains = "contains"] = "Contains", o2[o2.IsEqual = "is-equal"] = "IsEqual", o2[o2.IsNotEqual = "is-not-equal"] = "IsNotEqual", o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2))(wa3 || {});
var qa3 = ((o2) => (o2[o2.Contains = "contains"] = "Contains", o2[o2.IsEqual = "is-equal"] = "IsEqual", o2[o2.IsNotEqual = "is-not-equal"] = "IsNotEqual", o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2))(qa3 || {});
var Ra3 = ((_3) => (_3[_3.Contains = "contains"] = "Contains", _3[_3.IsDataURI = "is-data-uri"] = "IsDataURI", _3[_3.IsEqual = "is-equal"] = "IsEqual", _3[_3.IsNotEqual = "is-not-equal"] = "IsNotEqual", _3[_3.IsNotNull = "is-not-null"] = "IsNotNull", _3[_3.IsString = "is-string"] = "IsString", _3))(Ra3 || {});
var Fa3 = ((_3) => (_3[_3.Contains = "contains"] = "Contains", _3[_3.IsDomainName = "is-domain-name"] = "IsDomainName", _3[_3.IsEqual = "is-equal"] = "IsEqual", _3[_3.IsNotEqual = "is-not-equal"] = "IsNotEqual", _3[_3.IsNotNull = "is-not-null"] = "IsNotNull", _3[_3.IsString = "is-string"] = "IsString", _3))(Fa3 || {});
var Ha3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEmailAddress = "is-email-address"] = "IsEmailAddress", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Ha3 || {});
var Oa3 = ((p3) => (p3[p3.Contains = "contains"] = "Contains", p3[p3.IsEqual = "is-equal"] = "IsEqual", p3[p3.IsIPAddress = "is-ip-address"] = "IsIPAddress", p3[p3.IsInIPAddressRange = "is-in-ip-address-range"] = "IsInIPAddressRange", p3[p3.IsInList = "is-in-list"] = "IsInList", p3[p3.IsNotEqual = "is-not-equal"] = "IsNotEqual", p3[p3.IsNotInList = "is-not-in-list"] = "IsNotInList", p3[p3.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", p3[p3.IsNotNull = "is-not-null"] = "IsNotNull", p3[p3.IsString = "is-string"] = "IsString", p3))(Oa3 || {});
var ja3 = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsIPAddressRange = "is-ip-address-range"] = "IsIPAddressRange", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ja3 || {});
var Va3 = ((e3) => (e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsGreaterThan = "greater-than"] = "IsGreaterThan", e3[e3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", e3[e3.IsInteger = "is-integer"] = "IsInteger", e3[e3.IsLessThan = "less-than"] = "IsLessThan", e3[e3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3))(Va3 || {});
var Wa3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsMACAddress = "is-mac-address"] = "IsMACAddress", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Wa3 || {});
var Ja3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsMagnetURI = "is-magnet-uri"] = "IsMagnetURI", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Ja3 || {});
var Za3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsMimeType = "is-mime-type"] = "IsMimeType", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(Za3 || {});
var Ya3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsSlug = "is-slug"] = "IsSlug", e3))(Ya3 || {});
var Qa3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsURL = "is-url"] = "IsURL", e3))(Qa3 || {});
var $a3 = ((f3) => (f3[f3.IsAfter = "is-after"] = "IsAfter", f3[f3.IsAfterOrEqual = "is-after-or-equal"] = "IsAfterOrEqual", f3[f3.IsBefore = "is-before"] = "IsBefore", f3[f3.IsBeforeOrEqual = "is-before-or-equal"] = "IsBeforeOrEqual", f3[f3.IsBetween = "is-between"] = "IsBetween", f3[f3.IsDecimal = "is-decimal"] = "IsDecimal", f3[f3.IsDivisibleBy = "is-divisible-by"] = "IsDivisibleBy", f3[f3.IsEAN = "is-ean"] = "IsEAN", f3[f3.IsEIN = "is-ein"] = "IsEIN", f3[f3.IsEqual = "is-equal"] = "IsEqual", f3[f3.IsEvenNumber = "is-even-number"] = "IsEvenNumber", f3[f3.IsFloat = "is-float"] = "IsFloat", f3[f3.IsGreaterThan = "greater-than"] = "IsGreaterThan", f3[f3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", f3[f3.IsInt = "is-integer"] = "IsInt", f3[f3.IsISBN = "is-isbn"] = "IsISBN", f3[f3.IsISMN = "is-ismn"] = "IsISMN", f3[f3.IsISSN = "is-issn"] = "IsISSN", f3[f3.IsLatitude = "is-latitude"] = "IsLatitude", f3[f3.IsLongitude = "is-longitude"] = "IsLongitude", f3[f3.IsLessThan = "less-than"] = "IsLessThan", f3[f3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", f3[f3.IsMACAddress = "is-mac-address"] = "IsMACAddress", f3[f3.IsNumber = "is-number"] = "IsNumber", f3[f3.IsNegativeNumber = "is-negative-number"] = "IsNegativeNumber", f3[f3.IsNotEqual = "is-not-equal"] = "IsNotEqual", f3[f3.IsNotNull = "is-not-null"] = "IsNotNull", f3[f3.IsOddNumber = "is-odd-number"] = "IsOddNumber", f3[f3.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", f3[f3.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", f3[f3.IsPort = "is-port"] = "IsPort", f3[f3.IsPositiveNumber = "is-positive-number"] = "IsPositiveNumber", f3[f3.IsPostalCode = "is-postal-code"] = "IsPostalCode", f3[f3.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", f3[f3.IsSSN = "is-ssn"] = "IsSSN", f3[f3.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", f3[f3.IsUUID = "is-uuid"] = "IsUUID", f3[f3.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", f3))($a3 || {});
var Xa3 = ((p3) => (p3[p3.IsEqual = "is-equal"] = "IsEqual", p3[p3.IsFloat = "is-float"] = "IsFloat", p3[p3.IsGreaterThan = "greater-than"] = "IsGreaterThan", p3[p3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", p3[p3.IsLessThan = "less-than"] = "IsLessThan", p3[p3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", p3[p3.IsNotEqual = "is-not-equal"] = "IsNotEqual", p3[p3.IsNotNull = "is-not-null"] = "IsNotNull", p3[p3.IsNumber = "is-number"] = "IsNumber", p3[p3.IsNumeric = "is-numeric"] = "IsNumeric", p3))(Xa3 || {});
var Ca3 = ((p3) => (p3[p3.IsEqual = "is-equal"] = "IsEqual", p3[p3.IsInteger = "is-integer"] = "IsInteger", p3[p3.IsGreaterThan = "greater-than"] = "IsGreaterThan", p3[p3.IsGreaterThanOrEqual = "greater-than-or-equal"] = "IsGreaterThanOrEqual", p3[p3.IsLessThan = "less-than"] = "IsLessThan", p3[p3.IsLessThanOrEqual = "less-than-or-equal"] = "IsLessThanOrEqual", p3[p3.IsNotEqual = "is-not-equal"] = "IsNotEqual", p3[p3.IsNotNull = "is-not-null"] = "IsNotNull", p3[p3.IsNumber = "is-number"] = "IsNumber", p3[p3.IsNumeric = "is-numeric"] = "IsNumeric", p3))(Ca3 || {});
var ae3 = ((I3) => (I3[I3.IsCreditCard = "is-credit-card"] = "IsCreditCard", I3[I3.IsEqual = "is-equal"] = "IsEqual", I3[I3.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", I3[I3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", I3[I3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", I3[I3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", I3[I3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", I3[I3.IsNotEqual = "is-not-equal"] = "IsNotEqual", I3[I3.IsNotNull = "is-not-null"] = "IsNotNull", I3[I3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", I3[I3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", I3))(ae3 || {});
var ee3 = ((E3) => (E3[E3.isEmailAddress = "is-email-address"] = "isEmailAddress", E3[E3.IsEqual = "is-equal"] = "IsEqual", E3[E3.IsInList = "is-in-list"] = "IsInList", E3[E3.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", E3[E3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", E3[E3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", E3[E3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", E3[E3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", E3[E3.IsNotEqual = "is-not-equal"] = "IsNotEqual", E3[E3.IsNotInList = "is-not-in-list"] = "IsNotInList", E3[E3.IsNotNull = "is-not-null"] = "IsNotNull", E3[E3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", E3[E3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", E3))(ee3 || {});
var Ge2 = ((A2) => (A2[A2.IsLicensePlateNumber = "is-license-plate-number"] = "IsLicensePlateNumber", A2[A2.IsNotNull = "is-not-null"] = "IsNotNull", A2[A2.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", A2[A2.IsString = "is-string"] = "IsString", A2[A2.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", A2))(Ge2 || {});
var ie3 = ((o2) => (o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2[o2.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", o2[o2.IsString = "is-string"] = "IsString", o2[o2.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", o2))(ie3 || {});
var ne3 = ((y3) => (y3[y3.IsComplexEnough = "is-complex-enough"] = "IsComplexEnough", y3[y3.IsInList = "is-in-list"] = "IsInList", y3[y3.IsNotInList = "is-not-in-list"] = "IsNotInList", y3[y3.IsNotNull = "is-not-null"] = "IsNotNull", y3[y3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", y3[y3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", y3[y3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", y3[y3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", y3[y3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", y3[y3.IsStrongPassword = "is-strong-password"] = "IsStrongPassword", y3[y3.IsString = "is-string"] = "IsString", y3[y3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", y3))(ne3 || {});
var re3 = ((A2) => (A2[A2.IsNotNull = "is-not-null"] = "IsNotNull", A2[A2.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", A2[A2.IsNumber = "is-number"] = "IsNumber", A2[A2.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", A2[A2.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", A2))(re3 || {});
var se3 = ((o2) => (o2[o2.IsNotNull = "is-not-null"] = "IsNotNull", o2[o2.IsSSN = "is-ssn"] = "IsSSN", o2[o2.IsString = "is-string"] = "IsString", o2[o2.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", o2))(se3 || {});
var te3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsBIC = "is-bic"] = "IsBIC", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(te3 || {});
var oe3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEAN = "is-ean"] = "IsEAN", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(oe3 || {});
var me3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEIN = "is-ein"] = "IsEIN", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(me3 || {});
var le3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsIBAN = "is-iban"] = "IsIBAN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(le3 || {});
var ce2 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsISBN = "is-isbn"] = "IsISBN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ce2 || {});
var ue3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsISIN = "is-isin"] = "IsISIN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(ue3 || {});
var de2 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsISMN = "is-ismn"] = "IsISMN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(de2 || {});
var pe2 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsISSN = "is-issn"] = "IsISSN", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3))(pe2 || {});
var ge3 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", e3))(ge3 || {});
var Ae2 = ((e3) => (e3[e3.Contains = "contains"] = "Contains", e3[e3.IsEqual = "is-equal"] = "IsEqual", e3[e3.IsInList = "is-in-list"] = "IsInList", e3[e3.IsNotEqual = "is-not-equal"] = "IsNotEqual", e3[e3.IsNotInList = "is-not-in-list"] = "IsNotInList", e3[e3.IsNotNull = "is-not-null"] = "IsNotNull", e3[e3.IsString = "is-string"] = "IsString", e3[e3.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", e3))(Ae2 || {});
var Te2 = ((t3) => (t3[t3.Contains = "contains"] = "Contains", t3[t3.HasNumberCount = "has-number-count"] = "HasNumberCount", t3[t3.HasLowercaseCount = "has-lowercase-count"] = "HasLowercaseCount", t3[t3.HasLetterCount = "has-letter-count"] = "HasLetterCount", t3[t3.HasSpacesCount = "has-spaces-count"] = "HasSpacesCount", t3[t3.HasSymbolCount = "has-symbol-count"] = "HasSymbolCount", t3[t3.HasUppercaseCount = "has-uppercase-count"] = "HasUppercaseCount", t3[t3.IsAlpha = "is-alpha"] = "IsAlpha", t3[t3.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", t3[t3.IsAscii = "is-ascii"] = "IsAscii", t3[t3.IsBase64 = "is-base-64"] = "IsBase64", t3[t3.IsColor = "is-color"] = "IsColor", t3[t3.IsComplexEnough = "is-complex-enough"] = "IsComplexEnough", t3[t3.IsCreditCard = "is-credit-card"] = "IsCreditCard", t3[t3.IsDataURI = "is-data-uri"] = "IsDataURI", t3[t3.IsDomainName = "is-domain-name"] = "IsDomainName", t3[t3.IsEmailAddress = "is-email-address"] = "IsEmailAddress", t3[t3.IsEthereumAddress = "is-ethereum-address"] = "IsEthereumAddress", t3[t3.IsEAN = "is-ean"] = "IsEAN", t3[t3.IsEIN = "is-ein"] = "IsEIN", t3[t3.IsEqual = "is-equal"] = "IsEqual", t3[t3.IsIBAN = "is-iban"] = "IsIBAN", t3[t3.IsHSLColor = "is-hsl-color"] = "IsHSLColor", t3[t3.IsHexColor = "is-hex-color"] = "IsHexColor", t3[t3.IsHexadecimal = "is-hexadecimal"] = "IsHexadecimal", t3[t3.IsIdentityCardCode = "is-identity-card-code"] = "IsIdentityCardCode", t3[t3.IsIMEI = "is-imei"] = "IsIMEI", t3[t3.IsInList = "is-in-list"] = "IsInList", t3[t3.IsIPAddress = "is-ip-address"] = "IsIPAddress", t3[t3.IsInIPAddressRange = "is-in-ip-address-range"] = "IsInIPAddressRange", t3[t3.IsISBN = "is-isbn"] = "IsISBN", t3[t3.IsISIN = "is-isin"] = "IsISIN", t3[t3.IsISMN = "is-ismn"] = "IsISMN", t3[t3.IsISRC = "is-isrc"] = "IsISRC", t3[t3.IsISSN = "is-issn"] = "IsISSN", t3[t3.IsLanguage = "is-language"] = "IsLanguage", t3[t3.IsLatitude = "is-latitude"] = "IsLatitude", t3[t3.IsLongitude = "is-longitude"] = "IsLongitude", t3[t3.IsLengthEqual = "is-length-equal"] = "IsLengthEqual", t3[t3.IsLengthGreaterThan = "is-length-greater-than"] = "IsLengthGreaterThan", t3[t3.IsLengthGreaterThanOrEqual = "is-length-great-than-or-equal"] = "IsLengthGreaterThanOrEqual", t3[t3.IsLengthLessThan = "is-length-less-than"] = "IsLengthLessThan", t3[t3.IsLengthLessThanOrEqual = "is-length-less-than-or-equal"] = "IsLengthLessThanOrEqual", t3[t3.IsLicensePlateNumber = "is-license-plate-number"] = "IsLicensePlateNumber", t3[t3.IsLowercase = "is-lowercase"] = "IsLowercase", t3[t3.IsOctal = "is-octal"] = "IsOctal", t3[t3.IsMACAddress = "is-mac-address"] = "IsMACAddress", t3[t3.IsMD5 = "is-md5"] = "IsMD5", t3[t3.IsMagnetURI = "is-magnet-uri"] = "IsMagnetURI", t3[t3.IsMarkdown = "is-markdown"] = "IsMarkdown", t3[t3.IsMimeType = "is-mime-type"] = "IsMimeType", t3[t3.IsMonth = "is-month"] = "IsMonth", t3[t3.IsNotInIPAddressRange = "is-not-in-ip-address-range"] = "IsNotInIPAddressRange", t3[t3.IsNotInList = "is-not-in-list"] = "IsNotInList", t3[t3.IsNotNull = "is-not-null"] = "IsNotNull", t3[t3.IsNotRegexMatch = "is-not-regex-match"] = "IsNotRegexMatch", t3[t3.IsNumber = "is-number"] = "IsNumber", t3[t3.IsNumeric = "is-numeric"] = "IsNumeric", t3[t3.IsPassportNumber = "is-passport-number"] = "IsPassportNumber", t3[t3.IsPhoneNumber = "is-phone-number"] = "IsPhoneNumber", t3[t3.IsPort = "is-port"] = "IsPort", t3[t3.IsPostalCode = "is-postal-code"] = "IsPostalCode", t3[t3.IsProvince = "is-province"] = "IsProvince", t3[t3.IsRegexMatch = "is-regex-match"] = "IsRegexMatch", t3[t3.IsSemanticVersion = "is-semantic-version"] = "IsSemanticVersion", t3[t3.IsSlug = "is-slug"] = "IsSlug", t3[t3.IsSSN = "is-ssn"] = "IsSSN", t3[t3.IsState = "is-state"] = "IsState", t3[t3.IsStreetAddress = "is-street-address"] = "IsStreetAddress", t3[t3.IsString = "is-string"] = "IsString", t3[t3.IsTaxIDNumber = "is-tax-id-number"] = "IsTaxIDNumber", t3[t3.IsURL = "is-url"] = "IsURL", t3[t3.IsUUID = "is-uuid"] = "IsUUID", t3[t3.IsUppercase = "is-uppercase"] = "IsUppercase", t3[t3.IsVATIDNumber = "is-vat-id-number"] = "IsVATIDNumber", t3[t3.IsWeekday = "is-weekday"] = "IsWeekday", t3[t3.IsWeekend = "is-weekend"] = "IsWeekend", t3[t3.IsYear = "is-year"] = "IsYear", t3))(Te2 || {});
var fe2 = ((p3) => (p3[p3.Contains = "contains"] = "Contains", p3[p3.IsAlpha = "is-alpha"] = "IsAlpha", p3[p3.IsAlphanumeric = "is-alphanumeric"] = "IsAlphanumeric", p3[p3.IsInList = "is-in-list"] = "IsInList", p3[p3.IsMarkdown = "is-markdown"] = "IsMarkdown", p3[p3.IsNotInList = "is-not-in-list"] = "IsNotInList", p3[p3.IsNumeric = "is-numeric"] = "IsNumeric", p3[p3.IsLowercase = "is-lowercase"] = "IsLowercase", p3[p3.IsString = "is-string"] = "IsString", p3[p3.IsUppercase = "is-uppercase"] = "IsUppercase", p3))(fe2 || {});
var _e2 = ((e3) => (e3.InvalidCharacters = "invalid-characters", e3.InvalidPattern = "invalid-pattern", e3.NotComplexEnough = "not-complex-enough", e3.NotUnique = "not-unique", e3.NotValidEmail = "not-valid-email", e3.TooLong = "too-long", e3.TooShort = "too-short", e3.Required = "required", e3))(_e2 || {});
var he2 = ((N3) => (N3[N3.Allowed = 0] = "Allowed", N3[N3.Blocked = 1] = "Blocked", N3))(he2 || {});
var Se2 = ((d2) => (d2.Canceled = "Canceled", d2.Completed = "Completed", d2.Created = "Created", d2.Faulted = "Faulted", d2.Queued = "Queued", d2.Running = "Running", d2.Waiting = "Waiting", d2))(Se2 || {});
var Ie2 = ((d2) => (d2.Archived = "ARCHIVED", d2.Compromised = "COMPROMISED", d2.Confirmed = "CONFIRMED", d2.ForcePasswordChange = "FORCE_CHANGE_PASSWORD", d2.ResetRequired = "RESET_REQUIRED", d2.Unconfirmed = "UNCONFIRMED", d2.Unknown = "UNKNOWN", d2))(Ie2 || {});
var be2 = ((o2) => (o2.Owner = "Owner", o2.Admin = "Admin", o2.User = "User", o2.Visitor = "Visitor", o2))(be2 || {});
var ve2 = ((d2) => (d2.RequiresPaymentMethod = "requires_payment_method", d2.RequiresConfirmation = "requires_confirmation", d2.RequiresAction = "requires_action", d2.Processing = "processing", d2.RequiresCapture = "requires_capture", d2.Canceled = "canceled", d2.Succeeded = "succeeded", d2))(ve2 || {});
var Ue2 = ((d2) => (d2.Incomplete = "incomplete", d2.IncompleteExpired = "incomplete_expired", d2.Trialing = "trialing", d2.Active = "active", d2.PastDue = "past_due", d2.Canceled = "canceled", d2.Unpaid = "unpaid", d2))(Ue2 || {});
var Ee2 = ((o2) => (o2.Monthly = "monthly", o2.Quarterly = "quarterly", o2.Yearly = "yearly", o2.Lifetime = "lifetime", o2))(Ee2 || {});
var ye2 = ((o2) => (o2.Delivered = "delivered", o2.Read = "read", o2.Sending = "sending", o2.Sent = "sent", o2))(ye2 || {});
var xe2 = ((A2) => (A2.Audio = "audio", A2.File = "file", A2.Image = "image", A2.Text = "text", A2.Video = "video", A2))(xe2 || {});
var Ne2 = ((o2) => (o2.Audio = "audio", o2.File = "file", o2.Image = "image", o2.Video = "video", o2))(Ne2 || {});
var Pe2 = ((e3) => (e3.Angry = "angry", e3.Laugh = "laugh", e3.Like = "like", e3.Love = "love", e3.Sad = "sad", e3.Wow = "wow", e3.Wink = "wink", e3.Yay = "yay", e3))(Pe2 || {});
var ke2 = ((N3) => (N3.Email = "email", N3.PhoneNumber = "phone_number", N3))(ke2 || {});
var Me2 = ((d2) => (d2.Analytics = "analytics", d2.Critical = "critical", d2.Debug = "debug", d2.Exception = "exception", d2.Http = "http", d2.Info = "info", d2.Warning = "warning", d2))(Me2 || {});
var ze2 = ((_3) => (_3.Delete = "delete", _3.Get = "get", _3.Head = "head", _3.Patch = "patch", _3.Post = "post", _3.Put = "put", _3))(ze2 || {});
var Le2 = ((u3) => (u3[u3.CONTINUE = 100] = "CONTINUE", u3[u3.SWITCHING_PROTOCOLS = 101] = "SWITCHING_PROTOCOLS", u3[u3.PROCESSING = 102] = "PROCESSING", u3[u3.OK = 200] = "OK", u3[u3.CREATED = 201] = "CREATED", u3[u3.ACCEPTED = 202] = "ACCEPTED", u3[u3.NON_AUTHORITATIVE_INFORMATION = 203] = "NON_AUTHORITATIVE_INFORMATION", u3[u3.NO_CONTENT = 204] = "NO_CONTENT", u3[u3.RESET_CONTENT = 205] = "RESET_CONTENT", u3[u3.PARTIAL_CONTENT = 206] = "PARTIAL_CONTENT", u3[u3.MULTI_STATUS = 207] = "MULTI_STATUS", u3[u3.ALREADY_REPORTED = 208] = "ALREADY_REPORTED", u3[u3.IM_USED = 226] = "IM_USED", u3[u3.MULTIPLE_CHOICES = 300] = "MULTIPLE_CHOICES", u3[u3.MOVED_PERMANENTLY = 301] = "MOVED_PERMANENTLY", u3[u3.FOUND = 302] = "FOUND", u3[u3.SEE_OTHER = 303] = "SEE_OTHER", u3[u3.NOT_MODIFIED = 304] = "NOT_MODIFIED", u3[u3.USE_PROXY = 305] = "USE_PROXY", u3[u3.SWITCH_PROXY = 306] = "SWITCH_PROXY", u3[u3.TEMPORARY_REDIRECT = 307] = "TEMPORARY_REDIRECT", u3[u3.PERMANENT_REDIRECT = 308] = "PERMANENT_REDIRECT", u3[u3.BAD_REQUEST = 400] = "BAD_REQUEST", u3[u3.UNAUTHORIZED = 401] = "UNAUTHORIZED", u3[u3.PAYMENT_REQUIRED = 402] = "PAYMENT_REQUIRED", u3[u3.FORBIDDEN = 403] = "FORBIDDEN", u3[u3.NOT_FOUND = 404] = "NOT_FOUND", u3[u3.METHOD_NOT_ALLOWED = 405] = "METHOD_NOT_ALLOWED", u3[u3.NOT_ACCEPTABLE = 406] = "NOT_ACCEPTABLE", u3[u3.PROXY_AUTHENTICATION_REQUIRED = 407] = "PROXY_AUTHENTICATION_REQUIRED", u3[u3.REQUEST_TIMEOUT = 408] = "REQUEST_TIMEOUT", u3[u3.CONFLICT = 409] = "CONFLICT", u3[u3.GONE = 410] = "GONE", u3[u3.LENGTH_REQUIRED = 411] = "LENGTH_REQUIRED", u3[u3.PRECONDITION_FAILED = 412] = "PRECONDITION_FAILED", u3[u3.PAYLOAD_TOO_LARGE = 413] = "PAYLOAD_TOO_LARGE", u3[u3.URI_TOO_LONG = 414] = "URI_TOO_LONG", u3[u3.UNSUPPORTED_MEDIA_TYPE = 415] = "UNSUPPORTED_MEDIA_TYPE", u3[u3.RANGE_NOT_SATISFIABLE = 416] = "RANGE_NOT_SATISFIABLE", u3[u3.EXPECTATION_FAILED = 417] = "EXPECTATION_FAILED", u3[u3.I_AM_A_TEAPOT = 418] = "I_AM_A_TEAPOT", u3[u3.MISDIRECTED_REQUEST = 421] = "MISDIRECTED_REQUEST", u3[u3.UNPROCESSABLE_ENTITY = 422] = "UNPROCESSABLE_ENTITY", u3[u3.LOCKED = 423] = "LOCKED", u3[u3.FAILED_DEPENDENCY = 424] = "FAILED_DEPENDENCY", u3[u3.TOO_EARLY = 425] = "TOO_EARLY", u3[u3.UPGRADE_REQUIRED = 426] = "UPGRADE_REQUIRED", u3[u3.PRECONDITION_REQUIRED = 428] = "PRECONDITION_REQUIRED", u3[u3.TOO_MANY_REQUESTS = 429] = "TOO_MANY_REQUESTS", u3[u3.REQUEST_HEADER_FIELDS_TOO_LARGE = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE", u3[u3.UNAVAILABLE_FOR_LEGAL_REASONS = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS", u3[u3.INTERNAL_SERVER_ERROR = 500] = "INTERNAL_SERVER_ERROR", u3[u3.NOT_IMPLEMENTED = 501] = "NOT_IMPLEMENTED", u3[u3.BAD_GATEWAY = 502] = "BAD_GATEWAY", u3[u3.SERVICE_UNAVAILABLE = 503] = "SERVICE_UNAVAILABLE", u3[u3.GATEWAY_TIMEOUT = 504] = "GATEWAY_TIMEOUT", u3[u3.HTTP_VERSION_NOT_SUPPORTED = 505] = "HTTP_VERSION_NOT_SUPPORTED", u3[u3.VARIANT_ALSO_NEGOTIATES = 506] = "VARIANT_ALSO_NEGOTIATES", u3[u3.INSUFFICIENT_STORAGE = 507] = "INSUFFICIENT_STORAGE", u3[u3.LOOP_DETECTED = 508] = "LOOP_DETECTED", u3[u3.BANDWIDTH_LIMIT_EXCEEDED = 509] = "BANDWIDTH_LIMIT_EXCEEDED", u3[u3.NOT_EXTENDED = 510] = "NOT_EXTENDED", u3[u3.NETWORK_AUTHENTICATION_REQUIRED = 511] = "NETWORK_AUTHENTICATION_REQUIRED", u3))(Le2 || {});
var k3 = ((n2) => (n2.Afghanistan = "AF", n2.Albania = "AL", n2.Algeria = "DZ", n2.AmericanSamoa = "AS", n2.Andorra = "AD", n2.Angola = "AO", n2.Anguilla = "AI", n2.Antarctica = "AQ", n2.AntiguaAndBarbuda = "AG", n2.Argentina = "AR", n2.Armenia = "AM", n2.Aruba = "AW", n2.Australia = "AU", n2.Austria = "AT", n2.Azerbaijan = "AZ", n2.Bahamas = "BS", n2.Bahrain = "BH", n2.Bangladesh = "BD", n2.Barbados = "BB", n2.Belarus = "BY", n2.Belgium = "BE", n2.Belize = "BZ", n2.Benin = "BJ", n2.Bermuda = "BM", n2.Bhutan = "BT", n2.Bolivia = "BO", n2.BosniaAndHerzegovina = "BA", n2.Botswana = "BW", n2.BouvetIsland = "BV", n2.Brazil = "BR", n2.BritishIndianOceanTerritory = "IO", n2.Brunei = "BN", n2.Bulgaria = "BG", n2.BurkinaFaso = "BF", n2.Burundi = "BI", n2.Cambodia = "KH", n2.Cameroon = "CM", n2.Canada = "CA", n2.CapeVerde = "CV", n2.CaymanIslands = "KY", n2.CentralAfricanRepublic = "CF", n2.Chad = "TD", n2.Chile = "CL", n2.China = "CN", n2.ChristmasIsland = "CX", n2.CocosKeelingIslands = "CC", n2.Colombia = "CO", n2.Comoros = "KM", n2.Congo = "CG", n2.CongoTheDemocraticRepublicOfThe = "CD", n2.CookIslands = "CK", n2.CostaRica = "CR", n2.CoteDIvoire = "CI", n2.Croatia = "HR", n2.Cuba = "CU", n2.Cyprus = "CY", n2.CzechRepublic = "CZ", n2.Denmark = "DK", n2.Djibouti = "DJ", n2.Dominica = "DM", n2.DominicanRepublic = "DO", n2.Ecuador = "EC", n2.Egypt = "EG", n2.ElSalvador = "SV", n2.EquatorialGuinea = "GQ", n2.Eritrea = "ER", n2.Estonia = "EE", n2.Ethiopia = "ET", n2.FalklandIslands = "FK", n2.FaroeIslands = "FO", n2.Fiji = "FJ", n2.Finland = "FI", n2.France = "FR", n2.FrenchGuiana = "GF", n2.FrenchPolynesia = "PF", n2.FrenchSouthernTerritories = "TF", n2.Gabon = "GA", n2.Gambia = "GM", n2.Georgia = "GE", n2.Germany = "DE", n2.Ghana = "GH", n2.Gibraltar = "GI", n2.Greece = "GR", n2.Greenland = "GL", n2.Grenada = "GD", n2.Guadeloupe = "GP", n2.Guam = "GU", n2.Guatemala = "GT", n2.Guernsey = "GG", n2.Guinea = "GN", n2.GuineaBissau = "GW", n2.Guyana = "GY", n2.Haiti = "HT", n2.HeardIslandMcdonaldIslands = "HM", n2.HolySeeVaticanCityState = "VA", n2.Honduras = "HN", n2.HongKong = "HK", n2.Hungary = "HU", n2.Iceland = "IS", n2.India = "IN", n2.Indonesia = "ID", n2.Iran = "IR", n2.Iraq = "IQ", n2.Ireland = "IE", n2.IsleOfMan = "IM", n2.Israel = "IL", n2.Italy = "IT", n2.Jamaica = "JM", n2.Japan = "JP", n2.Jersey = "JE", n2.Jordan = "JO", n2.Kazakhstan = "KZ", n2.Kenya = "KE", n2.Kiribati = "KI", n2.Kuwait = "KW", n2.Kyrgyzstan = "KG", n2.Laos = "LA", n2.Latvia = "LV", n2.Lebanon = "LB", n2.Lesotho = "LS", n2.Liberia = "LR", n2.Libya = "LY", n2.Liechtenstein = "LI", n2.Lithuania = "LT", n2.Luxembourg = "LU", n2.Macau = "MO", n2.Madagascar = "MG", n2.Malawi = "MW", n2.Malaysia = "MY", n2.Maldives = "MV", n2.Mali = "ML", n2.Malta = "MT", n2.MarshallIslands = "MH", n2.Martinique = "MQ", n2.Mauritania = "MR", n2.Mauritius = "MU", n2.Mayotte = "YT", n2.Mexico = "MX", n2.MicronesiaFederatedStatesOf = "FM", n2.Moldova = "MD", n2.Monaco = "MC", n2.Mongolia = "MN", n2.Montenegro = "ME", n2.Montserrat = "MS", n2.Morocco = "MA", n2.Mozambique = "MZ", n2.Myanmar = "MM", n2.Namibia = "NA", n2.Nauru = "NR", n2.Nepal = "NP", n2.Netherlands = "NL", n2.NetherlandsAntilles = "AN", n2.NewCaledonia = "NC", n2.NewZealand = "NZ", n2.NorthKorea = "KP", n2.Nicaragua = "NI", n2.Niger = "NE", n2.Nigeria = "NG", n2.Niue = "NU", n2.NorfolkIsland = "NF", n2.NorthMacedonia = "MK", n2.NorthernMarianaIslands = "MP", n2.Norway = "NO", n2.Oman = "OM", n2.Pakistan = "PK", n2.Palau = "PW", n2.PalestinianTerritoryOccupied = "PS", n2.Panama = "PA", n2.PapuaNewGuinea = "PG", n2.Paraguay = "PY", n2.Peru = "PE", n2.Philippines = "PH", n2.Pitcairn = "PN", n2.Poland = "PL", n2.Portugal = "PT", n2.PuertoRico = "PR", n2.Qatar = "QA", n2.Reunion = "RE", n2.Romania = "RO", n2.RussianFederation = "RU", n2.Rwanda = "RW", n2.SaintBarthelemy = "BL", n2.SaintHelena = "SH", n2.SaintKittsAndNevis = "KN", n2.SaintLucia = "LC", n2.SaintMartin = "MF", n2.SaintPierreAndMiquelon = "PM", n2.SaintVincentAndTheGrenadines = "VC", n2.Samoa = "WS", n2.SanMarino = "SM", n2.SaoTomeAndPrincipe = "ST", n2.SaudiArabia = "SA", n2.Senegal = "SN", n2.Serbia = "RS", n2.SerbiaAndMontenegro = "CS", n2.Seychelles = "SC", n2.SierraLeone = "SL", n2.Singapore = "SG", n2.Slovakia = "SK", n2.Slovenia = "SI", n2.SolomonIslands = "SB", n2.Somalia = "SO", n2.SouthAfrica = "ZA", n2.SouthGeorgiaAndTheSouthSandwichIslands = "GS", n2.SouthKorea = "KR", n2.Spain = "ES", n2.SriLanka = "LK", n2.Sudan = "SD", n2.Suriname = "SR", n2.SvalbardAndJanMayen = "SJ", n2.Swaziland = "SZ", n2.Sweden = "SE", n2.Switzerland = "CH", n2.Syria = "SY", n2.Taiwan = "TW", n2.Tajikistan = "TJ", n2.Tanzania = "TZ", n2.Thailand = "TH", n2.TimorLeste = "TL", n2.Togo = "TG", n2.Tokelau = "TK", n2.Tonga = "TO", n2.TrinidadAndTobago = "TT", n2.Tunisia = "TN", n2.Turkey = "TR", n2.Turkmenistan = "TM", n2.TurksAndCaicosIslands = "TC", n2.Tuvalu = "TV", n2.Uganda = "UG", n2.Ukraine = "UA", n2.UnitedArabEmirates = "AE", n2.UnitedKingdom = "GB", n2.UnitedStates = "US", n2.UnitedStatesMinorOutlyingIslands = "UM", n2.Uruguay = "UY", n2.Uzbekistan = "UZ", n2.Vanuatu = "VU", n2.Venezuela = "VE", n2.Vietnam = "VN", n2.VirginIslandsBritish = "VG", n2.VirginIslandsUS = "VI", n2.WallisAndFutuna = "WF", n2.WesternSahara = "EH", n2.Yemen = "YE", n2.Zambia = "ZM", n2.Zimbabwe = "ZW", n2))(k3 || {});
var D3 = ((s3) => (s3.AfghanistanAfghani = "AFN", s3.AlbaniaLek = "ALL", s3.ArmeniaDram = "AMD", s3.AlgeriaDinar = "DZD", s3.AmericanSamoaTala = "WST", s3.AngolaKwanza = "AOA", s3.ArgentinaPeso = "ARS", s3.AustraliaDollar = "AUD", s3.ArubaFlorin = "AWG", s3.AzerbaijanNewManat = "AZN", s3.BosniaAndHerzegovinaConvertibleMark = "BAM", s3.BahrainDinar = "BHD", s3.BarbadosDollar = "BBD", s3.BangladeshTaka = "BDT", s3.BelgiumFranc = "BGN", s3.BermudaDollar = "BMD", s3.BruneiDollar = "BND", s3.BoliviaBoliviano = "BOB", s3.BrazilReal = "BRL", s3.BahamasDollar = "BSD", s3.BhutanNgultrum = "BTN", s3.BotswanaPula = "BWP", s3.BelarusRuble = "BYN", s3.BelizeDollar = "BZD", s3.BulgariaLev = "BGN", s3.BurundiFranc = "BIF", s3.BritishPound = "GBP", s3.CanadaDollar = "CAD", s3.CambodiaRiel = "KHR", s3.ComorosFranc = "KMF", s3.CaymanIslandsDollar = "KYD", s3.ChilePeso = "CLP", s3.ChinaYuan = "CNY", s3.ColombiaPeso = "COP", s3.CostaRicaColon = "CRC", s3.CroatiaKuna = "HRK", s3.CubaConvertiblePeso = "CUC", s3.CubaPeso = "CUP", s3.CapeVerdeEscudo = "CVE", s3.CyprusPound = "CYP", s3.CzechRepublicKoruna = "CZK", s3.DjiboutiFranc = "DJF", s3.DenmarkKrone = "DKK", s3.DominicaDollar = "XCD", s3.DominicanRepublicPeso = "DOP", s3.EastCaribbeanDollar = "XCD", s3.EgyptPound = "EGP", s3.ElSalvadorColon = "SVC", s3.EquatorialGuineaEkwele = "GQE", s3.EritreaNakfa = "ERN", s3.EstoniaKroon = "EEK", s3.EthiopiaBirr = "ETB", s3.Euro = "EUR", s3.FijiDollar = "FJD", s3.FalklandIslandsPound = "FKP", s3.GambiaDalasi = "GMD", s3.GabonFranc = "GMD", s3.GeorgiaLari = "GEL", s3.GhanaCedi = "GHS", s3.GibraltarPound = "GIP", s3.GuatemalaQuetzal = "GTQ", s3.GuernseyPound = "GGP", s3.GuineaBissauPeso = "GWP", s3.GuyanaDollar = "GYD", s3.HongKongDollar = "HKD", s3.HondurasLempira = "HNL", s3.HaitiGourde = "HTG", s3.HungaryForint = "HUF", s3.IndonesiaRupiah = "IDR", s3.IsleOfManPound = "IMP", s3.IsraelNewShekel = "ILS", s3.IndiaRupee = "INR", s3.IraqDinar = "IQD", s3.IranRial = "IRR", s3.IcelandKrona = "ISK", s3.JamaicaDollar = "JMD", s3.JapanYen = "JPY", s3.JerseyPound = "JEP", s3.JordanDinar = "JOD", s3.KazakhstanTenge = "KZT", s3.KenyaShilling = "KES", s3.KyrgyzstanSom = "KGS", s3.NorthKoreaWon = "KPW", s3.SouthKoreaWon = "KRW", s3.KuwaitDinar = "KWD", s3.LaosKip = "LAK", s3.LebanonPound = "LBP", s3.LiberiaDollar = "LRD", s3.LesothoLoti = "LSL", s3.LibyanDinar = "LYD", s3.LithuaniaLitas = "LTL", s3.LatviaLats = "LVL", s3.LibyaDinar = "LYD", s3.MacauPataca = "MOP", s3.MaldivesRufiyaa = "MVR", s3.MalawiKwacha = "MWK", s3.MaltaLira = "MTL", s3.MauritiusRupee = "MUR", s3.MongoliaTughrik = "MNT", s3.MoroccoDirham = "MAD", s3.MoldovaLeu = "MDL", s3.MozambiqueMetical = "MZN", s3.MadagascarAriary = "MGA", s3.MacedoniaDenar = "MKD", s3.MexicoPeso = "MXN", s3.MalaysiaRinggit = "MYR", s3.MyanmarKyat = "MMK", s3.MicronesiaFederatedStatesDollar = "USD", s3.NicaraguaCordoba = "NIO", s3.NamibiaDollar = "NAD", s3.NetherlandsAntillesGuilder = "ANG", s3.NewCaledoniaFranc = "XPF", s3.NigeriaNaira = "NGN", s3.NicaraguaCordobaOro = "NIO", s3.NigerCFAFranc = "XOF", s3.NorwayKrone = "NOK", s3.NepalRupee = "NPR", s3.NewZealandDollar = "NZD", s3.OmanRial = "OMR", s3.PanamaBalboa = "PAB", s3.PeruNuevoSol = "PEN", s3.PapuaNewGuineaKina = "PGK", s3.PhilippinesPeso = "PHP", s3.PakistanRupee = "PKR", s3.PeruNuevo = "PEN", s3.PolandZloty = "PLN", s3.ParaguayGuarani = "PYG", s3.QatarRial = "QAR", s3.RomaniaNewLeu = "RON", s3.SerbiaDinar = "RSD", s3.SriLankaRupee = "LKR", s3.RussiaRuble = "RUB", s3.RwandaFranc = "RWF", s3.SaudiArabiaRiyal = "SAR", s3.SlovakiaKoruna = "SKK", s3.SloveniaTolar = "SIT", s3.SolomonIslandsDollar = "SBD", s3.SeychellesRupee = "SCR", s3.SudanPound = "SDG", s3.SwedenKrona = "SEK", s3.SingaporeDollar = "SGD", s3.SaintHelenaPound = "SHP", s3.SierraLeoneLeone = "SLL", s3.SomaliaShilling = "SOS", s3.SurinameDollar = "SRD", s3.SintMaartenPound = "SXD", s3.SyriaPound = "SYP", s3.SwazilandLilangeni = "SZL", s3.SwitzerlandFranc = "CHF", s3.ThailandBaht = "THB", s3.TajikistanSomoni = "TJS", s3.TurkmenistanManat = "TMT", s3.TunisiaDinar = "TND", s3.TongaPaanga = "TOP", s3.TurkeyLira = "TRY", s3.TrinidadAndTobagoDollar = "TTD", s3.TaiwanNewDollar = "TWD", s3.TanzaniaShilling = "TZS", s3.UnitedArabEmiratesDirham = "AED", s3.UkraineHryvnia = "UAH", s3.UgandaShilling = "UGX", s3.UnitedKingdomPound = "GBP", s3.UnitedStatesDollar = "USD", s3.UruguayPeso = "UYU", s3.UzbekistanSom = "UZS", s3.VenezuelaBolivar = "VEF", s3.VietnamDong = "VND", s3.VanuatuVatu = "VUV", s3.SamoaTala = "WST", s3.YemenRial = "YER", s3.SouthAfricaRand = "ZAR", s3.ZambiaKwacha = "ZMW", s3.ZimbabweDollar = "ZWL", s3))(D3 || {});
var Be2 = ((b3) => (b3.Bitcoin = "BTC", b3.Ethereum = "ETH", b3.Litecoin = "LTC", b3.Ripple = "XRP", b3.Dash = "DASH", b3.Zcash = "ZEC", b3.Dogecoin = "DOGE", b3.Monero = "XMR", b3.BitcoinCash = "BCH", b3.EOS = "EOS", b3.Binance = "BNB", b3.Stellar = "XLM", b3.Cardano = "ADA", b3.IOTA = "IOTA", b3.Tezos = "XTZ", b3.NEO = "NEO", b3.TRON = "TRX", b3.EOSClassic = "EOSC", b3.Ontology = "ONT", b3.VeChain = "VEN", b3.QTUM = "QTUM", b3.Lisk = "LSK", b3.Waves = "WAVES", b3.OmiseGO = "OMG", b3.Zilliqa = "ZIL", b3.BitcoinGold = "BTG", b3.Decred = "DCR", b3.Stratis = "STRAT", b3.Populous = "PPT", b3.Augur = "REP", b3.Golem = "GNT", b3.Siacoin = "SC", b3.BasicAttentionToken = "BAT", b3.ZCoin = "XZC", b3.StratisHedged = "SNT", b3.VeChainHedged = "VEN", b3.PowerLedger = "POWR", b3.WavesHedged = "WAVE", b3.ZilliqaHedged = "ZRX", b3.BitcoinDiamond = "BCD", b3.DigiByte = "DGB", b3.DigiByteHedged = "DGB", b3.Bytecoin = "BCN", b3.BytecoinHedged = "BCN", b3))(Be2 || {});
var G3 = ((m3) => (m3.Afrikaans = "af", m3.Albanian = "sq", m3.Amharic = "am", m3.Arabic = "ar", m3.Armenian = "hy", m3.Azerbaijani = "az", m3.Bashkir = "ba", m3.Basque = "eu", m3.Belarusian = "be", m3.Bengali = "bn", m3.Berber = "ber", m3.Bhutani = "dz", m3.Bihari = "bh", m3.Bislama = "bi", m3.Bosnian = "bs", m3.Breten = "br", m3.Bulgarian = "bg", m3.Burmese = "my", m3.Cantonese = "yue", m3.Catalan = "ca", m3.Chinese = "zh", m3.Chuvash = "cv", m3.Corsican = "co", m3.Croatian = "hr", m3.Czech = "cs", m3.Danish = "da", m3.Dari = "prs", m3.Divehi = "dv", m3.Dutch = "nl", m3.English = "en", m3.Esperanto = "eo", m3.Estonian = "et", m3.Faroese = "fo", m3.Farsi = "fa", m3.Filipino = "fil", m3.Finnish = "fi", m3.French = "fr", m3.Frisian = "fy", m3.Galician = "gl", m3.Georgian = "ka", m3.German = "de", m3.Greek = "el", m3.Greenlandic = "kl", m3.Gujarati = "gu", m3.Haitian = "ht", m3.Hausa = "ha", m3.Hebrew = "he", m3.Hindi = "hi", m3.Hungarian = "hu", m3.Icelandic = "is", m3.Igbo = "ig", m3.Indonesian = "id", m3.Irish = "ga", m3.Italian = "it", m3.Japanese = "ja", m3.Javanese = "jv", m3.Kannada = "kn", m3.Karelian = "krl", m3.Kazakh = "kk", m3.Khmer = "km", m3.Komi = "kv", m3.Konkani = "kok", m3.Korean = "ko", m3.Kurdish = "ku", m3.Kyrgyz = "ky", m3.Lao = "lo", m3.Latin = "la", m3.Latvian = "lv", m3.Lithuanian = "lt", m3.Luxembourgish = "lb", m3.Ossetian = "os", m3.Macedonian = "mk", m3.Malagasy = "mg", m3.Malay = "ms", m3.Malayalam = "ml", m3.Maltese = "mt", m3.Maori = "mi", m3.Marathi = "mr", m3.Mari = "mhr", m3.Mongolian = "mn", m3.Montenegrin = "me", m3.Nepali = "ne", m3.NorthernSotho = "nso", m3.Norwegian = "no", m3.NorwegianBokmal = "nb", m3.NorwegianNynorsk = "nn", m3.Oriya = "or", m3.Pashto = "ps", m3.Persian = "fa", m3.Polish = "pl", m3.Portuguese = "pt", m3.Punjabi = "pa", m3.Quechua = "qu", m3.Romanian = "ro", m3.Russian = "ru", m3.Sakha = "sah", m3.Sami = "se", m3.Samoan = "sm", m3.Sanskrit = "sa", m3.Scots = "gd", m3.Serbian = "sr", m3.SerbianCyrillic = "sr-Cyrl", m3.Sesotho = "st", m3.Shona = "sn", m3.Sindhi = "sd", m3.Sinhala = "si", m3.Slovak = "sk", m3.Slovenian = "sl", m3.Somali = "so", m3.Spanish = "es", m3.Sudanese = "su", m3.Sutu = "sx", m3.Swahili = "sw", m3.Swedish = "sv", m3.Syriac = "syr", m3.Tagalog = "tl", m3.Tajik = "tg", m3.Tamazight = "tmh", m3.Tamil = "ta", m3.Tatar = "tt", m3.Telugu = "te", m3.Thai = "th", m3.Tibetan = "bo", m3.Tsonga = "ts", m3.Tswana = "tn", m3.Turkish = "tr", m3.Turkmen = "tk", m3.Ukrainian = "uk", m3.Urdu = "ur", m3.Uzbek = "uz", m3.Vietnamese = "vi", m3.Welsh = "cy", m3.Xhosa = "xh", m3.Yiddish = "yi", m3.Yoruba = "yo", m3.Zulu = "zu", m3))(G3 || {});
var z3 = ((i3) => (i3.Afrikaans = "af", i3.AfrikaansSouthAfrica = "af-ZA", i3.Albanian = "sq", i3.AlbanianAlbania = "sq-AL", i3.Amharic = "am", i3.AmharicEthiopia = "am-ET", i3.Arabic = "ar", i3.ArabicAlgeria = "ar-DZ", i3.ArabicBahrain = "ar-BH", i3.ArabicEgypt = "ar-EG", i3.ArabicIraq = "ar-IQ", i3.ArabicJordan = "ar-JO", i3.ArabicKuwait = "ar-KW", i3.ArabicLebanon = "ar-LB", i3.ArabicLibya = "ar-LY", i3.ArabicMorocco = "ar-MA", i3.ArabicOman = "ar-OM", i3.ArabicQatar = "ar-QA", i3.ArabicSaudiArabia = "ar-SA", i3.ArabicSyria = "ar-SY", i3.ArabicTunisia = "ar-TN", i3.ArabicUnitedArabEmirates = "ar-AE", i3.ArabicYemen = "ar-YE", i3.Armenian = "hy", i3.ArmenianArmenia = "hy-AM", i3.Azerbaijani = "az", i3.AzerbaijaniAzerbaijan = "az-AZ", i3.AzerbaijaniCyrillicAzerbaijan = "az-Cyrl-AZ", i3.Bashkir = "ba", i3.Basque = "eu", i3.BasqueSpain = "eu-ES", i3.Belarusian = "be", i3.BelarusianBelarus = "be-BY", i3.Bengali = "bn", i3.BengaliBangladesh = "bn-BD", i3.BengaliIndia = "bn-IN", i3.Berber = "ber", i3.Bhutani = "dz", i3.BhutaniBhutan = "dz-BT", i3.Bosnian = "bs", i3.BosnianBosniaAndHerzegovina = "bs-BA", i3.Breton = "br", i3.Bulgarian = "bg", i3.BulgarianBosniaAndHerzegovina = "bg-BG", i3.BulgarianBulgaria = "bg-BG", i3.Burmese = "my", i3.BurmeseMyanmar = "my-MM", i3.Cantonese = "yue", i3.CantoneseHongKong = "yue-HK", i3.Catalan = "ca", i3.CatalanSpain = "ca-ES", i3.Chechen = "ce", i3.Cherokee = "chr", i3.Chinese = "zh", i3.ChineseSimplified = "zh-Hans", i3.ChineseSimplifiedChina = "zh-Hans-CN", i3.ChineseSimplifiedHongKong = "zh-Hans-HK", i3.ChineseSimplifiedMacau = "zh-Hans-MO", i3.ChineseSimplifiedSingapore = "zh-Hans-SG", i3.ChineseTraditional = "zh-Hant", i3.ChineseTraditionalHongKong = "zh-Hant-HK", i3.ChineseTraditionalMacau = "zh-Hant-MO", i3.ChineseTraditionalSingapore = "zh-Hant-SG", i3.ChineseTraditionalTaiwan = "zh-Hant-TW", i3.Chuvash = "cv", i3.CorsicanFrance = "co-FR", i3.Croatian = "hr", i3.CroatianBosniaAndHerzegovina = "hr-BA", i3.CroatianCroatia = "hr-HR", i3.Czech = "cs", i3.CzechCzechRepublic = "cs-CZ", i3.Danish = "da", i3.DanishDenmark = "da-DK", i3.Dari = "prs", i3.DariAfghanistan = "prs-AF", i3.Divehi = "dv", i3.DivehiMaldives = "dv-MV", i3.Dutch = "nl", i3.DutchBelgium = "nl-BE", i3.DutchNetherlands = "nl-NL", i3.English = "en", i3.EnglishAustralia = "en-AU", i3.EnglishBelgium = "en-BE", i3.EnglishBelize = "en-BZ", i3.EnglishCanada = "en-CA", i3.EnglishCaribbean = "en-029", i3.EnglishIreland = "en-IE", i3.EnglishJamaica = "en-JM", i3.EnglishNewZealand = "en-NZ", i3.EnglishPhilippines = "en-PH", i3.EnglishSingapore = "en-SG", i3.EnglishSouthAfrica = "en-ZA", i3.EnglishTrinidadAndTobago = "en-TT", i3.EnglishUnitedKingdom = "en-GB", i3.EnglishUnitedStates = "en-US", i3.EnglishZimbabwe = "en-ZW", i3.Esperanto = "eo", i3.Estonian = "et", i3.EstonianEstonia = "et-EE", i3.Faroese = "fo", i3.FaroeseFaroeIslands = "fo-FO", i3.Farsi = "fa", i3.FarsiIran = "fa-IR", i3.Filipino = "fil", i3.FilipinoPhilippines = "fil-PH", i3.Finnish = "fi", i3.FinnishFinland = "fi-FI", i3.French = "fr", i3.FrenchBelgium = "fr-BE", i3.FrenchCanada = "fr-CA", i3.FrenchFrance = "fr-FR", i3.FrenchLuxembourg = "fr-LU", i3.FrenchMonaco = "fr-MC", i3.FrenchReunion = "fr-RE", i3.FrenchSwitzerland = "fr-CH", i3.Frisian = "fy", i3.FrisianNetherlands = "fy-NL", i3.Galician = "gl", i3.GalicianSpain = "gl-ES", i3.Georgian = "ka", i3.GeorgianGeorgia = "ka-GE", i3.German = "de", i3.GermanAustria = "de-AT", i3.GermanBelgium = "de-BE", i3.GermanGermany = "de-DE", i3.GermanLiechtenstein = "de-LI", i3.GermanLuxembourg = "de-LU", i3.GermanSwitzerland = "de-CH", i3.Greenlandic = "kl", i3.GreenlandicGreenland = "kl-GL", i3.Greek = "el", i3.GreekGreece = "el-GR", i3.Gujarati = "gu", i3.GujaratiIndia = "gu-IN", i3.Haitian = "ht", i3.Hausa = "ha", i3.HausaGhana = "ha-GH", i3.HausaNiger = "ha-NE", i3.HausaNigeria = "ha-NG", i3.Hebrew = "he", i3.HebrewIsrael = "he-IL", i3.Hindi = "hi", i3.HindiIndia = "hi-IN", i3.Hungarian = "hu", i3.HungarianHungary = "hu-HU", i3.Icelandic = "is", i3.IcelandicIceland = "is-IS", i3.Igbo = "ig", i3.IgboNigeria = "ig-NG", i3.Indonesian = "id", i3.IndonesianIndonesia = "id-ID", i3.Irish = "ga", i3.IrishIreland = "ga-IE", i3.Italian = "it", i3.ItalianItaly = "it-IT", i3.ItalianSwitzerland = "it-CH", i3.Japanese = "ja", i3.JapaneseJapan = "ja-JP", i3.Javanese = "jv", i3.Kannada = "kn", i3.KannadaIndia = "kn-IN", i3.Karelian = "krl", i3.Kazakh = "kk", i3.KazakhKazakhstan = "kk-KZ", i3.Khmer = "km", i3.KhmerCambodia = "km-KH", i3.KinyarwandaRwanda = "rw-RW", i3.Komi = "kv", i3.Konkani = "kok", i3.KonkaniIndia = "kok-IN", i3.Korean = "ko", i3.KoreanSouthKorea = "ko-KR", i3.Kurdish = "ku", i3.KurdishIraq = "ku-IQ", i3.KurdishTurkey = "ku-TR", i3.Kyrgyz = "ky", i3.KyrgyzKyrgyzstan = "ky-KG", i3.Lao = "lo", i3.LaoLaos = "lo-LA", i3.Latin = "la", i3.Latvian = "lv", i3.LatvianLatvia = "lv-LV", i3.Lithuanian = "lt", i3.LithuanianLithuania = "lt-LT", i3.Luxembourgish = "lb", i3.LuxembourgishBelgium = "lb-LU", i3.LuxembourgishLuxembourg = "lb-LU", i3.Macedonian = "mk", i3.MacedonianNorthMacedonia = "mk-MK", i3.Malagasy = "mg", i3.Malay = "ms", i3.MalayBrunei = "ms-BN", i3.MalayIndia = "ms-IN", i3.MalayMalaysia = "ms-MY", i3.MalaySingapore = "ms-SG", i3.Malayalam = "ml", i3.MalayalamIndia = "ml-IN", i3.Maltese = "mt", i3.MalteseMalta = "mt-MT", i3.Maori = "mi", i3.MaoriNewZealand = "mi-NZ", i3.Marathi = "mr", i3.MarathiIndia = "mr-IN", i3.Mari = "chm", i3.Mongolian = "mn", i3.MongolianMongolia = "mn-MN", i3.Montenegrin = "me", i3.MontenegrinMontenegro = "me-ME", i3.Nepali = "ne", i3.NepaliNepal = "ne-NP", i3.NorthernSotho = "ns", i3.NorthernSothoSouthAfrica = "ns-ZA", i3.Norwegian = "nb", i3.NorwegianBokmalNorway = "nb-NO", i3.NorwegianNynorskNorway = "nn-NO", i3.Oriya = "or", i3.OriyaIndia = "or-IN", i3.Ossetian = "os", i3.Pashto = "ps", i3.PashtoAfghanistan = "ps-AF", i3.Persian = "fa", i3.PersianIran = "fa-IR", i3.Polish = "pl", i3.PolishPoland = "pl-PL", i3.Portuguese = "pt", i3.PortugueseBrazil = "pt-BR", i3.PortuguesePortugal = "pt-PT", i3.Punjabi = "pa", i3.PunjabiIndia = "pa-IN", i3.PunjabiPakistan = "pa-PK", i3.Quechua = "qu", i3.QuechuaBolivia = "qu-BO", i3.QuechuaEcuador = "qu-EC", i3.QuechuaPeru = "qu-PE", i3.Romanian = "ro", i3.RomanianRomania = "ro-RO", i3.Russian = "ru", i3.RussianKazakhstan = "ru-KZ", i3.RussianKyrgyzstan = "ru-KG", i3.RussianRussia = "ru-RU", i3.RussianUkraine = "ru-UA", i3.Sakha = "sah", i3.Sanskrit = "sa", i3.SanskritIndia = "sa-IN", i3.Sami = "se", i3.SamiNorway = "se-NO", i3.SamiSweden = "se-SE", i3.SamiFinland = "se-FI", i3.Samoan = "sm", i3.SamoanSamoa = "sm-WS", i3.Scots = "gd", i3.Serbian = "sr", i3.SerbianBosniaAndHerzegovina = "sr-BA", i3.SerbianSerbiaAndMontenegro = "sr-SP", i3.SerbianCyrillic = "sr-SP-Cyrl", i3.SerbianCyrillicBosniaAndHerzegovina = "sr-Cyrl-BA", i3.SerbianCyrillicSerbiaAndMontenegro = "sr-Cyrl-SP", i3.Sesotho = "st", i3.SesothoSouthAfrica = "st-ZA", i3.Shona = "sn", i3.ShonaZimbabwe = "sn-ZW", i3.Sindhi = "sd", i3.SindhiPakistan = "sd-PK", i3.Sinhala = "si", i3.SinhalaSriLanka = "si-LK", i3.Slovak = "sk", i3.SlovakSlovakia = "sk-SK", i3.Slovenian = "sl", i3.SlovenianSlovenia = "sl-SI", i3.Somali = "so", i3.SomaliSomalia = "so-SO", i3.Spanish = "es", i3.SpanishArgentina = "es-AR", i3.SpanishBolivia = "es-BO", i3.SpanishChile = "es-CL", i3.SpanishColombia = "es-CO", i3.SpanishCostaRica = "es-CR", i3.SpanishCuba = "es-CU", i3.SpanishDominicanRepublic = "es-DO", i3.SpanishEcuador = "es-EC", i3.SpanishEquatorialGuinea = "es-GQ", i3.SpanishElSalvador = "es-SV", i3.SpanishGuatemala = "es-GT", i3.SpanishHonduras = "es-HN", i3.SpanishMexico = "es-MX", i3.SpanishNicaragua = "es-NI", i3.SpanishPanama = "es-PA", i3.SpanishParaguay = "es-PY", i3.SpanishPeru = "es-PE", i3.SpanishPuertoRico = "es-PR", i3.SpanishSpain = "es-ES", i3.SpanishUnitedStates = "es-US", i3.SpanishUruguay = "es-UY", i3.SpanishVenezuela = "es-VE", i3.Sudanese = "su", i3.Sutu = "st", i3.SutuSouthAfrica = "st-ZA", i3.Swahili = "sw", i3.SwahiliKenya = "sw-KE", i3.Swedish = "sv", i3.SwedishFinland = "sv-FI", i3.SwedishSweden = "sv-SE", i3.Syriac = "syr", i3.SyriacSyria = "syr-SY", i3.Tajik = "tg", i3.TajikTajikistan = "tg-TJ", i3.Tagalog = "tl", i3.TagalogPhilippines = "tl-PH", i3.Tamazight = "tmh", i3.Tamil = "ta", i3.TamilIndia = "ta-IN", i3.Tatar = "tt", i3.Telugu = "te", i3.TeluguIndia = "te-IN", i3.Thai = "th", i3.ThaiThailand = "th-TH", i3.Tibetan = "bo", i3.TibetanBhutan = "bo-BT", i3.TibetanChina = "bo-CN", i3.TibetanIndia = "bo-IN", i3.Tsonga = "ts", i3.Tswana = "tn", i3.TswanaSouthAfrica = "tn-ZA", i3.Turkish = "tr", i3.TurkishTurkey = "tr-TR", i3.Turkmen = "tk", i3.Ukrainian = "uk", i3.UkrainianUkraine = "uk-UA", i3.Urdu = "ur", i3.UrduAfghanistan = "ur-AF", i3.UrduIndia = "ur-IN", i3.UrduPakistan = "ur-PK", i3.Uzbek = "uz", i3.UzbekCyrillic = "uz-Cyrl-UZ", i3.UzbekLatin = "uz-Latn-UZ", i3.UzbekUzbekistan = "uz-UZ", i3.Vietnamese = "vi", i3.VietnameseVietnam = "vi-VN", i3.Welsh = "cy", i3.WelshUnitedKingdom = "cy-GB", i3.Xhosa = "xh", i3.XhosaSouthAfrica = "xh-ZA", i3.Yiddish = "yi", i3.Yoruba = "yo", i3.YorubaNigeria = "yo-NG", i3.ZhuyinMandarinChina = "yue-Hant-CN", i3.Zulu = "zu", i3.ZuluSouthAfrica = "zu-ZA", i3))(z3 || {});
var L3 = ((a) => (a.AfricaAbidjan = "Africa/Abidjan", a.AfricaAccra = "Africa/Accra", a.AfricaAddisAbaba = "Africa/Addis_Ababa", a.AfricaAlgiers = "Africa/Algiers", a.AfricaAsmara = "Africa/Asmara", a.AfricaBamako = "Africa/Bamako", a.AfricaBangui = "Africa/Bangui", a.AfricaBanjul = "Africa/Banjul", a.AfricaBissau = "Africa/Bissau", a.AfricaBlantyre = "Africa/Blantyre", a.AfricaBrazzaville = "Africa/Brazzaville", a.AfricaBujumbura = "Africa/Bujumbura", a.AfricaCairo = "Africa/Cairo", a.AfricaCasablanca = "Africa/Casablanca", a.AfricaCeuta = "Africa/Ceuta", a.AfricaConakry = "Africa/Conakry", a.AfricaDakar = "Africa/Dakar", a.AfricaDarEsSalaam = "Africa/Dar_es_Salaam", a.AfricaDjibouti = "Africa/Djibouti", a.AfricaDouala = "Africa/Douala", a.AfricaElAaiun = "Africa/El_Aaiun", a.AfricaFreetown = "Africa/Freetown", a.AfricaGaborone = "Africa/Gaborone", a.AfricaHarare = "Africa/Harare", a.AfricaJohannesburg = "Africa/Johannesburg", a.AfricaJuba = "Africa/Juba", a.AfricaKampala = "Africa/Kampala", a.AfricaKhartoum = "Africa/Khartoum", a.AfricaKigali = "Africa/Kigali", a.AfricaKinshasa = "Africa/Kinshasa", a.AfricaLagos = "Africa/Lagos", a.AfricaLibreville = "Africa/Libreville", a.AfricaLome = "Africa/Lome", a.AfricaLuanda = "Africa/Luanda", a.AfricaLubumbashi = "Africa/Lubumbashi", a.AfricaLusaka = "Africa/Lusaka", a.AfricaMalabo = "Africa/Malabo", a.AfricaMaputo = "Africa/Maputo", a.AfricaMaseru = "Africa/Maseru", a.AfricaMbabane = "Africa/Mbabane", a.AfricaMogadishu = "Africa/Mogadishu", a.AfricaMonrovia = "Africa/Monrovia", a.AfricaNairobi = "Africa/Nairobi", a.AfricaNdjamena = "Africa/Ndjamena", a.AfricaNiamey = "Africa/Niamey", a.AfricaNouakchott = "Africa/Nouakchott", a.AfricaOuagadougou = "Africa/Ouagadougou", a.AfricaPortoNovo = "Africa/Porto-Novo", a.AfricaSaoTome = "Africa/Sao_Tome", a.AfricaTripoli = "Africa/Tripoli", a.AfricaTunis = "Africa/Tunis", a.AfricaWindhoek = "Africa/Windhoek", a.AmericaAdak = "America/Adak", a.AmericaAnchorage = "America/Anchorage", a.AmericaAnguilla = "America/Anguilla", a.AmericaAntigua = "America/Antigua", a.AmericaAraguaina = "America/Araguaina", a.AmericaArgentinaBuenosAires = "America/Argentina/Buenos_Aires", a.AmericaArgentinaCatamarca = "America/Argentina/Catamarca", a.AmericaArgentinaCordoba = "America/Argentina/Cordoba", a.AmericaArgentinaJujuy = "America/Argentina/Jujuy", a.AmericaArgentinaLaRioja = "America/Argentina/La_Rioja", a.AmericaArgentinaMendoza = "America/Argentina/Mendoza", a.AmericaArgentinaRioGallegos = "America/Argentina/Rio_Gallegos", a.AmericaArgentinaSalta = "America/Argentina/Salta", a.AmericaArgentinaSanJuan = "America/Argentina/San_Juan", a.AmericaArgentinaSanLuis = "America/Argentina/San_Luis", a.AmericaArgentinaTucuman = "America/Argentina/Tucuman", a.AmericaArgentinaUshuaia = "America/Argentina/Ushuaia", a.AmericaAruba = "America/Aruba", a.AmericaAsuncion = "America/Asuncion", a.AmericaAtikokan = "America/Atikokan", a.AmericaAtka = "America/Atka", a.AmericaBahia = "America/Bahia", a.AmericaBahiaBanderas = "America/Bahia_Banderas", a.AmericaBarbados = "America/Barbados", a.AmericaBelem = "America/Belem", a.AmericaBelize = "America/Belize", a.AmericaBlancSablon = "America/Blanc-Sablon", a.AmericaBoaVista = "America/Boa_Vista", a.AmericaBogota = "America/Bogota", a.AmericaBoise = "America/Boise", a.AmericaCambridgeBay = "America/Cambridge_Bay", a.AmericaCampoGrande = "America/Campo_Grande", a.AmericaCancun = "America/Cancun", a.AmericaCaracas = "America/Caracas", a.AmericaCayenne = "America/Cayenne", a.AmericaCayman = "America/Cayman", a.AmericaChicago = "America/Chicago", a.AmericaChihuahua = "America/Chihuahua", a.AmericaCoralHarbour = "America/Coral_Harbour", a.AmericaCordoba = "America/Cordoba", a.AmericaCostaRica = "America/Costa_Rica", a.AmericaCreston = "America/Creston", a.AmericaCuiaba = "America/Cuiaba", a.AmericaCuracao = "America/Curacao", a.AmericaDanmarkshavn = "America/Danmarkshavn", a.AmericaDawson = "America/Dawson", a.AmericaDawsonCreek = "America/Dawson_Creek", a.AmericaDenver = "America/Denver", a.AmericaDetroit = "America/Detroit", a.AmericaDominica = "America/Dominica", a.AmericaEdmonton = "America/Edmonton", a.AmericaEirunepe = "America/Eirunepe", a.AmericaElSalvador = "America/El_Salvador", a.AmericaFortaleza = "America/Fortaleza", a.AmericaGlaceBay = "America/Glace_Bay", a.AmericaGodthab = "America/Godthab", a.AmericaGooseBay = "America/Goose_Bay", a.AmericaGrandTurk = "America/Grand_Turk", a.AmericaGrenada = "America/Grenada", a.AmericaGuadeloupe = "America/Guadeloupe", a.AmericaGuatemala = "America/Guatemala", a.AmericaGuayaquil = "America/Guayaquil", a.AmericaGuyana = "America/Guyana", a.AmericaHalifax = "America/Halifax", a.AmericaHavana = "America/Havana", a.AmericaHermosillo = "America/Hermosillo", a.AmericaIndianaIndianapolis = "America/Indiana/Indianapolis", a.AmericaIndianaKnox = "America/Indiana/Knox", a.AmericaIndianaMarengo = "America/Indiana/Marengo", a.AmericaIndianaPetersburg = "America/Indiana/Petersburg", a.AmericaIndianaTellCity = "America/Indiana/Tell_City", a.AmericaIndianaVevay = "America/Indiana/Vevay", a.AmericaIndianaVincennes = "America/Indiana/Vincennes", a.AmericaIndianaWinamac = "America/Indiana/Winamac", a.AmericaInuvik = "America/Inuvik", a.AmericaIqaluit = "America/Iqaluit", a.AmericaJamaica = "America/Jamaica", a.AmericaJuneau = "America/Juneau", a.AmericaKentuckyLouisville = "America/Kentucky/Louisville", a.AmericaKentuckyMonticello = "America/Kentucky/Monticello", a.AmericaKralendijk = "America/Kralendijk", a.AmericaLaPaz = "America/La_Paz", a.AmericaLima = "America/Lima", a.AmericaLosAngeles = "America/Los_Angeles", a.AmericaLouisville = "America/Louisville", a.AmericaLowerPrinces = "America/Lower_Princes", a.AmericaMaceio = "America/Maceio", a.AmericaManagua = "America/Managua", a.AmericaManaus = "America/Manaus", a.AmericaMarigot = "America/Marigot", a.AmericaMartinique = "America/Martinique", a.AmericaMatamoros = "America/Matamoros", a.AmericaMazatlan = "America/Mazatlan", a.AmericaMenominee = "America/Menominee", a.AmericaMerida = "America/Merida", a.AmericaMetlakatla = "America/Metlakatla", a.AmericaMexicoCity = "America/Mexico_City", a.AmericaMiquelon = "America/Miquelon", a.AmericaMoncton = "America/Moncton", a.AmericaMonterrey = "America/Monterrey", a.AmericaMontevideo = "America/Montevideo", a.AmericaMontserrat = "America/Montserrat", a.AmericaMontreal = "America/Montreal", a.AmericaNassau = "America/Nassau", a.AmericaNewYork = "America/New_York", a.AmericaNipigon = "America/Nipigon", a.AmericaNome = "America/Nome", a.AmericaNoronha = "America/Noronha", a.AmericaNorthDakotaBeulah = "America/North_Dakota/Beulah", a.AmericaNorthDakotaCenter = "America/North_Dakota/Center", a.AmericaNorthDakotaNewSalem = "America/North_Dakota/New_Salem", a.AmericaOjinaga = "America/Ojinaga", a.AmericaPanama = "America/Panama", a.AmericaPangnirtung = "America/Pangnirtung", a.AmericaParamaribo = "America/Paramaribo", a.AmericaPhoenix = "America/Phoenix", a.AmericaPortAuPrince = "America/Port-au-Prince", a.AmericaPortOfSpain = "America/Port_of_Spain", a.AmericaPortoVelho = "America/Porto_Velho", a.AmericaPuertoRico = "America/Puerto_Rico", a.AmericaRainyRiver = "America/Rainy_River", a.AmericaRankinInlet = "America/Rankin_Inlet", a.AmericaRecife = "America/Recife", a.AmericaRegina = "America/Regina", a.AmericaResolute = "America/Resolute", a.AmericaRioBranco = "America/Rio_Branco", a.AmericaSantaIsabel = "America/Santa_Isabel", a.AmericaSantarem = "America/Santarem", a.AmericaSantiago = "America/Santiago", a.AmericaSantoDomingo = "America/Santo_Domingo", a.AmericaSaoPaulo = "America/Sao_Paulo", a.AmericaScoresbysund = "America/Scoresbysund", a.AmericaShiprock = "America/Shiprock", a.AmericaSitka = "America/Sitka", a.AmericaStBarthelemy = "America/St_Barthelemy", a.AmericaStJohns = "America/St_Johns", a.AmericaStKitts = "America/St_Kitts", a.AmericaStLucia = "America/St_Lucia", a.AmericaStThomas = "America/St_Thomas", a.AmericaStVincent = "America/St_Vincent", a.AmericaSwiftCurrent = "America/Swift_Current", a.AmericaTegucigalpa = "America/Tegucigalpa", a.AmericaThule = "America/Thule", a.AmericaThunderBay = "America/Thunder_Bay", a.AmericaTijuana = "America/Tijuana", a.AmericaToronto = "America/Toronto", a.AmericaTortola = "America/Tortola", a.AmericaVancouver = "America/Vancouver", a.AmericaWhitehorse = "America/Whitehorse", a.AmericaWinnipeg = "America/Winnipeg", a.AmericaYakutat = "America/Yakutat", a.AmericaYellowknife = "America/Yellowknife", a.AntarcticaCasey = "Antarctica/Casey", a.AntarcticaDavis = "Antarctica/Davis", a.AntarcticaDumontDUrville = "Antarctica/DumontDUrville", a.AntarcticaMacquarie = "Antarctica/Macquarie", a.AntarcticaMawson = "Antarctica/Mawson", a.AntarcticaMcMurdo = "Antarctica/McMurdo", a.AntarcticaPalmer = "Antarctica/Palmer", a.AntarcticaRothera = "Antarctica/Rothera", a.AntarcticaSyowa = "Antarctica/Syowa", a.AntarcticaTroll = "Antarctica/Troll", a.AntarcticaVostok = "Antarctica/Vostok", a.ArcticLongyearbyen = "Arctic/Longyearbyen", a.AsiaAden = "Asia/Aden", a.AsiaAlmaty = "Asia/Almaty", a.AsiaAmman = "Asia/Amman", a.AsiaAnadyr = "Asia/Anadyr", a.AsiaAqtau = "Asia/Aqtau", a.AsiaAqtobe = "Asia/Aqtobe", a.AsiaAshgabat = "Asia/Ashgabat", a.AsiaBaghdad = "Asia/Baghdad", a.AsiaBahrain = "Asia/Bahrain", a.AsiaBaku = "Asia/Baku", a.AsiaBangkok = "Asia/Bangkok", a.AsiaBarnaul = "Asia/Barnaul", a.AsiaBeirut = "Asia/Beirut", a.AsiaBishkek = "Asia/Bishkek", a.AsiaBrunei = "Asia/Brunei", a.AsiaChita = "Asia/Chita", a.AsiaChoibalsan = "Asia/Choibalsan", a.AsiaColombo = "Asia/Colombo", a.AsiaDamascus = "Asia/Damascus", a.AsiaDhaka = "Asia/Dhaka", a.AsiaDili = "Asia/Dili", a.AsiaDubai = "Asia/Dubai", a.AsiaDushanbe = "Asia/Dushanbe", a.AsiaFamagusta = "Asia/Famagusta", a.AsiaGaza = "Asia/Gaza", a.AsiaHebron = "Asia/Hebron", a.AsiaHoChiMinh = "Asia/Ho_Chi_Minh", a.AsiaHongKong = "Asia/Hong_Kong", a.AsiaHovd = "Asia/Hovd", a.AsiaIrkutsk = "Asia/Irkutsk", a.AsiaJakarta = "Asia/Jakarta", a.AsiaJayapura = "Asia/Jayapura", a.AsiaJerusalem = "Asia/Jerusalem", a.AsiaKabul = "Asia/Kabul", a.AsiaKamchatka = "Asia/Kamchatka", a.AsiaKarachi = "Asia/Karachi", a.AsiaKathmandu = "Asia/Kathmandu", a.AsiaKhandyga = "Asia/Khandyga", a.AsiaKolkata = "Asia/Kolkata", a.AsiaKrasnoyarsk = "Asia/Krasnoyarsk", a.AsiaKualaLumpur = "Asia/Kuala_Lumpur", a.AsiaKuching = "Asia/Kuching", a.AsiaKuwait = "Asia/Kuwait", a.AsiaMacau = "Asia/Macau", a.AsiaMagadan = "Asia/Magadan", a.AsiaMakassar = "Asia/Makassar", a.AsiaManila = "Asia/Manila", a.AsiaMuscat = "Asia/Muscat", a.AsiaNicosia = "Asia/Nicosia", a.AsiaNovokuznetsk = "Asia/Novokuznetsk", a.AsiaNovosibirsk = "Asia/Novosibirsk", a.AsiaOmsk = "Asia/Omsk", a.AsiaOral = "Asia/Oral", a.AsiaPhnomPenh = "Asia/Phnom_Penh", a.AsiaPontianak = "Asia/Pontianak", a.AsiaPyongyang = "Asia/Pyongyang", a.AsiaQatar = "Asia/Qatar", a.AsiaQyzylorda = "Asia/Qyzylorda", a.AsiaRangoon = "Asia/Rangoon", a.AsiaRiyadh = "Asia/Riyadh", a.AsiaSakhalin = "Asia/Sakhalin", a.AsiaSamarkand = "Asia/Samarkand", a.AsiaSeoul = "Asia/Seoul", a.AsiaShanghai = "Asia/Shanghai", a.AsiaSingapore = "Asia/Singapore", a.AsiaSrednekolymsk = "Asia/Srednekolymsk", a.AsiaTaipei = "Asia/Taipei", a.AsiaTashkent = "Asia/Tashkent", a.AsiaTbilisi = "Asia/Tbilisi", a.AsiaTehran = "Asia/Tehran", a.AsiaThimphu = "Asia/Thimphu", a.AsiaTokyo = "Asia/Tokyo", a.AsiaTomsk = "Asia/Tomsk", a.AsiaUlaanbaatar = "Asia/Ulaanbaatar", a.AsiaUrumqi = "Asia/Urumqi", a.AsiaUstNera = "Asia/Ust-Nera", a.AsiaVientiane = "Asia/Vientiane", a.AsiaVladivostok = "Asia/Vladivostok", a.AsiaYakutsk = "Asia/Yakutsk", a.AsiaYekaterinburg = "Asia/Yekaterinburg", a.AsiaYerevan = "Asia/Yerevan", a.AtlanticAzores = "Atlantic/Azores", a.AtlanticBermuda = "Atlantic/Bermuda", a.AtlanticCanary = "Atlantic/Canary", a.AtlanticCapeVerde = "Atlantic/Cape_Verde", a.AtlanticFaroe = "Atlantic/Faroe", a.AtlanticMadeira = "Atlantic/Madeira", a.AtlanticReykjavik = "Atlantic/Reykjavik", a.AtlanticSouthGeorgia = "Atlantic/South_Georgia", a.AtlanticStHelena = "Atlantic/St_Helena", a.AtlanticStanley = "Atlantic/Stanley", a.AustraliaAdelaide = "Australia/Adelaide", a.AustraliaBrisbane = "Australia/Brisbane", a.AustraliaBrokenHill = "Australia/Broken_Hill", a.AustraliaCanberra = "Australia/Canberra", a.AustraliaCurrie = "Australia/Currie", a.AustraliaDarwin = "Australia/Darwin", a.AustraliaEucla = "Australia/Eucla", a.AustraliaHobart = "Australia/Hobart", a.AustraliaLindeman = "Australia/Lindeman", a.AustraliaLordHowe = "Australia/Lord_Howe", a.AustraliaMelbourne = "Australia/Melbourne", a.AustraliaPerth = "Australia/Perth", a.AustraliaSydney = "Australia/Sydney", a.EuropeAmsterdam = "Europe/Amsterdam", a.EuropeAndorra = "Europe/Andorra", a.EuropeAthens = "Europe/Athens", a.EuropeBelgrade = "Europe/Belgrade", a.EuropeBerlin = "Europe/Berlin", a.EuropeBratislava = "Europe/Bratislava", a.EuropeBrussels = "Europe/Brussels", a.EuropeBucharest = "Europe/Bucharest", a.EuropeBudapest = "Europe/Budapest", a.EuropeBusingen = "Europe/Busingen", a.EuropeChisinau = "Europe/Chisinau", a.EuropeCopenhagen = "Europe/Copenhagen", a.EuropeDublin = "Europe/Dublin", a.EuropeGibraltar = "Europe/Gibraltar", a.EuropeGuernsey = "Europe/Guernsey", a.EuropeHelsinki = "Europe/Helsinki", a.EuropeIsleOfMan = "Europe/Isle_of_Man", a.EuropeIstanbul = "Europe/Istanbul", a.EuropeJersey = "Europe/Jersey", a.EuropeKaliningrad = "Europe/Kaliningrad", a.EuropeKiev = "Europe/Kiev", a.EuropeKirov = "Europe/Kirov", a.EuropeLisbon = "Europe/Lisbon", a.EuropeLjubljana = "Europe/Ljubljana", a.EuropeLondon = "Europe/London", a.EuropeLuxembourg = "Europe/Luxembourg", a.EuropeMadrid = "Europe/Madrid", a.EuropeMalta = "Europe/Malta", a.EuropeMariehamn = "Europe/Mariehamn", a.EuropeMinsk = "Europe/Minsk", a.EuropeMonaco = "Europe/Monaco", a.EuropeMoscow = "Europe/Moscow", a.EuropeOslo = "Europe/Oslo", a.EuropeParis = "Europe/Paris", a.EuropePodgorica = "Europe/Podgorica", a.EuropePrague = "Europe/Prague", a.EuropeRiga = "Europe/Riga", a.EuropeRome = "Europe/Rome", a.EuropeSamara = "Europe/Samara", a.EuropeSanMarino = "Europe/San_Marino", a.EuropeSarajevo = "Europe/Sarajevo", a.EuropeSimferopol = "Europe/Simferopol", a.EuropeSkopje = "Europe/Skopje", a.EuropeSofia = "Europe/Sofia", a.EuropeStockholm = "Europe/Stockholm", a.EuropeTallinn = "Europe/Tallinn", a.EuropeTirane = "Europe/Tirane", a.EuropeUzhgorod = "Europe/Uzhgorod", a.EuropeVaduz = "Europe/Vaduz", a.EuropeVatican = "Europe/Vatican", a.EuropeVienna = "Europe/Vienna", a.EuropeVilnius = "Europe/Vilnius", a.EuropeVolgograd = "Europe/Volgograd", a.EuropeWarsaw = "Europe/Warsaw", a.EuropeZagreb = "Europe/Zagreb", a.EuropeZaporozhye = "Europe/Zaporozhye", a.EuropeZurich = "Europe/Zurich", a.GMT = "GMT", a.IndianAntananarivo = "Indian/Antananarivo", a.IndianChagos = "Indian/Chagos", a.IndianChristmas = "Indian/Christmas", a.IndianCocos = "Indian/Cocos", a.IndianComoro = "Indian/Comoro", a.IndianKerguelen = "Indian/Kerguelen", a.IndianMahe = "Indian/Mahe", a.IndianMaldives = "Indian/Maldives", a.IndianMauritius = "Indian/Mauritius", a.IndianMayotte = "Indian/Mayotte", a.IndianReunion = "Indian/Reunion", a.PacificApia = "Pacific/Apia", a.PacificAuckland = "Pacific/Auckland", a.PacificBougainville = "Pacific/Bougainville", a.PacificChatham = "Pacific/Chatham", a.PacificChuuk = "Pacific/Chuuk", a.PacificEaster = "Pacific/Easter", a.PacificEfate = "Pacific/Efate", a.PacificEnderbury = "Pacific/Enderbury", a.PacificFakaofo = "Pacific/Fakaofo", a.PacificFiji = "Pacific/Fiji", a.PacificFunafuti = "Pacific/Funafuti", a.PacificGalapagos = "Pacific/Galapagos", a.PacificGambier = "Pacific/Gambier", a.PacificGuadalcanal = "Pacific/Guadalcanal", a.PacificGuam = "Pacific/Guam", a.PacificHonolulu = "Pacific/Honolulu", a.PacificJohnston = "Pacific/Johnston", a.PacificKiritimati = "Pacific/Kiritimati", a.PacificKosrae = "Pacific/Kosrae", a.PacificKwajalein = "Pacific/Kwajalein", a.PacificMajuro = "Pacific/Majuro", a.PacificMarquesas = "Pacific/Marquesas", a.PacificMidway = "Pacific/Midway", a.PacificNauru = "Pacific/Nauru", a.PacificNiue = "Pacific/Niue", a.PacificNorfolk = "Pacific/Norfolk", a.PacificNoumea = "Pacific/Noumea", a.PacificPagoPago = "Pacific/Pago_Pago", a.PacificPalau = "Pacific/Palau", a.PacificPitcairn = "Pacific/Pitcairn", a.PacificPohnpei = "Pacific/Pohnpei", a.PacificPonape = "Pacific/Ponape", a.PacificPortMoresby = "Pacific/Port_Moresby", a.PacificRarotonga = "Pacific/Rarotonga", a.PacificSaipan = "Pacific/Saipan", a.PacificSamoa = "Pacific/Samoa", a.PacificTahiti = "Pacific/Tahiti", a.PacificTarawa = "Pacific/Tarawa", a.PacificTongatapu = "Pacific/Tongatapu", a.PacificTruk = "Pacific/Truk", a.PacificWake = "Pacific/Wake", a.PacificWallis = "Pacific/Wallis", a.PacificYap = "Pacific/Yap", a))(L3 || {});
var M3 = ((S3) => (S3.UTC_MINUS_12 = "UTC-12", S3.UTC_MINUS_11_30 = "UTC-11:30", S3.UTC_MINUS_11 = "UTC-11", S3.UTC_MINUS_10_30 = "UTC-10:30", S3.UTC_MINUS_10 = "UTC-10", S3.UTC_MINUS_9_30 = "UTC-9:30", S3.UTC_MINUS_9 = "UTC-09", S3.UTC_MINUS_8_45 = "UTC-8:45", S3.UTC_MINUS_8 = "UTC-08", S3.UTC_MINUS_7 = "UTC-07", S3.UTC_MINUS_6_30 = "UTC-6:30", S3.UTC_MINUS_6 = "UTC-06", S3.UTC_MINUS_5_45 = "UTC-5:45", S3.UTC_MINUS_5_30 = "UTC-5:30", S3.UTC_MINUS_5 = "UTC-05", S3.UTC_MINUS_4_30 = "UTC-4:30", S3.UTC_MINUS_4 = "UTC-04", S3.UTC_MINUS_3_30 = "UTC-3:30", S3.UTC_MINUS_3 = "UTC-03", S3.UTC_MINUS_2_30 = "UTC-2:30", S3.UTC_MINUS_2 = "UTC-02", S3.UTC_MINUS_1 = "UTC-01", S3.UTC_0 = "UTC+00", S3.UTC_PLUS_1 = "UTC+01", S3.UTC_PLUS_2 = "UTC+02", S3.UTC_PLUS_3 = "UTC+03", S3.UTC_PLUS_3_30 = "UTC+3:30", S3.UTC_PLUS_4 = "UTC+04", S3.UTC_PLUS_4_30 = "UTC+4:30", S3.UTC_PLUS_5 = "UTC+05", S3.UTC_PLUS_5_30 = "UTC+5:30", S3.UTC_PLUS_5_45 = "UTC+5:45", S3.UTC_PLUS_6 = "UTC+06", S3.UTC_PLUS_6_30 = "UTC+6:30", S3.UTC_PLUS_7 = "UTC+07", S3.UTC_PLUS_8 = "UTC+08", S3.UTC_PLUS_8_45 = "UTC+8:45", S3.UTC_PLUS_9 = "UTC+09", S3.UTC_PLUS_9_30 = "UTC+9:30", S3.UTC_PLUS_10 = "UTC+10", S3.UTC_PLUS_10_30 = "UTC+10:30", S3.UTC_PLUS_11 = "UTC+11", S3.UTC_PLUS_11_30 = "UTC+11:30", S3.UTC_PLUS_12 = "UTC+12", S3.UTC_PLUS_12_45 = "UTC+12:45", S3.UTC_PLUS_13 = "UTC+13", S3.UTC_PLUS_13_45 = "UTC+13:45", S3.UTC_PLUS_14 = "UTC+14", S3))(M3 || {});
var B3 = ((r3) => (r3.AcreTime = "ACT", r3.AfghanistanTime = "AFT", r3.AIXCentralEuropeanTime = "DFT", r3.AlaskaDaylightTime = "AKDT", r3.AlaskaStandardTime = "AKST", r3.AlmaAtaTime = "ALMT", r3.AmazonSummerTime = "AMST", r3.AmazonTime = "AMT", r3.AnadyrTime = "ANAT", r3.AqtobeTime = "AQTT", r3.ArabiaStandardTime = "AST", r3.ArgentinaTime = "ART", r3.ArmeniaTime = "AMT", r3.ASEANCommonTime = "ASEAN", r3.AtlanticDaylightTime = "ADT", r3.AtlanticStandardTime = "AST", r3.AustralianCentralDaylightSavingTime = "ACDT", r3.AustralianCentralStandardTime = "ACST", r3.AustralianCentralWesternStandardTime = "ACWST", r3.AustralianEasternDaylightSavingTime = "AEDT", r3.AustralianEasternStandardTime = "AEST", r3.AustralianEasternTime = "AET", r3.AustralianWesternStandardTime = "AWST", r3.AzerbaijanTime = "AZT", r3.AzoresStandardTime = "AZOT", r3.AzoresSummerTime = "AZOST", r3.BakerIslandTime = "BIT", r3.BangladeshStandardTime = "BST", r3.BhutanTime = "BTT", r3.BoliviaTime = "BOT", r3.BougainvilleStandardTime = "BST", r3.BrasiliaSummerTime = "BRST", r3.BrasiliaTime = "BRT", r3.BritishIndianOceanTime = "BIOT", r3.BritishSummerTime = "BST", r3.BruneiTime = "BNT", r3.CapeVerdeTime = "CVT", r3.CentralAfricaTime = "CAT", r3.CentralDaylightTime = "CDT", r3.CentralEuropeanSummerTime = "CEST", r3.CentralEuropeanTime = "CET", r3.CentralIndonesiaTime = "WITA", r3.CentralStandardTime = "CST", r3.CentralTime = "CT", r3.CentralWesternStandardTime = "CWST", r3.ChamorroStandardTime = "CHST", r3.ChathamDaylightTime = "CHADT", r3.ChathamStandardTime = "CHAST", r3.ChileStandardTime = "CLT", r3.ChileSummerTime = "CLST", r3.ChinaStandardTime = "CST", r3.ChoibalsanStandardTime = "CHOT", r3.ChoibalsanSummerTime = "CHOST", r3.ChristmasIslandTime = "CXT", r3.ChuukTime = "CHUT", r3.ClipptertonIslandStandardTime = "CIST", r3.CocosIslandsTime = "CCT", r3.ColombiaSummerTime = "COST", r3.ColombiaTime = "COT", r3.CookIslandTime = "CKT", r3.CoordinatedUniversalTime = "UTC", r3.CubaDaylightTime = "CDT", r3.CubaStandardTime = "CST", r3.DavisTime = "DAVT", r3.DumontDUrvilleTime = "DDUT", r3.EastAfricaTime = "EAT", r3.EasterIslandStandardTime = "EAST", r3.EasterIslandSummerTime = "EASST", r3.EasternCaribbeanTime = "ECT", r3.EasternDaylightTime = "EDT", r3.EasternEuropeanSummerTime = "EEST", r3.EasternEuropeanTime = "EET", r3.EasternGreenlandSummerTime = "EGST", r3.EasternGreenlandTime = "EGT", r3.EasternIndonesianTime = "WIT", r3.EasternStandardTime = "EST", r3.EasternTime = "ET", r3.EcuadorTime = "ECT", r3.FalklandIslandsSummerTime = "FKST", r3.FalklandIslandsTime = "FKT", r3.FernandoDeNoronhaTime = "FNT", r3.FijiTime = "FJT", r3.FrenchGuianaTime = "GFT", r3.FrenchSouthernAndAntarcticTime = "TFT", r3.FurtherEasternEuropeanTime = "FET", r3.GalapagosTime = "GALT", r3.GambierIslandTime = "GIT", r3.GambierIslandsTime = "GAMT", r3.GeorgiaStandardTime = "GET", r3.GilbertIslandTime = "GILT", r3.GreenwichMeanTime = "GMT", r3.GulfStandardTime = "GST", r3.GuyanaTime = "GYT", r3.HawaiiAleutianDaylightTime = "HDT", r3.HawaiiAleutianStandardTime = "HST", r3.HeardAndMcDonaldIslandsTime = "HMT", r3.HeureAvanceeDEuropeCentraleTime = "HAEC", r3.HongKongTime = "HKT", r3.HovdSummerTime = "HOVST", r3.HovdTime = "HOVT", r3.IndianOceanTime = "IOT", r3.IndianStandardTime = "IST", r3.IndochinaTime = "ICT", r3.InternationalDayLineWestTime = "IDLW", r3.IranDaylightTime = "IRDT", r3.IranStandardTime = "IRST", r3.IrishStandardTime = "IST", r3.IrkutskSummerTime = "IRKST", r3.IrkutskTime = "IRKT", r3.IsraelDaylightTime = "IDT", r3.IsraelStandardTime = "IST", r3.JapanStandardTime = "JST", r3.KaliningradTime = "KALT", r3.KamchatkaTime = "KAMT", r3.KoreaStandardTime = "KST", r3.KosraeTime = "KOST", r3.KrasnoyarskSummerTime = "KRAST", r3.KrasnoyarskTime = "KRAT", r3.KyrgyzstanTime = "KGT", r3.LineIslandsTime = "LINT", r3.KazakhstanStandardTime = "KAST", r3.LordHoweStandardTime = "LHST", r3.LordHoweSummerTime = "LHST", r3.MacquarieIslandStationTime = "MIST", r3.MagadanTime = "MAGT", r3.MalaysiaStandardTime = "MST", r3.MalaysiaTime = "MYT", r3.MaldivesTime = "MVT", r3.MarquesasIslandsTime = "MART", r3.MarshallIslandsTime = "MHT", r3.MauritiusTime = "MUT", r3.MawsonStationTime = "MAWT", r3.MiddleEuropeanSummerTime = "MEDT", r3.MiddleEuropeanTime = "MET", r3.MoscowTime = "MSK", r3.MountainDaylightTime = "MDT", r3.MountainStandardTime = "MST", r3.MyanmarStandardTime = "MMT", r3.NepalTime = "NCT", r3.NauruTime = "NRT", r3.NewCaledoniaTime = "NCT", r3.NewZealandDaylightTime = "NZDT", r3.NewZealandStandardTime = "NZST", r3.NewfoundlandDaylightTime = "NDT", r3.NewfoundlandStandardTime = "NST", r3.NewfoundlandTime = "NT", r3.NiueTime = "NUT", r3.NorfolkIslandTime = "NFT", r3.NovosibirskTime = "NOVT", r3.OmskTime = "OMST", r3.OralTime = "ORAT", r3.PacificDaylightTime = "PDT", r3.PacificStandardTime = "PST", r3.PakistanStandardTime = "PKT", r3.PalauTime = "PWT", r3.PapuaNewGuineaTime = "PGT", r3.ParaguaySummerTime = "PYST", r3.ParaguayTime = "PYT", r3.PeruTime = "PET", r3.PhilippineStandardTime = "PHST", r3.PhilippineTime = "PHT", r3.PhoenixIslandTime = "PHOT", r3.PitcairnTime = "PST", r3.PohnpeiStandardTime = "PONT", r3.ReunionTime = "RET", r3.RotheraResearchStationTime = "ROTT", r3.SaintPierreAndMiquelonDaylightTime = "PMDT", r3.SaintPierreAndMiquelonStandardTime = "PMST", r3.SakhalinIslandTime = "SAKT", r3.SamaraTime = "SAMT", r3.SamoaDaylightTime = "SDT", r3.SamoaStandardTime = "SST", r3.SeychellesTime = "SCT", r3.ShowaStationTime = "SYOT", r3.SingaporeStandardTime = "SST", r3.SingaporeTime = "SGT", r3.SolomonIslandsTime = "SBT", r3.SouthAfricanStandardTime = "SAST", r3.SouthGeorgiaAndTheSouthSandwichIslandsTime = "GST", r3.SrednekolymskTime = "SRET", r3.SriLankaStandardTime = "SLST", r3.SurinameTime = "SRT", r3.TahitiTime = "TAHT", r3.TajikistanTime = "TJT", r3.ThailandStandardTime = "THA", r3.TimorLesteTime = "TLT", r3.TokelauTime = "TKT", r3.TongaTime = "TOT", r3.TurkeyTime = "TRT", r3.TurkmenistanTime = "TMT", r3.TuvaluTime = "TVT", r3.UlaanbaatarStandardTime = "ULAT", r3.UlaanbaatarSummerTime = "ULAST", r3.UruguayStandardTime = "UYT", r3.UruguaySummerTime = "UYST", r3.UzbekistanTime = "UZT", r3.VanuatuTime = "VUT", r3.VenezuelaStandardTime = "VET", r3.VladivostokTime = "VLAT", r3.VolgogradTime = "VOLT", r3.VostokStationTime = "VOST", r3.WakeIslandTime = "WAKT", r3.WestAfricaSummerTime = "WAST", r3.WestAfricaTime = "WAT", r3.WestGreenlandSummerTime = "WGST", r3.WestGreenlandTime = "WGT", r3.WestKazakhstanTime = "WKT", r3.WesternEuropeanSummerTime = "WEDT", r3.WesternEuropeanTime = "WET", r3.WesternIndonesianTime = "WIT", r3.WesternStandardTime = "WST", r3.YakutskTime = "YAKT", r3.YekaterinburgTime = "YEKT", r3))(B3 || {});
var K3 = ((_3) => (_3.Africa = "Africa", _3.Americas = "Americas", _3.Asia = "Asia", _3.Europe = "Europe", _3.Oceania = "Oceania", _3.Polar = "Polar", _3))(K3 || {});
var w3 = ((c3) => (c3.CentralAmerica = "Central America", c3.EasternAsia = "Eastern Asia", c3.EasternEurope = "Eastern Europe", c3.EasternAfrica = "Eastern Africa", c3.MiddleAfrica = "Middle Africa", c3.MiddleEast = "Middle East", c3.NorthernAfrica = "Northern Africa", c3.NorthernAmerica = "Northern America", c3.NorthernEurope = "Northern Europe", c3.Polynesia = "Polynesia", c3.SouthAmerica = "South America", c3.SouthernAfrica = "Southern Africa", c3.SouthernAsia = "Southern Asia", c3.SouthernEurope = "Southern Europe", c3.WesternAfrica = "Western Africa", c3.WesternAsia = "Western Asia", c3.WesternEurope = "Western Europe", c3.WesternAustralia = "Western Australia", c3))(w3 || {});
var we2 = { Afghanistan: { i18n: { calling_codes: [93], currencies: ["AFN"], languages: ["ps", "prs", "tk", "uz"], tz: { offsets: ["UTC+4:30"], regions: ["Asia/Kabul"], timezones: ["AFT"] } }, id: "AF", info: { flag: { emoji: "\u{1F1E6}\u{1F1EB}", emoji_unicode: "U+1F1E6 U+1F1EB", svg: "https://www.countryflags.io/af/flat/64.svg" }, tld: [".af"] }, iso: { alpha2: "AF", alpha3: "AFG", numeric: "004" }, name: { alt_spellings: ["AF", "Af\u0121\u0101nist\u0101n"], demonym: "Afghan", native: { endonym: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646" }, official: "Islamic Republic of Afghanistan", short: "Afghanistan", translations: { ["af"]: "Afghanistan", ["sq"]: "Shqip\xEBri", ["am"]: "\u12A0\u134D\u130B\u1295", ["ar"]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", ["hy"]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", ["az"]: "Az\u0259rbaycan", ["ba"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["eu"]: "Afganist\xE1n", ["be"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["bn"]: "\u0986\u09AB\u0997\u09BE\u09A8\u09BF\u09B8\u09CD\u09A4\u09BE\u09A8", ["ber"]: "\u0623\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", ["dz"]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F51\u0F7C\u0F53\u0F0B\u0F63\u0F7A\u0F0B\u0F66\u0F90\u0F51\u0F0B\u0F46\u0F0D", ["bs"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["br"]: "Afganistan", ["bg"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["my"]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A", ["ca"]: "Afganistan", ["zh"]: "\u963F\u5BCC\u6C57", ["hr"]: "Afganistan", ["cs"]: "Afganistan", ["da"]: "Afghanistan", ["nl"]: "Afghanistan", ["en"]: "Afghanistan", ["eo"]: "Afganistan", ["et"]: "Afganistan", ["fi"]: "Afghanistan", ["fr"]: "Afghanistan", ["fy"]: "Afghanistan", ["gl"]: "Afganist\xE1n", ["ka"]: "\u10D0\u10D5\u10E6\u10D0\u10DC\u10D4\u10D7\u10D8", ["de"]: "Afghanistan", ["kl"]: "Afghanistan", ["el"]: "\u0391\u03C6\u03B3\u03B1\u03BD\u03B9\u03C3\u03C4\u03AC\u03BD", ["gu"]: "\u0A85\u0AAB\u0A97\u0ABE\u0AA8\u0ABF\u0AB8\u0ACD\u0AA4\u0ABE\u0AA8", ["ht"]: "Afghanistan", ["ha"]: "Afghanistan", ["he"]: "\u05D0\u05E4\u05D2\u05E0\u05D9\u05E1\u05D8\u05DF", ["hi"]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", ["hu"]: "Afganistan", ["is"]: "Afghanistan", ["ig"]: "Afghanistan", ["id"]: "Afghanistan", ["ga"]: "Afghanistan", ["it"]: "Afghanistan", ["ja"]: "\u30A2\u30D5\u30AC\u30CB\u30B9\u30BF\u30F3", ["jv"]: "Afghanistan", ["kn"]: "\u0C85\u0CAB\u0C97\u0CBE\u0CA8\u0CBF\u0CB8\u0CCD\u0CA4\u0CBE\u0CA8", ["kk"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["km"]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17B7\u1780", ["ko"]: "\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4", ["ku"]: "Afghanistan", ["ky"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["lo"]: "\u0EAD\u0EB2\u0E9F\u0EB2\u0EA5\u0EBD\u0E99", ["la"]: "Afghanistan", ["lv"]: "Afghanistan", ["lt"]: "Afganistanas", ["lb"]: "Afghanistan", ["mk"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["mg"]: "Afghanistan", ["ms"]: "Afghanistan", ["ml"]: "\u0D05\u0D2B\u0D17\u0D3E\u0D28\u0D3F\u0D38\u0D4D\u0D24\u0D3E\u0D28", ["mt"]: "Afghanistan", ["mi"]: "Afghanistan", ["mr"]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", ["mn"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["ne"]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", ["nb"]: "Afghanistan", ["ps"]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", ["fa"]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", ["pl"]: "Afganistan", ["pt"]: "Afghanistan", ["pa"]: "Afghanistan", ["ro"]: "Afghanistan", ["pl"]: "Afganistan", ["ru"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["sm"]: "Afghanistan", ["sa"]: "\u0905\u092B\u0917\u093E\u0928\u093F\u0938\u094D\u0924\u093E\u0928", ["gd"]: "Afghanistan", ["sr"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["st"]: "Afghanistan", ["sn"]: "Afghanistan", ["sd"]: "Afghanistan", ["si"]: "\u0D86\u0D9C\u0DCA\u200D\u0DBB\u0DDC\u0D9A\u0DCA\u0D9A\u0DD2\u0DBA\u0DCF\u0DC0", ["sk"]: "Afganistan", ["sl"]: "Afganistan", ["so"]: "Afghanistan", ["es"]: "Afganist\xE1n", ["su"]: "Afghanistan", ["sw"]: "Afghanistan", ["sv"]: "Afghanistan", ["tl"]: "Afghanistan", ["tg"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["tt"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["ta"]: "\u0B86\u0BAA\u0BCD\u0BAA\u0B95\u0BBE\u0BA9\u0BBF\u0BB8\u0BCD\u0BA4\u0BBE\u0BA9\u0BCD", ["te"]: "\u0C06\u0C2B\u0C4D\u0C18\u0C28\u0C3F\u0C38\u0C4D\u0C24\u0C3E\u0C28\u0C4D", ["th"]: "\u0E2D\u0E31\u0E1F\u0E01\u0E32\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19", ["bo"]: "\u0F68\u0F55\u0F0B\u0F42\u0F7A\u0F0B\u0F53\u0F72\u0F66\u0F72\u0F0B\u0F4F\u0F7A\u0F53\u0F66\u0F72\u0F0D", ["tr"]: "Afganistan", ["uk"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["ur"]: "\u0627\u0641\u063A\u0627\u0646\u0633\u062A\u0627\u0646", ["uz"]: "\u0410\u0444\u0433\u0430\u043D\u0438\u0441\u0442\u0430\u043D", ["vi"]: "Afghanistan", ["cy"]: "Afghanistan", ["xh"]: "Afghanistan", ["yi"]: "Afghanistan", ["yo"]: "Afghanistan", ["zu"]: "Afghanistan" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Kabul", total: 341e5 } }, geography: { area: 652230, region: "Asia", sub_region: "Southern Asia" }, government: { capital: "Kabul", type: "Islamic Emirate" } } }, Albania: { i18n: { calling_codes: [355], currencies: ["ALL"], languages: ["sq", "el", "tr"], tz: { offsets: ["UTC+01"], regions: ["Europe/Brussels"], timezones: ["CET"] } }, id: "AL", info: { flag: { emoji: "\u{1F1E6}\u{1F1F1}", emoji_unicode: "U+1F1E6 U+1F1F1", svg: "https://www.countryflags.io/al/flat/64.svg" }, tld: [".al"] }, iso: { alpha2: "AL", alpha3: "ALB", numeric: "008" }, name: { alt_spellings: ["AL", "Shqip\xEBri", "Shqip\xEBria", "Shqipnia"], demonym: "Albanian", native: { endonym: "Shqip\xEBri" }, official: "Republic of Albania", short: "Albania", translations: { ["af"]: "Albania", ["sq"]: "Albania", ["am"]: "\u12A0\u120D\u1263\u1295\u12EB", ["ar"]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627", ["hy"]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", ["az"]: "Az\u0259rbaycan", ["ba"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["eu"]: "Albania", ["be"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["bn"]: "\u0986\u09B2\u09AC\u09BE\u09A8\u09BF\u09AF\u09BC\u09BE", ["ber"]: "\u0623\u0644\u0628\u0627\u0646\u064A\u0627", ["dz"]: "\u0F60\u0F56\u0FB2\u0F74\u0F42\u0F0B\u0F61\u0F74\u0F63\u0F0B", ["bs"]: "Albanija", ["br"]: "Albania", ["bg"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["my"]: "\u1021\u102C\u1019\u1001\u103B\u1004\u103A\u1010\u1031\u102C\u103A", ["ca"]: "Alb\xE0nia", ["zh"]: "\u963F\u5C14\u5DF4\u5C3C\u4E9A", ["hr"]: "Albanija", ["cs"]: "Alb\xE1nie", ["da"]: "Albanien", ["nl"]: "Albani\xEB", ["en"]: "Albania", ["eo"]: "Albanio", ["et"]: "Albaania", ["fi"]: "Albania", ["fr"]: "Albanie", ["fy"]: "Albani\xEB", ["gl"]: "Alb\xE2nia", ["ka"]: "\u10D0\u10DA\u10D1\u10D0\u10DC\u10D8\u10D0", ["de"]: "Albanien", ["kl"]: "Albania", ["el"]: "\u0391\u03BB\u03B2\u03B1\u03BD\u03AF\u03B1", ["gu"]: "\u0A85\u0AB2\u0AAC\u0AA8\u0ABF\u0AAF\u0ABE", ["ht"]: "Albanais", ["ha"]: "Albania", ["he"]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05D4", ["hi"]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", ["hu"]: "Alb\xE1nia", ["is"]: "Alb\xFAnir", ["ig"]: "Albania", ["id"]: "Albania", ["ga"]: "Alb\xE1in", ["it"]: "Albania", ["ja"]: "\u30A2\u30EB\u30D0\u30CB\u30A2", ["jv"]: "Albania", ["kn"]: "\u0C85\u0CB2\u0CCD\u0CAC\u0CBE\u0CA8\u0CBF\u0CAF\u0CBE", ["kk"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["km"]: "\u17A2\u17B6\u17A0\u17D2\u179C\u17D2\u179A\u17C1\u179F\u17CA\u17B8", ["ko"]: "\uC54C\uBC14\uB2C8\uC544", ["ku"]: "\u0622\u0644\u0628\u0627\u0646\u06CC\u0627", ["ky"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["lo"]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E99\u0EB5", ["la"]: "Albania", ["lv"]: "Alb\u0101nija", ["lt"]: "Albanija", ["lb"]: "Albani\xEB", ["mk"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430", ["mg"]: "Albania", ["ms"]: "Albania", ["ml"]: "\u0D05\u0D32\u0D4D\u0D2C\u0D3E\u0D28\u0D3F\u0D2F\u0D3E", ["mt"]: "Albania", ["mi"]: "Albania", ["mr"]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", ["mn"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["ne"]: "\u0905\u0932\u094D\u092C\u093E\u0928\u093F\u092F\u093E", ["nb"]: "Albania", ["ps"]: "\u0627\u0627\u0644\u0628\u0627\u0646\u06CC", ["fa"]: "\u0622\u0644\u0628\u0627\u0646\u06CC", ["pl"]: "Albania", ["pt"]: "Alb\xE2nia", ["pa"]: "\u0A05\u0A32\u0A2C\u0A28\u0A40\u0A06", ["ro"]: "Alb\u0103n", ["ru"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["sm"]: "Albania", ["sa"]: "Albani", ["gd"]: "Alb\xE0inia", ["sr"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u0458\u0430", ["st"]: "Albania", ["sn"]: "Albania", ["sd"]: "Albania", ["si"]: "\u0D87\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA", ["sk"]: "Alb\xE1nsko", ["sl"]: "Albanija", ["so"]: "Albania", ["es"]: "Albania", ["su"]: "Albania", ["sw"]: "Albania", ["sv"]: "Albanien", ["tl"]: "Albania", ["tg"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["ta"]: "\u0B85\u0BB2\u0BCD\u0BAA\u0BBE\u0BA9\u0BBF\u0BAF\u0BBE", ["tt"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["te"]: "\u0C05\u0C32\u0C4D\u0C2C\u0C3E\u0C28\u0C3F\u0C2F\u0C3E", ["th"]: "\u0E2D\u0E31\u0E25\u0E41\u0E1A\u0E19\u0E34\u0E19\u0E35", ["bo"]: "\u0F68\u0F63\u0F0B\u0F56\u0F72\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F72", ["tr"]: "Albaniye", ["uk"]: "\u0410\u043B\u0431\u0430\u043D\u0456\u044F", ["ur"]: "\u0622\u0644\u0628\u0627\u0646\u06CC", ["uz"]: "\u0410\u043B\u0431\u0430\u043D\u0438\u044F", ["vi"]: "Albanie", ["cy"]: "Albania", ["xh"]: "Albania", ["yi"]: "\u05D0\u05DC\u05D1\u05E0\u05D9\u05E9", ["yo"]: "Albania", ["zu"]: "Albania" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Tirana", total: 2853e3 } }, geography: { area: 28748, region: "Europe", sub_region: "Southern Europe" }, government: { capital: "Tirana", type: "Republic" } } }, Algeria: { i18n: { calling_codes: [213], currencies: ["DZD"], languages: ["ar", "fr", "ber", "tmh"], tz: { offsets: ["UTC+01", "UTC+02"], regions: ["Africa/Algiers"], timezones: ["CET"] } }, id: "DZ", info: { flag: { emoji: "\u{1F1E9}\u{1F1FF}", emoji_unicode: "U+1F1E9 U+1F1FF", svg: "https://www.countryflags.io/dz/flat/64.svg" }, tld: [".dz", ".\u062C\u0632\u0627\u0626\u0631"] }, iso: { alpha2: "DZ", alpha3: "DZA", numeric: "012" }, name: { alt_spellings: ["DZ", "Dzayer", "Alg\xE9rie"], demonym: "Algerian", native: { endonym: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631" }, official: "People's Democratic Republic of Algeria", short: "Algeria", translations: { ["af"]: "Algerije", ["sq"]: "Algeria", ["am"]: "\u12A0\u120D\u1300\u122D\u1235", ["ar"]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631", ["hy"]: "\u0531\u056C\u0563\u0578\u0580\u056B\u0561", ["az"]: "Az\u0259rbaycan", ["ba"]: "\u0410\u043B\u0436\u0438\u0440", ["eu"]: "Algeria", ["be"]: "\u0410\u043B\u0436\u0438\u0440", ["bn"]: "\u0986\u09B2\u099C\u09C7\u09B0", ["ber"]: "\u062C\u0632\u0627\u0626\u0631", ["dz"]: "\u0F62\u0FAB\u0F7C\u0F44\u0F0B\u0F41", ["bs"]: "Al\u017Eir", ["br"]: "Algeria", ["bg"]: "\u0410\u043B\u0436\u0438\u0440", ["my"]: "\u1021\u102C\u101B\u1015\u103A", ["ca"]: "Alg\xE8ria", ["zh"]: "\u963F\u5C14\u53CA\u5229\u4E9A", ["hr"]: "Al\u017Eir", ["cs"]: "Al\u017E\xEDrsko", ["da"]: "Algeriet", ["nl"]: "Algerije", ["en"]: "Algeria", ["eo"]: "Al\u011Derio", ["et"]: "Al\u017Eira", ["fi"]: "Algeria", ["fr"]: "Alg\xE9rie", ["fy"]: "Algeri\xEB", ["gl"]: "Alxeria", ["ka"]: "\u10D0\u10DA\u10D2\u10D8\u10E3\u10E0\u10D8", ["de"]: "Algerien", ["kl"]: "Algeria", ["el"]: "\u0391\u03BB\u03B3\u03B5\u03C1\u03AF\u03B1", ["gu"]: "\u0A86\u0AB2\u0AC7\u0A97\u0AB0\u0ABF\u0AAF\u0ABE", ["ht"]: "Alg\xE9rie", ["ha"]: "Algeria", ["he"]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4", ["hi"]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", ["hu"]: "Alg\xE1r", ["is"]: "Alg\xFAra", ["ig"]: "Algeria", ["id"]: "Aljir", ["ga"]: "Alg\xE9rie", ["it"]: "Algeria", ["ja"]: "\u30A2\u30EB\u30B8\u30A7\u30EA\u30A2", ["jv"]: "Aljir", ["kn"]: "\u0C86\u0CB2\u0CCD\u0C97\u0CC7\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD", ["kk"]: "\u0410\u043B\u0436\u0438\u0440", ["km"]: "\u17A2\u17B6\u179B\u17CB\u1794\u17B6\u1793\u17B8", ["ko"]: "\uC54C\uC81C\uB9AC", ["ku"]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u062C\u0632\u0627\u06CC\u0631", ["ky"]: "\u0410\u043B\u0436\u0438\u0440", ["lo"]: "\u0EAD\u0EB2\u0EA5\u0EB2\u0E88\u0EB5\u0E99", ["la"]: "Algeria", ["lv"]: "Al\u017E\u012Brija", ["lt"]: "Al\u017Eyras", ["lb"]: "Algeria", ["mk"]: "\u0410\u043B\u0436\u0438\u0440", ["mg"]: "Alg\xE9rie", ["ms"]: "Aljir", ["ml"]: "\u0D06\u0D32\u0D02\u0D17\u0D47\u0D30\u0D3F\u0D2F\u0D7B", ["mt"]: "Alg\xE9rie", ["mi"]: "Algeria", ["mr"]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", ["mn"]: "\u0410\u043B\u0436\u0438\u0440", ["ne"]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", ["nb"]: "Algeria", ["ps"]: "\u0627\u0644\u062C\u0632\u0627\u0626\u0631", ["fa"]: "\u062C\u0632\u0627\u06CC\u0631 \u0627\u0644\u0639\u0631\u0628", ["pl"]: "Algieria", ["pt"]: "Alg\xE9ria", ["pa"]: "\u0A06\u0A32\u0A47\u0A17\u0A40\u0A06", ["ro"]: "Algeria", ["ru"]: "\u0410\u043B\u0436\u0438\u0440", ["sm"]: "Algeria", ["sa"]: "\u0906\u0932\u094D\u0917\u0947\u0930\u093F\u092F\u093E", ["gd"]: "Algeria", ["sr"]: "\u0410\u043B\u0436\u0438\u0440", ["st"]: "Algeria", ["sn"]: "Algeria", ["sd"]: "Algeria", ["si"]: "\u0D86\u0DBD\u0DCA\u0DB6\u0DCF\u0DB1\u0DD2\u0DBA", ["sk"]: "Al\u017E\xEDrsko", ["sl"]: "Al\u017Eir", ["so"]: "Algeria", ["es"]: "Algeria", ["su"]: "Aljir", ["sw"]: "Aljir", ["sv"]: "Algeriet", ["tl"]: "Algeria", ["tg"]: "\u0410\u043B\u0436\u0438\u0440", ["ta"]: "\u0B86\u0BB2\u0BCD\u0B95\u0BC7\u0BB0\u0BBF\u0BAF\u0BBE", ["tt"]: "\u0410\u043B\u0436\u0438\u0440", ["te"]: "\u0C06\u0C32\u0C4D\u0C17\u0C47\u0C30\u0C3F\u0C2F\u0C3E", ["th"]: "\u0E2D\u0E32\u0E23\u0E32\u0E01\u0E2D\u0E19", ["bo"]: "\u0F68\u0F63\u0F9F\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F61\u0F72", ["tr"]: "Cezayir", ["uk"]: "\u0410\u043B\u0436\u0438\u0440", ["ur"]: "\u0622\u0644\u062C\u06CC\u0631", ["uz"]: "\u0410\u043B\u0436\u0438\u0440", ["vi"]: "\u1EA2\u0301\u1EA1\u1EA3\u1EAD\u1EB5", ["cy"]: "Algeria", ["xh"]: "Algeria", ["yi"]: "\u05D0\u05DC\u05D2\u05F3\u05D9\u05E8\u05D9\u05D4", ["yo"]: "Algeria", ["zu"]: "Algeria" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Oran", total: 371e5 } }, geography: { area: 2381740, region: "Africa", sub_region: "Northern Africa" }, government: { capital: "Algiers", type: "Republic" } } }, AmericanSamoa: { i18n: { calling_codes: [1684], currencies: ["WST"], languages: ["en", "sm"], tz: { offsets: ["UTC-11"], regions: ["Pacific/Samoa"], timezones: ["SST"] } }, id: "AS", info: { flag: { emoji: "\u{1F1E6}\u{1F1F8}", emoji_unicode: "U+1F1E6 U+1F1F8", svg: "https://www.countryflags.io/as/flat/64.svg" }, tld: [".as"] }, iso: { alpha2: "AS", alpha3: "ASM", numeric: "016" }, name: { alt_spellings: ["AS", "Amerika S\u0101moa", "Amelika S\u0101moa", "S\u0101moa Amelika"], demonym: "American Samoan", native: { endonym: "American Samoa" }, official: "American Samoa", short: "American Samoa", translations: { ["af"]: "Amerikaans Samoa", ["sq"]: "Samoa Amerikane", ["am"]: "\u1233\u121E\u12A0\u122D", ["ar"]: "\u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629", ["hy"]: "\u054D\u0561\u0570\u0561\u0574\u0561\u056C\u056B\u0561", ["az"]: "Samoa Amerikana", ["ba"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0421\u0430\u043C\u043E\u0430", ["eu"]: "Samoa Amerikana", ["be"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430", ["bn"]: "\u0986\u09AE\u09C7\u09B0\u09BF\u0995\u09BE\u09A8 \u09B8\u09BE\u09AE\u09CB\u09AF\u09BC\u09BE", ["ber"]: "\u062C\u0632\u0631 \u0633\u0627\u0645\u0648\u0627 \u0627\u0644\u0623\u0645\u0631\u064A\u0643\u064A\u0629", ["dz"]: "\u0F68\u0F62\u0F92\u0FB1\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F58\u0F44\u0F66\u0F0B\u0F66\u0FA4\u0FB2\u0F7C\u0F51\u0F0B\u0F40\u0FB1\u0F72\u0F0B\u0F66\u0F90\u0F56\u0F66\u0F0B\u0F62\u0F92\u0FB1\u0F74\u0F51\u0F0B\u0F46\u0F7A\u0F53\u0F0B\u0F54\u0F7C\u0F0D", ["bs"]: "Ameri\u010Dka Samoa", ["br"]: "Samoa Amerikan", ["bg"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", ["my"]: "\u1021\u1019\u1039\u1038\u1019\u101B\u102D\u102F\u1018\u102C\u101E\u102C", ["ca"]: "Samoa Americana", ["zh"]: "\u7F8E\u5C5E\u8428\u6469\u4E9A", ["hr"]: "Ameri\u010Dka Samoa", ["cs"]: "Americk\xE1 Samoa", ["da"]: "Amerikansk Samoa", ["nl"]: "Amerikaans Samoa", ["en"]: "American Samoa", ["eo"]: "Samoa Amerika", ["et"]: "Ameerika Samoa", ["fi"]: "Amerikka Samoa", ["fr"]: "American Samoa", ["fy"]: "Amerikaans Samoa", ["gl"]: "Samoa Americana", ["ka"]: "\u10D0\u10DB\u10D4\u10E0\u10D8\u10D9\u10D8\u10E1 \u10E1\u10D0\u10DB\u10DD\u10D0", ["de"]: "Amerikanisch-Samoa", ["kl"]: "Amerikaans Samoa", ["el"]: "\u0391\u03BC\u03B5\u03C1\u03B9\u03BA\u03B1\u03BD\u03B9\u03BA\u03AE \u03A3\u03B1\u03BC\u03CC\u03B1", ["gu"]: "\u0A86\u0AAE\u0AC7\u0AB0\u0ABF\u0A95\u0AA8 \u0AB8\u0ABE\u0AAE\u0ACB\u0AAF\u0ABE", ["ht"]: "Amerikaans Samoa", ["ha"]: "Amerikaans Samoa", ["he"]: "\u05D0\u05DE\u05E8\u05D9\u05E7\u05E0\u05D9\u05D4 \u05E1\u05DE\u05D5\u05D0\u05D4", ["hi"]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", ["hu"]: "Amerikai Szamoa", ["is"]: "Amerikai Szamoa", ["ig"]: "Ikina Amerika", ["id"]: "Samoa Amerika", ["ga"]: "Samoa Amerikana", ["it"]: "Samoa Americane", ["ja"]: "\u30A2\u30E1\u30EA\u30AB\u9818\u30B5\u30E2\u30A2", ["jv"]: "Samoa Amerika", ["kn"]: "\u0C85\u0CAE\u0CC7\u0CB0\u0CBF\u0C95\u0CA8\u0CCD \u0CB8\u0CAE\u0CCB\u0C86", ["kk"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", ["km"]: "\u17A2\u17B6\u1798\u17C9\u17B6\u179A\u17B8\u179F\u17D2\u178F\u1784\u17CB", ["ko"]: "\uC544\uBA54\uB9AC\uCE74 \uC0AC\uBAA8\uC544", ["ku"]: "Amerikaans Samoa", ["ky"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", ["lo"]: "\u0EAD\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94\u0EB2\u0EA1\u0EB2\u0E99\u0EB2\u0E94", ["la"]: "Samoa Amerikana", ["lv"]: "Amerikas Samoa", ["lt"]: "Amerikos Samoa", ["lb"]: "Amerikaans Samoa", ["mk"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", ["mg"]: "Samoa Amerika", ["ms"]: "Amerika Samo", ["ml"]: "\u0D05\u0D2E\u0D47\u0D30\u0D3F\u0D15\u0D4D\u0D15\u0D28\u0D4D\u0D31\u0D4D \u0D38\u0D2E\u0D4B\u0D06", ["mt"]: "Samoa Amerika", ["mi"]: "Samoa Amerika", ["mr"]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", ["mn"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438\u0439 \u0421\u0430\u043C\u043E\u0430", ["ne"]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", ["nb"]: "Amerikansk Samoa", ["ps"]: "\u0627\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627", ["fa"]: "\u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC \u0633\u0645\u0648\u0627", ["pl"]: "Samoa Ameryka\u0144skie", ["pt"]: "Samoa Americana", ["pa"]: "\u0A05\u0A2E\u0A30\u0A40\u0A15\u0A40 \u0A38\u0A3E\u0A2E\u0A4B\u0A06", ["ro"]: "Samoa americane", ["ru"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430\u044F \u0421\u0430\u043C\u043E\u0430", ["sm"]: "Samoa Amerika", ["sa"]: "\u0905\u092E\u0947\u0930\u093F\u0915\u093E \u0938\u092E\u094B\u0906", ["gd"]: "Amerikaans Samoa", ["sr"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", ["st"]: "Amerikaans Samoa", ["sn"]: "Amerikaans Samoa", ["sd"]: "Amerikaans Samoa", ["si"]: "\u0D86\u0DBB\u0DCA\u0DA2\u0DD2\u0DB1\u0DCF\u0DB1\u0DD4 \u0DC3\u0DD0\u0DB8\u0DD0\u0DBD\u0DCA\u0DC0", ["sk"]: "Amerikaans Samoa", ["sl"]: "Amerikaans Samoa", ["so"]: "Amerikaans Samoa", ["es"]: "Samoa Americana", ["su"]: "Amerikaans Samoa", ["sw"]: "Amerikaans Samoa", ["sv"]: "Amerikansk Samoa", ["tl"]: "Amerikaans Samoa", ["tg"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", ["ta"]: "\u0B85\u0BAE\u0BC6\u0BB0\u0BBF\u0B95\u0BCD \u0B9A\u0BAE\u0BCB\u0BB5\u0BBE", ["tt"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", ["te"]: "\u0C05\u0C2E\u0C46\u0C30\u0C3F\u0C15\u0C4D \u0C38\u0C2E\u0C4B\u0C35\u0C3E", ["th"]: "\u0E2A\u0E2B\u0E23\u0E32\u0E0A\u0E2D\u0E32\u0E13\u0E32\u0E08\u0E31\u0E01\u0E23\u0E41\u0E2D\u0E1F\u0E23\u0E34\u0E01\u0E32", ["bo"]: "\u0F68\u0F7A\u0F0B\u0F62\u0F72\u0F0B\u0F40\u0F0B\u0F68\u0F7A\u0F0B\u0F58\u0F72\u0F0B\u0F51\u0F74\u0F0B\u0F61\u0F72\u0F0B\u0F62\u0F72\u0F0B\u0F40", ["tr"]: "Amerikan Samoas\u0131", ["uk"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u044C\u043A\u0430 \u0421\u0430\u043C\u043E\u0430", ["ur"]: "\u0627\u0645\u0631\u06CC\u06A9\u06CC \u0633\u0645\u0648\u0627", ["uz"]: "\u0410\u043C\u0435\u0440\u0438\u043A\u0430\u043D\u0441\u043A\u0438 \u0441\u0430\u043C\u043E\u0430", ["vi"]: "Amerikaans Samoa", ["cy"]: "Amerikaans Samoa", ["xh"]: "Amerikaans Samoa", ["yi"]: "Amerikaans Samoa", ["yo"]: "Amerikaans Samoa", ["zu"]: "Amerikaans Samoa" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Pago Pago", total: 558e3 } }, geography: { area: 199, region: "Oceania", sub_region: "Polynesia" }, government: { capital: "Pago Pago", type: "Nonmetropolitan Territory of the US" } } }, Andorra: { i18n: { calling_codes: [376], currencies: ["EUR"], languages: ["ca", "es"], tz: { offsets: ["UTC+01", "UTC+02"], regions: ["Europe/Andorra"], timezones: ["CET"] } }, id: "AD", info: { flag: { emoji: "\u{1F1E6}\u{1F1F4}", emoji_unicode: "U+1F1E6 U+1F1F4", svg: "https://www.countryflags.io/ad/flat/64.svg" }, tld: [".ad"] }, iso: { alpha2: "AD", alpha3: "AND", numeric: "020" }, name: { alt_spellings: ["AD", "Principality of Andorra", "Principat d'Andorra"], demonym: "Andorran", native: { endonym: "Andorra" }, official: "Principality of Andorra", short: "Andorra", translations: { ["af"]: "Andorra", ["sq"]: "Andorra", ["am"]: "\u12A0\u1295\u12F6\u122B", ["ar"]: "\u0623\u0646\u062F\u0648\u0631\u0627", ["hy"]: "\u0540\u0561\u0576\u0564\u0561\u0580\u0561\u057E\u0561\u0575\u0584", ["az"]: "Andorra", ["ba"]: "\u0410\u043D\u0434\u043E\u0440\u0430", ["eu"]: "Andorra", ["be"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["bn"]: "\u0985\u09A8\u09CD\u09A1\u09CB\u09B0\u09BE", ["ber"]: "\u0623\u0646\u062F\u0648\u0631\u0627", ["dz"]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B", ["bs"]: "Andora", ["br"]: "Andorra", ["bg"]: "\u0410\u043D\u0434\u043E\u0440\u0430", ["my"]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102D\u102F\u1038", ["ca"]: "Andorra", ["zh"]: "\u5B89\u9053\u5C14", ["hr"]: "Andora", ["cs"]: "Andorra", ["da"]: "Andorra", ["nl"]: "Andorra", ["en"]: "Andorra", ["eo"]: "Andora", ["et"]: "Andorra", ["fi"]: "Andorra", ["fr"]: "Andorra", ["fy"]: "Andorra", ["gl"]: "Andorra", ["ka"]: "\u12A0\u1295\u12F6\u122B", ["de"]: "Andorra", ["el"]: "\u0391\u03BD\u03B4\u03CC\u03C1\u03B1", ["he"]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4", ["hi"]: "\u0905\u0902\u0921\u094B\u0930\u093E", ["hu"]: "Andorra", ["is"]: "Andorra", ["ig"]: "Andorra", ["id"]: "Andorra", ["ga"]: "Andorra", ["it"]: "Andorra", ["ja"]: "\u30A2\u30F3\u30C9\u30E9", ["jv"]: "Andorra", ["kn"]: "\u0C85\u0C82\u0CA1\u0CCB\u0CB0\u0CBF\u0CAF\u0CA8\u0CCD", ["kk"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["km"]: "\u17A2\u1784\u17CB\u178A\u17B6\u179A\u17B6", ["ko"]: "\uC548\uB3C4\uB77C", ["ku"]: "Andorra", ["ky"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["lo"]: "\u0EAD\u0EB1\u0E99\u0EC2\u0E94\u0EA3\u0EB2", ["la"]: "Andorra", ["lv"]: "Andora", ["lt"]: "Andora", ["lb"]: "Andorra", ["mk"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["mg"]: "Andorra", ["ms"]: "Andorra", ["ml"]: "\u0D05\u0D02\u0D21\u0D4B\u0D30\u0D3F\u0D2F\u0D28\u0D4D", ["mt"]: "Andorra", ["mi"]: "Andorra", ["mr"]: "\u0905\u0902\u0921\u094B\u0930\u093E", ["mn"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["ne"]: "\u0905\u0902\u0921\u094B\u0930\u093E", ["nb"]: "Andorra", ["ps"]: "\u0622\u0646\u062F\u0648\u0631\u0627", ["fa"]: "\u0622\u0646\u062F\u0648\u0631\u0627", ["pl"]: "Andora", ["pt"]: "Andorra", ["pa"]: "\u0A05\u0A70\u0A21\u0A4B\u0A30\u0A3E", ["ro"]: "Andorra", ["ru"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["sm"]: "Andorra", ["sa"]: "\u0905\u0902\u0921\u094B\u0930\u093E", ["gd"]: "Andorra", ["sr"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["st"]: "Andorra", ["sn"]: "Andorra", ["sd"]: "\u0905\u0902\u0921\u094B\u0930\u093E", ["si"]: "\u0D86\u0DB1\u0DCA\u0DAF\u0DDA", ["sk"]: "Andorra", ["sl"]: "Andora", ["so"]: "Andorra", ["es"]: "Andorra", ["su"]: "Andorra", ["sw"]: "Andorra", ["sv"]: "Andorra", ["tl"]: "Andorra", ["tg"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["ta"]: "\u0B85\u0BA9\u0BCB\u0BB0\u0BCD\u0B9F\u0BBE", ["tt"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["te"]: "\u0C05\u0C02\u0C21\u0C4B\u0C30\u0C4D\u0C30\u0C3E", ["th"]: "\u0E2D\u0E31\u0E19\u0E14\u0E2D\u0E23\u0E4C\u0E23\u0E32", ["bo"]: "\u0F68\u0F53\u0F0B\u0F4C\u0F7C\u0F0B", ["tr"]: "Andora", ["uk"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["ur"]: "\u0622\u0646\u062F\u0648\u0631\u0627", ["uz"]: "\u0410\u043D\u0434\u043E\u0440\u0440\u0430", ["vi"]: "Andorra", ["cy"]: "Andorra", ["xh"]: "Andorra", ["yi"]: "\u05D0\u05E0\u05D3\u05D5\u05E8\u05D4", ["yo"]: "Andorra", ["zu"]: "Andorra" } }, statistics: { demographics: { age: { distribution: [{ age: "0 to 14 years", percentage: 15.3 }, { age: "15 to 64 years", percentage: 66.7 }, { age: "65 years and over", percentage: 14.6 }], median_age: 35.5 }, population: { largest_city: "Andorra la Vella", total: 78e3 } }, geography: { area: 468, region: "Europe", sub_region: "Southern Europe" }, government: { capital: "Andorra la Vella", type: "Constitutional Monarchy" } } }, Angola: { i18n: { calling_codes: [244], currencies: ["AOA"], languages: ["pt", "es", "fr", "it", "de", "en"], tz: { offsets: ["UTC+00", "UTC+01", "UTC+02"], regions: ["Africa/Luanda"], timezones: ["WAT"] } }, id: "AO", info: { flag: { emoji: "\u{1F1E6}\u{1F1EC}", emoji_unicode: "U+1F1E6 U+1F1EC", svg: "https://www.countryflags.io/ao/flat/64.svg" }, tld: [".ao"] }, iso: { alpha2: "AO", alpha3: "AGO", numeric: "024" }, name: { alt_spellings: ["AO", "Rep\xFAblica de Angola", "\u0281\u025Bpublika de an"], demonym: "Angolan", native: { endonym: "Angola" }, official: "Republic of Angola", short: "Angola", translations: { ["af"]: "Angola", ["sq"]: "Ang\xF2la", ["am"]: "\u12A0\u1295\u130E\u120A\u12EB", ["ar"]: "\u0623\u0646\u063A\u0648\u0644\u0627", ["hy"]: "\u0540\u0561\u0576\u0563\u0561\u056C\u0561\u056F\u0561", ["az"]: "Ang\u0259l", ["ba"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["eu"]: "Angola", ["be"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["bn"]: "\u0985\u0999\u09CD\u0997\u09B2\u09BE", ["ber"]: "Angola", ["dz"]: "\u0F60\u0F56\u0FB2\u0F74\u0F42", ["bs"]: "Angola", ["br"]: "Angola", ["bg"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["my"]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A", ["ca"]: "Angola", ["zh"]: "\u5B89\u54E5\u62C9", ["hr"]: "Angola", ["cs"]: "Angola", ["da"]: "Angola", ["nl"]: "Angola", ["en"]: "Angola", ["eo"]: "Angolo", ["et"]: "Angola", ["fi"]: "Angola", ["fr"]: "Angola", ["fy"]: "Angola", ["gl"]: "Angola", ["ka"]: "\u10D0\u10DC\u10D2\u10DD\u10DA\u10D0", ["de"]: "Angola", ["kl"]: "Angola", ["el"]: "\u0391\u03B3\u03BA\u03CC\u03BB\u03B1", ["gu"]: "\u0A85\u0A82\u0A97\u0ACB\u0AB2\u0ABE", ["ht"]: "Angola", ["ha"]: "Angola", ["he"]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4", ["hi"]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", ["hu"]: "Angola", ["is"]: "Angola", ["ig"]: "Angola", ["id"]: "Angola", ["ga"]: "Angola", ["it"]: "Angola", ["ja"]: "\u30A2\u30F3\u30B4\u30E9", ["jv"]: "Anggol", ["kn"]: "\u0C85\u0C82\u0C97\u0CCB\u0CB2\u0CBE", ["kk"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["km"]: "\u17A2\u1784\u17CB\u1780\u17B6\u179B\u17A2\u1784\u17CB\u1782\u17D2\u179B\u17C1\u179F", ["ko"]: "\uC559\uACE8\uB77C", ["ku"]: "Angola", ["ky"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["lo"]: "\u0EAD\u0EB0\u0E99\u0EB2\u0E94\u0EB2", ["la"]: "Angola", ["lv"]: "Angola", ["lt"]: "Angola", ["lb"]: "Angola", ["mk"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["mg"]: "Angola", ["ms"]: "Angola", ["ml"]: "\u0D05\u0D02\u0D17\u0D4B\u0D33\u0D3E", ["mt"]: "Angola", ["mi"]: "Angola", ["mr"]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", ["mn"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["ne"]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", ["nb"]: "Angola", ["ps"]: "\u0627\u0646\u06AB\u0648\u0644\u0627", ["fa"]: "\u0622\u0646\u06AF\u0648\u0644\u0627", ["pl"]: "Angola", ["pt"]: "Angola", ["pa"]: "\u0A05\u0A19\u0A4D\u0A17\u0A4B\u0A32\u0A3E", ["ro"]: "Angole", ["ru"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["sm"]: "Angola", ["sa"]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", ["gd"]: "Angola", ["sr"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["st"]: "Angola", ["sn"]: "Angola", ["sd"]: "\u0905\u0919\u094D\u0917\u094B\u0932\u093E", ["si"]: "\u0D86\u0D9C\u0DBD\u0DD2\u0DBA\u0DCF\u0DC0", ["sk"]: "Angola", ["sl"]: "Angola", ["so"]: "Angola", ["es"]: "Angola", ["su"]: "Angola", ["sw"]: "Angola", ["sv"]: "Angola", ["tl"]: "Angola", ["tg"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["ta"]: "\u0B85\u0B99\u0BCD\u0B95\u0BCB\u0BB2\u0BBE", ["tt"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["te"]: "\u0C05\u0C02\u0C17\u0C4B\u0C32\u0C3E", ["th"]: "\u0E2D\u0E07\u0E04\u0E4C\u0E01\u0E32\u0E23\u0E2D\u0E32\u0E19\u0E32\u0E21\u0E34\u0E2A\u0E16\u0E32\u0E19", ["bo"]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B", ["tr"]: "Angola", ["uk"]: "\u0410\u043D\u0433\u043E\u043B\u0430", ["ur"]: "\u0627\u0646\u06AF\u0648\u0644\u0627", ["uz"]: "Angola", ["vi"]: "Angola", ["xh"]: "Angola", ["cy"]: "Angola", ["yi"]: "\u05D0\u05E0\u05D2\u05D5\u05DC\u05D4", ["yo"]: "Angola", ["zu"]: "Angola" } } }, Anguilla: { i18n: { calling_codes: [1264], currencies: ["XCD", "XCD", "EUR", "USD", "GBP"], languages: ["en", "es"], tz: { offsets: ["UTC-04"], regions: ["America/Anguilla"], timezones: ["AST"] } }, id: "AI", info: { flag: { emoji: "\u{1F1E6}\u{1F1EC}", emoji_unicode: "U+1F1E6 U+1F1EC", svg: "https://www.countryflags.io/ai/flat/64.svg" }, tld: [".ai"] }, iso: { alpha2: "AI", alpha3: "AIA", numeric: "660" }, name: { alt_spellings: ["AI"], demonym: "Anguillian", native: { endonym: "Anguilla" }, official: "Anguilla", short: "Anguilla", translations: { ["af"]: "Anguilla", ["sq"]: "Anguilla", ["am"]: "\u12A0\u1295\u1309\u120B", ["ar"]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627", ["hy"]: "\u0531\u0576\u0563\u056B\u056C\u0561", ["az"]: "Az\u0259rbaycan", ["ba"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["eu"]: "Angila", ["be"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["bn"]: "\u0985\u0999\u09CD\u0997\u09C0\u09B2\u09BE", ["ber"]: "\u0623\u0646\u063A\u0648\u064A\u0644\u0627", ["dz"]: "\u0F68\u0F44\u0F0B\u0F63\u0F7C\u0F0B", ["bs"]: "Angila", ["br"]: "Angila", ["bg"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["my"]: "\u1021\u1004\u103A\u1039\u1002\u101C\u102D\u1010\u103A", ["ca"]: "Angilla", ["zh"]: "\u5B89\u572D\u62C9", ["hr"]: "Angila", ["cs"]: "Anguilla", ["da"]: "Anguilla", ["nl"]: "Anguilla", ["en"]: "Anguilla", ["eo"]: "Angila", ["et"]: "Anguilla", ["fi"]: "Anguilla", ["fr"]: "Anguilla", ["fy"]: "Angila", ["gl"]: "Anguilla", ["ka"]: "\u10D0\u10DC\u10D2\u10D8\u10DA\u10D0", ["de"]: "Anguilla", ["kl"]: "Anguilla", ["el"]: "\u0391\u03BD\u03B3\u03BA\u03C5\u03BB\u03AC", ["gu"]: "\u0A85\u0A82\u0A97\u0ACD\u0AAF\u0ABE\u0AB2\u0ABE", ["ht"]: "Anguilla", ["ha"]: "Anguilla", ["he"]: "\u05D0\u05E0\u05D2\u05D5\u05D9\u05D0\u05DC\u05D4", ["hi"]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", ["hu"]: "Anguilla", ["is"]: "Anguilla", ["ig"]: "Anguilla", ["id"]: "Anguilla", ["ga"]: "Anguilla", ["it"]: "Anguilla", ["ja"]: "\u30A2\u30F3\u30AE\u30E9", ["jv"]: "Anguilla", ["kn"]: "\u0C85\u0C82\u0C97\u0CCD\u0CB5\u0CC7\u0CB2\u0CBE", ["kk"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["km"]: "\u17A2\u1784\u17CB\u1780\u17B6\u179A\u17A0\u17D2\u1782\u17B8\u1798", ["ko"]: "\uC575\uADC8\uB77C", ["ku"]: "Anguilla", ["ky"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["lo"]: "\u0EAD\u0EB0\u0E99\u0EB0\u0E88\u0EB3", ["la"]: "Anguilla", ["lv"]: "Anguilla", ["lt"]: "Anguilla", ["lb"]: "Angilla", ["mk"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["mg"]: "Angila", ["ms"]: "Anguilla", ["ml"]: "\u0D05\u0D02\u0D17\u0D4D\u0D35\u0D47\u0D32\u0D3E", ["mt"]: "Anguilla", ["mi"]: "Anguilla", ["mr"]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", ["mn"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["ne"]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", ["nb"]: "Anguilla", ["ps"]: "\u0622\u0646\u06AF\u0648\u0644\u0627", ["fa"]: "\u0622\u0646\u06AF\u0648\u0644\u0627", ["pl"]: "Anguilla", ["pt"]: "Anguilla", ["pa"]: "\u0A05\u0A02\u0A17\u0A40\u0A32\u0A3E", ["ro"]: "Anguilla", ["ru"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["sm"]: "Anguilla", ["sa"]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", ["gd"]: "Anguilla", ["sr"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["st"]: "Anguilla", ["sn"]: "Anguilla", ["sd"]: "\u0905\u0902\u0917\u094D\u0935\u0947\u0932\u093E", ["si"]: "\u0D86\u0D82\u0D9C\u0DD2\u0DBD\u0DCF\u0DC0", ["sk"]: "Anguilla", ["sl"]: "Anguilla", ["so"]: "Anguilla", ["es"]: "Anguilla", ["su"]: "Anguilla", ["sw"]: "Anguilla", ["sv"]: "Anguilla", ["tl"]: "Anguilla", ["tg"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["ta"]: "\u0B85\u0B99\u0BCD\u0B95\u0BC8\u0BB2\u0BBE", ["tt"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["te"]: "\u0C05\u0C02\u0C17\u0C4D\u0C35\u0C47\u0C32\u0C3E", ["th"]: "\u0E2D\u0E31\u0E07\u0E01\u0E32\u0E25\u0E32", ["bo"]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B", ["tr"]: "Anguilla", ["uk"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["ur"]: "\u0622\u0646\u06AF\u0648\u0644\u0627", ["uz"]: "\u0410\u043D\u0433\u0438\u043B\u0438", ["vi"]: "Anguilla", ["cy"]: "Anguilla", ["xh"]: "Anguilla", ["yi"]: "Anguilla", ["yo"]: "Anguilla", ["zu"]: "Anguilla" } } }, Antarctica: { i18n: { calling_codes: [672], currencies: ["USD", "EUR"], languages: ["en", "es", "fr", "pt", "it", "nl", "de", "sv", "nb", "da", "fi"], tz: { offsets: ["UTC+01", "UTC+02"], regions: ["Antarctica/Casey", "Antarctica/Davis", "Antarctica/McMurdo", "Antarctica/Palmer", "Antarctica/Rothera"], timezones: ["AST", "CT", "ET", "AST", "AZOT", "NST"] } }, id: "AQ", info: { flag: { emoji: "\u{1F1E6}\u{1F1F6}", emoji_unicode: "U+1F1E6 U+1F1F6", svg: "https://www.countryflags.io/aq/flat/64.svg" }, tld: [".aq"] }, iso: { alpha2: "AQ", alpha3: "ATA", numeric: "010" }, name: { alt_spellings: ["AQ"], demonym: "Antarctican", native: { endonym: "Antarctica" }, official: "Antarctica", short: "Antarctica", translations: { ["af"]: "Antarctica", ["sq"]: "Antarktika", ["am"]: "\u12A0\u1295\u1272\u120D\u12AB\u1293", ["ar"]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", ["hy"]: "\u0540\u0561\u0576\u0561\u0580\u0561\u057F\u056F\u0578", ["az"]: "Az\u0259rbaycan", ["ba"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["eu"]: "Antarktika", ["be"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["bn"]: "\u0985\u09A8\u09CD\u09A4\u09B0\u09BE\u09B6\u09CD\u09AC\u09C0", ["ber"]: "\u0623\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", ["dz"]: "\u0F68\u0F44\u0F0B\u0F63\u0F72\u0F0B", ["bs"]: "Antarktika", ["br"]: "Antarktika", ["bg"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["my"]: "\u1021\u1014\u1039\u1010\u102C\u101B\u102E\u1038\u101A\u102C\u1038", ["ca"]: "Ant\xE0rtida", ["zh"]: "\u5357\u6781\u6D32", ["hr"]: "Antarktika", ["cs"]: "Antarktida", ["da"]: "Antarktis", ["nl"]: "Antarctica", ["en"]: "Antarctica", ["eo"]: "Antarktika", ["et"]: "Antarktika", ["fi"]: "Antarktis", ["fr"]: "Antarctica", ["fy"]: "Antarktis", ["gl"]: "Ant\xE1rtida", ["ka"]: "\u10D0\u10DC\u10E2\u10D0\u10E0\u10E5\u10E2\u10D8\u10D9\u10D0", ["de"]: "Antarktis", ["kl"]: "Antarktis", ["el"]: "\u0391\u03BD\u03C4\u03B1\u03C1\u03BA\u03C4\u03B9\u03BA\u03AE", ["gu"]: "\u0A85\u0AA8\u0ACD\u0AA4\u0AB0\u0ABE\u0AB6\u0ACD\u0AB5\u0AC0", ["ht"]: "Antarctica", ["ha"]: "Antarktika", ["he"]: "\u05D0\u05E0\u05D8\u05E8\u05E7\u05D8\u05D9\u05E7\u05D4", ["hi"]: "\u0905\u0928\u094D\u0924\u0930\u0915\u094D\u0937\u0947\u0924\u094D\u0930", ["hu"]: "Antarktika", ["is"]: "Antarktis", ["ig"]: "Antarktika", ["id"]: "Antarktika", ["ga"]: "Antarktika", ["it"]: "Antartide", ["ja"]: "\u5357\u6975", ["jv"]: "Antarktika", ["kn"]: "\u0C85\u0CA8\u0CCD\u0CA4\u0CB0\u0CBE\u0CB6\u0CCD\u0CB5\u0CBF", ["kk"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["km"]: "\u17A2\u1784\u17CB\u179F\u17D2\u1780\u179A\u17A2\u17B6\u1798\u17C9\u17BB\u1799", ["ko"]: "\uC564\uD2F0\uCE74\uD1A0\uB2C9", ["ku"]: "Antarktika", ["ky"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["lo"]: "\u0EAD\u0EB0\u0E99\u0EAD\u0EA5\u0EB2\u0E81\u0EB4\u0EAA\u0EB0", ["la"]: "Antarctica", ["lv"]: "Antarktika", ["lt"]: "Antarktis", ["lb"]: "Antarktis", ["mk"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["mg"]: "Antarctica", ["ms"]: "Antarktika", ["ml"]: "\u0D05\u0D28\u0D4D\u0D24\u0D30\u0D3E\u0D36\u0D4D\u0D35\u0D3F", ["mt"]: "Antarktika", ["mi"]: "Antarktika", ["mr"]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", ["mn"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["ne"]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", ["nb"]: "Antarktis", ["ps"]: "\u0627\u0646\u062A\u0627\u0631\u0643\u062A\u064A\u0643\u0627", ["fa"]: "\u0622\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627", ["pl"]: "Antarktyka", ["pt"]: "Ant\xE1rtida", ["pa"]: "\u0A05\u0A28\u0A4D\u0A24\u0A30\u0A3E\u0A36\u0A3F\u0A15\u0A3E", ["ro"]: "Antarctica", ["ru"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["sm"]: "Antarktika", ["sa"]: "\u0905\u0928\u094D\u0924\u0930\u093E\u0936\u094D\u0935\u093F\u0915\u093E", ["gd"]: "Antarktika", ["sr"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["st"]: "Antarktika", ["sn"]: "Antarktika", ["sd"]: "Antarktika", ["si"]: "\u0D86\u0DB1\u0DCA\u0DA7\u0DCA\u0DA7\u0DD2\u0D9A\u0DCF\u0DC0", ["sk"]: "Antarktika", ["sl"]: "Antarktika", ["so"]: "Antarktika", ["es"]: "Ant\xE1rtida", ["su"]: "Antarktika", ["sw"]: "Antarktika", ["sv"]: "Antarktis", ["tl"]: "Antarktika", ["tg"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["ta"]: "\u0B85\u0BA9\u0BCD\u0BA4\u0BBE\u0BB0\u0BCD\u0B95\u0BCD\u0B95\u0BBF\u0B95\u0BCD", ["tt"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["te"]: "\u0C05\u0C28\u0C4D\u0C24\u0C30\u0C3E\u0C36\u0C4D\u0C35\u0C3F\u0C15\u0C3E", ["th"]: "\u0E20\u0E39\u0E21\u0E34\u0E20\u0E32\u0E04\u0E2D\u0E32\u0E19\u0E31\u0E19\u0E15\u0E34\u0E01\u0E32", ["bo"]: "\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72\u0F0B\u0F68\u0F7A\u0F53\u0F0B\u0F4A\u0F72\u0F4A\u0F7A\u0F53\u0F0B\u0F40\u0F72\u0F66\u0F72", ["tr"]: "Antarktika", ["uk"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["ur"]: "\u0627\u0646\u062A\u0627\u0631\u06A9\u062A\u06CC\u06A9\u0627", ["uz"]: "\u0410\u043D\u0442\u0430\u0440\u043A\u0442\u0438\u043A\u0430", ["vi"]: "\u0110\u1EA5t Antarktik", ["cy"]: "Antarktika", ["xh"]: "Antarktika", ["yi"]: "Antarktika", ["yo"]: "Antarktika", ["zu"]: "Antarktika" } } }, Armenia: { i18n: { calling_codes: [374], currencies: ["AMD"], languages: ["hy"], tz: { offsets: ["UTC+04"], regions: ["Asia/Jakarta"], timezones: ["AMT"] } }, id: "AM", info: { flag: { emoji: "\u{1F1E6}\u{1F1F2}", emoji_unicode: "U+1F1E6 U+1F1F2", svg: "https://www.countryflags.io/am/flat/64.svg" }, tld: [".am"] }, iso: { alpha2: "AM", alpha3: "ARM", numeric: "051" }, name: { alt_spellings: ["AM", "Hayastan", "Republic of Armenia", "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576"], demonym: "Armenian", native: { endonym: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576" }, official: "Republic of Armenia", short: "Armenia", translations: { ["af"]: "Armeni\xEB", ["sq"]: "Armenia", ["am"]: "\u12A0\u121B\u122D\u129B", ["ar"]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627", ["hy"]: "\u0540\u0561\u0575\u0561\u057D\u057F\u0561\u0576", ["az"]: "Az\u0259rbaycan", ["ba"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["eu"]: "Arm\xE9nia", ["be"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["bn"]: "\u0986\u09B0\u09CD\u09AE\u09C7\u09A8\u09BF", ["ber"]: "\u0623\u0631\u0645\u064A\u0646\u064A\u0627", ["dz"]: "\u0F62\u0F92\u0FB1\u0F0B\u0F53\u0F42", ["bs"]: "Armenija", ["br"]: "Armeni\xEB", ["bg"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["my"]: "\u1021\u102C\u1019\u1010\u102D\u1010\u1039", ["ca"]: "Arm\xE8nia", ["zh"]: "\u4E9A\u7F8E\u5C3C\u4E9A", ["hr"]: "Armenija", ["cs"]: "Arm\xE9nie", ["da"]: "Armenien", ["nl"]: "Armeni\xEB", ["en"]: "Armenia", ["eo"]: "Armenia", ["et"]: "Armeenia", ["fi"]: "Armenia", ["fr"]: "Armenia", ["fy"]: "Armeenia", ["gl"]: "Arm\xE9nia", ["ka"]: "\u10D0\u10E0\u10DB\u10DD\u10DC\u10D8", ["de"]: "Armenien", ["kl"]: "Armenia", ["el"]: "\u0391\u03C1\u03BC\u03B5\u03BD\u03AF\u03B1", ["gu"]: "\u0A85\u0AB0\u0ACD\u0AAE\u0AC7\u0AA8\u0ABF", ["ht"]: "Armenia", ["ha"]: "Armenia", ["he"]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4", ["hi"]: "\u0905\u05E8\u05DE\u05E0\u093F\u092F\u093E", ["hu"]: "\xD6rm\xE9nyorsz\xE1g", ["is"]: "Armenia", ["ig"]: "Armenia", ["id"]: "Armenia", ["ga"]: "Armenia", ["it"]: "Armenia", ["ja"]: "\u30A2\u30EB\u30E1\u30CB\u30A2", ["jv"]: "Armenia", ["kn"]: "\u0C85\u0CB0\u0CCD\u0CAE\u0CC7\u0CA8\u0CBF", ["kk"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["km"]: "\u17A2\u17B6\u1798\u17C9\u17C1\u179A\u17B8", ["ko"]: "\uC544\uB974\uBA54\uB2C8\uC544", ["ku"]: "Armenia", ["ky"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["lo"]: "\u0EAD\u0EB2\u0EAB\u0EBC\u0E99\u0EB2", ["la"]: "Armenia", ["lv"]: "Armeenia", ["lt"]: "Arm\u0117nija", ["lb"]: "Armenien", ["mk"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430", ["mg"]: "Armenia", ["ms"]: "Armenia", ["ml"]: "\u0D05\u0D30\u0D4D\u200D\u0D2E\u0D47\u0D28\u0D3F", ["mt"]: "Armenia", ["mi"]: "Armenia", ["mr"]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F", ["mn"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["ne"]: "\u0905\u0930\u094D\u092E\u0947\u0928\u093F", ["nb"]: "Armenia", ["ps"]: "\u0622\u0631\u0645\u06CC\u0646\u06CC\u0627", ["fa"]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646", ["pl"]: "Armenia", ["pt"]: "Armenia", ["pa"]: "\u0A05\u0A30\u0A2E\u0A40\u0A28\u0A40", ["ro"]: "Armenia", ["ru"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["sm"]: "Armenia", ["sa"]: "Armenia", ["gd"]: "Armenia", ["sr"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u0458\u0430", ["st"]: "Armenia", ["sn"]: "Armenia", ["sd"]: "Armenia", ["si"]: "\u0D86\u0DBB\u0DCA\u0DB8\u0DD3\u0DB1\u0DD2", ["sk"]: "Armenia", ["sl"]: "Armenija", ["so"]: "Armenia", ["es"]: "Armenia", ["su"]: "Armenia", ["sw"]: "Armenia", ["sv"]: "Armenien", ["tl"]: "Armenia", ["tg"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["ta"]: "\u0B85\u0BB0\u0BCD\u0BAE\u0BC7\u0BA9\u0BBF\u0BAF\u0BA9\u0BCD", ["tt"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["te"]: "\u0C05\u0C30\u0C4D\u0C2E\u0C47\u0C28\u0C3F", ["th"]: "\u0E2D\u0E32\u0E23\u0E4C\u0E40\u0E21\u0E19\u0E34\u0E2A\u0E16\u0E32\u0E19", ["bo"]: "\u0F68\u0F62\u0F0B\u0F58\u0F7A\u0F0B\u0F53\u0F72\u0F0B\u0F61\u0F74\u0F0D", ["tr"]: "Ermenistan", ["uk"]: "\u0410\u0440\u043C\u0435\u043D\u0456\u044F", ["ur"]: "\u0627\u0631\u0645\u0646\u0633\u062A\u0627\u0646", ["uz"]: "\u0410\u0440\u043C\u0435\u043D\u0438\u044F", ["vi"]: "Armenia", ["cy"]: "Armenia", ["xh"]: "Armenia", ["yi"]: "\u05D0\u05E8\u05DE\u05E0\u05D9\u05D4", ["yo"]: "Armenia", ["zu"]: "Armenia" } } }, SomeCountry: { i18n: { calling_codes: [], currencies: [], languages: [], tz: { offsets: [], regions: [], timezones: [] } }, id: "AS", info: { flag: { emoji: "", emoji_unicode: "", svg: "" }, tld: [] }, iso: { alpha2: "AS", alpha3: "", numeric: "" }, name: { alt_spellings: [], demonym: "", native: { endonym: "" }, official: "", short: "", translations: { ["af"]: "", ["sq"]: "", ["am"]: "", ["ar"]: "", ["hy"]: "", ["az"]: "", ["ba"]: "", ["eu"]: "", ["be"]: "", ["bn"]: "", ["ber"]: "", ["dz"]: "", ["bs"]: "", ["br"]: "", ["bg"]: "", ["my"]: "", ["ca"]: "", ["zh"]: "", ["hr"]: "", ["cs"]: "", ["da"]: "", ["nl"]: "", ["en"]: "", ["eo"]: "", ["et"]: "", ["fi"]: "", ["fr"]: "", ["fy"]: "", ["gl"]: "", ["ka"]: "", ["de"]: "", ["kl"]: "", ["el"]: "", ["gu"]: "", ["ht"]: "", ["ha"]: "", ["he"]: "", ["hi"]: "", ["hu"]: "", ["is"]: "", ["ig"]: "", ["id"]: "", ["ga"]: "", ["it"]: "", ["ja"]: "", ["jv"]: "", ["kn"]: "", ["kk"]: "", ["km"]: "", ["ko"]: "", ["ku"]: "", ["ky"]: "", ["lo"]: "", ["la"]: "", ["lv"]: "", ["lt"]: "", ["lb"]: "", ["mk"]: "", ["mg"]: "", ["ms"]: "", ["ml"]: "", ["mt"]: "", ["mi"]: "", ["mr"]: "", ["mn"]: "", ["ne"]: "", ["nb"]: "", ["ps"]: "", ["fa"]: "", ["pl"]: "", ["pt"]: "", ["pa"]: "", ["ro"]: "", ["ru"]: "", ["sm"]: "", ["sa"]: "", ["gd"]: "", ["sr"]: "", ["st"]: "", ["sn"]: "", ["sd"]: "", ["si"]: "", ["sk"]: "", ["sl"]: "", ["so"]: "", ["es"]: "", ["su"]: "", ["sw"]: "", ["sv"]: "", ["tl"]: "", ["tg"]: "", ["ta"]: "", ["tt"]: "", ["te"]: "", ["th"]: "", ["bo"]: "", ["tr"]: "", ["uk"]: "", ["ur"]: "", ["uz"]: "", ["vi"]: "", ["cy"]: "", ["xh"]: "", ["yi"]: "", ["yo"]: "", ["zu"]: "" } } } };

// src/utils/endpoints.ts
var logger2 = new e();
var remediator = new je();
var HealthcheckEndpoint = {
  handler: (req, res) => {
    return res.sendStatus(200);
  },
  method: ze2.Get,
  route: "/healthcheck"
};
var exceptionWrapper = async (req, res, cb) => {
  try {
    return await cb(req, res);
  } catch (err) {
    return remediator.handleException(err, { res });
  }
};
function setupEndpoints({
  basePath,
  server,
  endpoints
}) {
  logger2.info("Attaching network endpoints...");
  for (const endpoint of endpoints) {
    server[endpoint.method](`${basePath}${endpoint.route}`, async (req, res) => await exceptionWrapper(req, res, endpoint.handler));
  }
  return server;
}

// src/utils/exception-handling.ts
var import_async_exit_hook = __toESM(require_async_exit_hook(), 1);

// src/middleware/exception-handling.ts
var exceptionHandlingMiddleware = async (err, req, res, next) => {
  const logger4 = new e();
  const exception = new s(err.message, { cause: err });
  logger4.exception(exception.toJSON());
  next();
};

// src/utils/exception-handling.ts
var logger3 = new e();
function configureExceptionHandling(server, listener) {
  logger3.info("Configuring error handling logic...");
  server.use((req, res, next) => {
    const requestId = req.headers["X-Request-Id"];
    if (requestId) {
      res.append("X-Request-Id", requestId);
    }
    next();
  });
  logger3.info("Enabled HTTP request ID tracing.");
  server.use(exceptionHandlingMiddleware);
  logger3.info("Error handling middleware initialized.");
  server.on("error", (err) => {
    const isManaged = err instanceof s;
    const exception = isManaged ? err : new v(err.name, { cause: err });
    logger3.exception(exception.toJSON());
    console.error("ERROR:", exception.toJSON());
  });
  (0, import_async_exit_hook.default)(async () => {
    listener.close((err) => {
      if (err) {
        const isManaged = err instanceof s;
        const exception = isManaged ? new s(err.message, { cause: err }) : new v(err.name, { cause: err });
        logger3.exception(exception.toJSON());
      } else {
        logger3.info("HTTP server successfully closed");
      }
    });
  });
}

// src/index.ts
var HttpServer = class {
  endpoints = [];
  environment = ge2();
  exceptionsClient;
  listener;
  logger;
  name;
  server;
  options = {
    port: 8080
  };
  constructor({
    endpoints,
    name,
    options
  }) {
    this.logger = new e();
    this.server = express();
    this.name = name;
    this.endpoints = endpoints;
    this.options = { ...this.options, ...options };
    console.log("this.environment", this.environment);
    console.log("this.config", this.options);
    this.exceptionsClient = new we({
      processExceptionsHandler: async () => await this.gracefulExit(),
      processInteruptHandler: async () => await this.gracefulExit(),
      processTerminationHandler: async () => await this.gracefulExit()
    });
  }
  async configure() {
    this.logger.info("Configuring server...");
    this.server.use(express.urlencoded({ extended: false }));
    const multerStorage = multer.memoryStorage();
    const upload = multer({ storage: multerStorage }).any();
    this.server.use(upload);
    this.server.use(express.json());
    this.server.disable("etag");
    this.server.use(compression());
    this.logger.info("Added process listeners.");
    this.server.use((req, res, next) => auth_middleware_default(req, res, next));
    this.logger.info("Authentication middleware setup");
    this.server = setupEndpoints({
      basePath: `/${this.name}`,
      endpoints: [...this.endpoints, HealthcheckEndpoint],
      server: this.server
    });
    this.logger.info("\u2764\uFE0F  Healthcheck service started.");
    this.logger.info("Server configured successfully.");
  }
  async listen(portArg) {
    const port = portArg ?? this.options?.port ?? 8080;
    this.logger.info(`Starting server in "${this.environment.name}" environment...`);
    this.secure();
    this.configure();
    this.listener = this.server.listen(port, () => {
      this.logger.info(`\u26A1 Server listening on port ${port}!`);
      if (this.listener) {
        configureExceptionHandling(this.server, this.listener);
      }
    });
  }
  secure() {
    this.server.disable("x-powered-by");
    this.logger.info("Disabled Express x-powered-by header.");
    this.server.use((0, import_cors.default)({
      credentials: true,
      origin: this.options.trustedOrigins?.[this.environment.id]
    }));
    this.logger.info("CORS enabled.");
  }
  async gracefulExit() {
    this.logger.info(`Gracefully shutting down server...'} `);
    if (this.listener) {
      this.listener.close((err) => {
        if (err) {
          const exception = new g(`Error shutting down server ${err.name}`, {
            cause: err,
            origin: {
              file: "index.ts",
              function: "gracefulExit()"
            }
          });
          this.logger.exception(exception.toJSON());
        } else {
          this.logger.info("HTTP server successfully closed");
        }
        this.logger.info(`Killing server process... Goodbye.'} `);
        throw new C("Shutting down gracefully", {
          origin: {
            file: "index.ts",
            function: "gracefulExit()"
          }
        });
      });
    }
  }
};
export {
  HttpServer
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * vary
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */
//# sourceMappingURL=index.js.map
